---
SQL
---






----------------------------------------------------------------------------------------------------------------------------------------------------------------------

preparation
-----------



$ psql
$ sudo -u postgres psql

$ whoami

$ sudo -u postgres createuser --createdb tirion

$ psql postgres



---



# postgres=> \du




---




$ sudo -u postgres createdb --owner=tirion hexlet



---


# createdb hexlet



---




$ psql -l


---


                          List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |
-----------+----------+----------+-------------+-------------+
 pgadmin   | pgadmin  | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 tirion    | tirion   | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |




---





$ psql hexlet

# hexlet=>

# dropdb hexlet





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

database structure
------------------



first_name string
last_name  string
email      string
created_at datetime




---




SELECT * FROM users;





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

database creation
-----------------



DROP DATABASE hexlet;
CREATE DATABASE hexlet;





---




CREATE TABLE courses (
  name          varchar(255),
  slug          varchar(255),
  lessons_count integer,
  body          text
);



---




CREATE TABLE blog_posts (
  name          varchar(80),
  body          text
);




---




CREATE TABLE users (
  id          bigint,
  age         integer
);




---




CREATE TABLE events (
  start_date          date,
  time                time,
  updated_at          timestamp,
  created_at          timestamp
);




---





CREATE TABLE blog_posts (
  published          boolean
);




---




TRUE
't'
'true'
'y'
'yes'
'on'
'1'


---


FALSE
'f'
'false'
'n'
'no'
'off'
'0'




---





# hexlet=> \d


         List of relations
 Schema |    Name    | Type  |  Owner
--------+------------+-------+---------
 public | courses    | table | vagrant
 public | events     | table | vagrant
 public | blog_posts | table | vagrant




---




# hexlet=> \d courses


               Table "public.courses"
    Column     |          Type          | Modifiers
---------------+------------------------+-----------
 name          | character varying(255) |
 slug          | character varying(255) |
 lessons_count | integer                |
 body          | text                   |





---





\l  — список всех баз данных
\dt — список всех таблиц
\?  — вывод справки



---





DROP TABLE courses;





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

insert and modify data
----------------------




INSERT — запрос на вставку данных
UPDATE — запрос на обновление данных
DELETE — запрос на удаление данных




---




INSERT INTO courses (name, slug, lessons_count, body)
  VALUES ('basics of programming', 'basics', 10, 'this is theory');




---






INSERT INTO courses                                             — запрос на вставку в таблицу courses
(name, slug, lessons_count, body)                               — список полей, которые нужно вставить
('basics of programming', 'basics', 10, 'this is theory')       — значения вставленных полей в том же порядке




---




INSERT INTO courses (name, slug) VALUES ('Bash', 'bash');




---




NULL — это специальное значение и оно одно. Пустая строка, 0 и тому подобные вещи не являются NULL.




---




INSERT INTO courses (name, slug) VALUES
  ('Bash', 'bash'), ('PHP', 'php'), ('Ruby', 'ruby');



---




INSERT INTO courses VALUES ('linux', 'linux', 3, 'something about linux');


---


# hexlet=> SELECT * FROM courses;


         name          |  slug  | lessons_count |         body
-----------------------+--------+---------------+-----------------------
 basics of programming | basics |            10 | this is theory
 bash                  | bash   |               |
 linux                 | linux  |             3 | something about linux
(3 rows)




---




UPDATE courses SET body = 'updated!' WHERE slug = 'bash';




---




SET body = 'updated!' — описывается, какое значение установить в какое поле
WHERE slug = 'bash' — указывается ограничение на то, к каким строкам применить обновление




---




UPDATE courses SET body = 'updated!', name = 'Bash' WHERE slug = 'bash';




---




UPDATE courses SET body = 'oops';




---




UPDATE courses SET name = 'new name' WHERE lessons_count > 3;
UPDATE courses SET name = 'another new name' WHERE lessons_count < 2;




---




UPDATE courses SET name = 'new name'
  WHERE slug = 'bash' AND lessons_count > 3;

UPDATE courses SET name = 'another new name'
  WHERE lessons_count < 2 OR lessons_count > 8;





---




UPDATE courses SET name = 'another new name'
  WHERE (lessons_count > 2 AND lessons_count < 8) OR slug = 'linux';




---




DELETE FROM courses WHERE slug = 'bash';




---




TRUNCATE courses;





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

data selection
--------------



SELECT * FROM users;




---




SELECT username, email FROM users;




---




SELECT * FROM users WHERE birthday < '2018-10-21';





---





SELECT * FROM users LIMIT 3;





---





SELECT * FROM users ORDER BY birthday;




---




SELECT * FROM users ORDER BY birthday DESC;





---




SELECT username, created_at FROM users WHERE birthday < '2018-10-21' ORDER BY birthday DESC LIMIT 2;


SELECT username, created_at 
FROM users 
WHERE birthday < '2018-10-21' 
ORDER BY birthday DESC 
LIMIT 2;





---




SELECT
  username,
  created_at
FROM users
WHERE birthday < '2018-10-21'
ORDER BY birthday DESC
LIMIT 2;





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

relational data model
---------------------




----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

first normal form
-----------------



Таблица order_items

first_name  last_name   address                   item              price
-------------------------------------------------------------------------------
Сергей      Иванов      Москва, ул. Промышленная  утюг              15.00
Иван        Петров      Самара, ул. Энгельса      кофеварка         5000.00
Виктор      Сидоров     Омск, ул. Дворцовая       утюг, телевизор   1000.00, 6500.00
Сергей      Иванов      Москва, ул. Матросова     ноутбук           20000.00
Сергей      Иванов      Mосква, ул. Матросова     ноутбук           20000.00




---




SELECT * FROM order_items WHERE item = "?";





---




CREATE TABLE products (
  id bigint PRIMARY KEY,
  first_name varchar(255),
  last_name varchar(255),
  address varchar(255),
  item varchar(255),
  price numeric -- специальный тип данных, который подходит под работу с деньгами. Обеспечивает высокую точность при расчетах.
);





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

second normal form
------------------



order_items

id  user_id   address                   good_id   price
------------------------------------------------------------
8   2         Москва, ул. Промышленная  50        1000.00
2   3         Самара, ул. Энгельса      30        5000.00
7   5         Омск, ул. Дворцовая       50        1000.00
4   5         Омск, ул. Дворцовая       20        6500.00
9   2         Москва, ул. Матросова     33        20000.00
6   2         Москва, ул. Матросова     33        20000.00





---




REFERENCES <название таблицы, на которую смотрим> (<список полей в той таблице, которым соответствуем>)




---





CREATE TABLE orders (
    id bigint PRIMARY KEY,
    user_id bigint REFERENCES users (id),
);





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

third normal form
-----------------



id  user_id   address                   good_id
------------------------------------------------
8   2         Москва, ул. Промышленная  50
2   3         Самара, ул. Энгельса      30
7   5         Омск, ул. Дворцовая       50
4   5         Омск, ул. Дворцовая       20
9   2         Москва, ул. Матросова     33
6   2         Москва, ул. Матросова     33





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

autoincrement
-------------



CREATE TABLE colors (
  id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name varchar(255)
);

INSERT INTO colors (name) VALUES ('Red'), ('Blue');

SELECT * FROM colors;


---


id  name
---------
1   Red
2   Blue



---



column_name type GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY[ ( sequence_option ) ]



---





Тип данных может быть SMALLINT, INT или BIGINT

GENERATED ALWAYS      — не позволит добавлять значение самостоятельно, используя UPDATE или INSERT
GENERATED BY DEFAULT  — в отличие от предыдущего варианта, этот вариант позволяет добавлять значения самостоятельно





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

ontology
--------



SELECT * FROM emails WHERE user_id = 1;




---




one-to-one:


countries

id  name      created_at
----------------------------
2   Russia    11.10.2005
38  Spain     03.08.2000
22  Germany   23.12.2011



cities

id  name        country_id  capital   created_at
-------------------------------------------------
34  Moscow      2           true      11.10.2005
33  Valencia    38                    03.08.2000
99  Voronezh    2                     23.12.2011
4   Ulyanovsk   2                     23.12.2011
5   Berlin      22          true      23.12.2011



---


SELECT * FROM cities WHERE country_id = 38 AND capital = true;




---




many-to-many:



users

id  first_name  created_at
------------------------------
2   Сергей      11.10.2005
38  Иван        03.08.2000
22  Виктор      23.12.2011



courses

id  name            created_at
----------------------------------
8   PHP basics      11.10.2005
55  Python basics   03.08.2000
22  Ruby basics     23.12.2011



---


course_members

id  user_id   course_id   created_at
-----------------------------------------------
34  2         8           11.10.2005
33  38        55          03.08.2000
99  22        22          23.12.2011
4   22        8           23.12.2011
5   38        22          23.12.2011


---



SELECT course_id FROM course_members WHERE user_id = 3;


---


SELECT user_id FROM course_members WHERE course_id = 3;





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

limitations
-----------



CREATE TABLE products (
  id bigint PRIMARY KEY,
  name text,
  price numeric
);




---




CREATE TABLE orders (
  id bigint PRIMARY KEY,
  product_id bigint REFERENCES products (id),
  quantity integer
);




---




CREATE TABLE orders (
    product_id bigint REFERENCES products (id) ON DELETE CASCADE,
);





---




CREATE TABLE orders (
    product_id bigint REFERENCES products (id) ON DELETE SET NULL
);




---




CREATE TABLE products (
    id bigint PRIMARY KEY,
    name text NOT NULL,
    price numeric
);




---




CREATE TABLE orders (
    id bigint PRIMARY KEY,
    product_id bigint REFERENCES products (id) NOT NULL,
    quantity integer
);





---




CREATE TABLE products (
    id bigint PRIMARY KEY,
    name text UNIQUE,
    price numeric
);




---




CREATE TABLE products (
    id bigint PRIMARY KEY,
    name text,
    locale varchar,
    price numeric,
    UNIQUE(name, locale)
);





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

change table structure
----------------------



ALTER TABLE users ADD COLUMN age int;




---




ALTER TABLE courses RENAME COLUMN example1 TO example2;





---




ALTER TABLE courses DROP COLUMN example2;




---




ALTER TABLE addresses
    ADD PRIMARY KEY (id);

ALTER TABLE addresses
    ALTER COLUMN created_at SET DATA TYPE timestamp,
    ALTER COLUMN street DROP NOT NULL;

ALTER TABLE addresses
    ALTER COLUMN city SET NOT NULL;

ALTER TABLE products ADD UNIQUE (product_id);




---





ADD   — добавление ограничения: например, ключа или уникальности
SET   — установка значения: например, типа данных
DROP  — удаление ограничения





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

sort
----



SELECT * FROM users ORDER BY username;




---




SELECT * FROM users ORDER BY created_at;




---




SELECT * FROM users ORDER BY created_at ASC;




---




SELECT * FROM users ORDER BY created_at DESC;




---




SELECT * FROM users ORDER BY first_name, created_at;




---




SELECT * FROM users ORDER BY first_name DESC, created_at DESC;
SELECT first_name, created_at FROM users ORDER BY first_name ASC, created_at DESC;


---


first_name  created_at
--------------------------------
Maryse      2019-03-04 13:03:01
Maryse      2018-12-06 10:24:04
Maryse      2018-12-06 10:09:48
Sunny       2019-03-04 13:04:28
Sunny       2018-12-06 06:19:30
Tanya       2018-12-06 07:12:01
Tanya       2018-12-05 23:55:15




---




SELECT * FROM users ORDER BY created_at ASC;

SELECT * FROM users ORDER BY created_at ASC NULLS FIRST;




---




SELECT * FROM users ORDER BY created_at DESC;

SELECT * FROM users ORDER BY created_at DESC NULLS LAST;





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

condition
---------



SELECT * FROM users WHERE id = 3;

UPDATE users SET first_name = 'Valya' WHERE id = 3;

DELETE FROM users WHERE id = 3;




---




SELECT * FROM users WHERE id != 3;





---




SELECT * FROM users WHERE first_name IS NULL;





---




SELECT * FROM users WHERE created_at IS NOT NULL;




---




SELECT * FROM users WHERE first_name = 'sunny';
SELECT * FROM users WHERE first_name = 'Sunny';




---





>  — больше
<  — меньше
!= — не равно
>= — больше либо равно, не меньше
<= — меньше либо равно, не больше




---




SELECT *
  FROM users
  WHERE created_at < '2018-10-05';




---





SELECT *
  FROM users
  WHERE created_at > '2018-01-01' AND created_at < '2018-10-05';





---




SELECT *
  FROM users
  WHERE first_name = 'Sunny' OR (created_at > '2018-01-01' AND created_at < '2018-10-05');




---




SELECT *
  FROM users
  WHERE created_at BETWEEN '2018-01-01' AND '2018-10-05';




---




SELECT * FROM users WHERE id = 1 OR id = 2 OR id = 5;




---




SELECT * FROM users WHERE id IN (1, 2, 5);




---




SELECT * FROM users WHERE id NOT IN (1, 2, 5);




---




SELECT * FROM users WHERE first_name LIKE 'A%';




---




SELECT * FROM users WHERE email LIKE '%hotmail.com';





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

limit
-----



SELECT * FROM users LIMIT 10;




---




SELECT * FROM users ORDER BY id LIMIT 10;




---




SELECT * FROM users ORDER BY id LIMIT 10 OFFSET 10;




---




SELECT * FROM users ORDER BY id LIMIT 10 OFFSET 20;




---




SELECT * FROM users ORDER BY id LIMIT 10 OFFSET 30;





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

distinct
--------



SELECT first_name FROM users;




---




SELECT DISTINCT first_name FROM users;


---


 first_name
------------
 Delphine
 Hanna
 Maxwell
 Russell
 Mia




---




DISTINCT позволяет указывать не одно, а сразу несколько полей
-------------------------------------------------------------




---




SELECT DISTINCT first_name, last_name FROM users;

 first_name |   last_name
------------+---------------
 Rhiannon   | Tremblay
 Vesta      | Kassulke
 Ena        | Gorczany
 Florencio  | Collier
 Garrett    | Koss




---




SELECT COUNT(DISTINCT first_name) FROM users;




---




DISTINCT ON позволяет отдельно указывать два типа полей — для проверки уникальности и для результирующей выборки




---




SELECT DISTINCT ON (user_id) * FROM topics;


 id | user_id |              title              | body                  |       created_at
----|---------|---------------------------------|-----------------------|------------------------
  2 |       2 | molestiae voluptas velit        | Quod quasi molestiae. | 2019-06-02 23:42:30.688



SELECT DISTINCT ON (user_id) title FROM topics;


             title
-------------------------
 molestiae voluptas velit


SELECT DISTINCT user_id, title FROM topics;
SELECT DISTINCT ON (user_id, title) user_id, title FROM topics;




---




SELECT DISTINCT ON (user_id) id, user_id, title, created_at
  FROM topics
  ORDER BY user_id, created_at;



 id | user_id |            title             |       created_at
----+---------+------------------------------+-------------------------
 48 |       1 | qui non velit                | 2018-12-05 21:49:52.631
  7 |       4 | delectus in nihil            | 2018-12-06 00:46:32.712
 26 |       6 | rerum rerum recusandae       | 2018-12-05 18:39:47.937
 34 |       7 | soluta non voluptas          | 2018-12-06 07:55:00.095





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

functions
---------



COUNT() — функция, которая считает количество записей в выборке. Обратите внимание, что она считает именно в выборке, а не в таблице
------------------------------------------------------------------------------------------------------------------------------------


SELECT COUNT(*) FROM users WHERE birthday < '2018-10-21';

 count
-------
    91
(1 row)




---




MAX и MIN помогают находить максимальное и минимальное значение соответственно
------------------------------------------------------------------------------



SELECT MAX(birthday) FROM users WHERE gender = 'male';

    max
------------
 2018-12-06
 (1 row)



SELECT MIN(birthday) FROM users WHERE gender = 'female';

    min
------------
 2017-12-08
 (1 row)




---




SUM находит сумму всех значений:


SELECT SUM(amount) FROM orders
  WHERE created_at BETWEEN '2016-01-01' AND '2016-12-31';




---




AVG находит среднее арифметическое всех значений:


SELECT AVG(amount) FROM orders
  WHERE created_at BETWEEN '2016-01-01' AND '2016-12-31';





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

group
-----



SELECT COUNT(*) FROM topics WHERE user_id = 3;
SELECT COUNT(*) FROM topics WHERE user_id = 4;




---




SELECT user_id, COUNT(*) FROM topics GROUP BY user_id;

 user_id | count
---------+-------
      71 |     1
      80 |     1
      84 |     3
      92 |     1
      60 |     1
      97 |     2
      98 |     1
      44 |     1
      40 |     1
      43 |     1





---




SELECT user_id, COUNT(*) FROM topics GROUP BY user_id ORDER BY count DESC LIMIT 3;

 user_id | count
---------+-------
      84 |     3
      97 |     2
      57 |     2




---




SELECT user_id, COUNT(*) AS topics_count
  FROM topics
  GROUP BY user_id
  ORDER BY topics_count DESC
  LIMIT 3;




---





AS <name>




---




SELECT first_name AS name FROM users ORDER BY name;




---




SELECT user_id, created_at, COUNT(*) AS topics_count FROM topics GROUP BY user_id;





---




SELECT user_id, created_at, COUNT(*) AS topics_count
  FROM topics
  GROUP BY user_id, created_at;


 user_id |       created_at        | topics_count
---------+-------------------------+--------------
      40 | 2018-12-05 18:40:05.603 |            1
      67 | 2018-12-06 05:23:40.65  |            1





---




SELECT user_id, EXTRACT(day from created_at) AS day, COUNT(*) AS topics_count
FROM topics
GROUP BY user_id, day
ORDER BY user_id;


user_id | day | topics_count
--------+-----+--------------
      1 |   5 |            1
      1 |   6 |            1
      4 |   6 |            1
      6 |   5 |            1
      7 |   6 |            2
      8 |   5 |            1
      9 |   6 |            1





---




SELECT user_id, MAX(created_at), COUNT(*) AS topics_count
FROM topics
GROUP BY user_id;

user_id |           max           | topics_count
--------+-------------------------+--------------
     40 | 2018-12-05 18:40:05.603 |            1
     67 | 2018-12-06 05:23:40.65  |            1
     49 | 2018-12-06 14:55:08.99  |            1
     43 | 2018-12-06 00:20:11.835 |            1







---




SELECT user_id, COUNT(*) FROM topics
  GROUP BY user_id
  HAVING COUNT(*) > 1;

 user_id | count
---------+-------
      84 |     3
      97 |     2
      57 |     2
      30 |     2
      83 |     2
       7 |     2
      38 |     2
       1 |     2
(8 rows)





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

joins
-----



SELECT * FROM topics WHERE user_id = 3;



---




SELECT DISTINCT user_id FROM topics;



---


SELECT * FROM users
  WHERE id NOT IN(<список идентификаторов, полученный предыдущим запросом>);




---




SELECT first_name, title
  FROM users JOIN topics ON users.id = topics.user_id LIMIT 5;

 first_name |            title
------------+------------------------------
 Sean       | beatae voluptatem commodi
 Wyatt      | tempora accusamus nostrum
 Oleta      | eaque fugiat consequatur
 Brandon    | aut exercitationem expedita
 Domenica   | voluptatem soluta similique




---




SELECT * FROM table1 JOIN table2 ON table1.id_field_name = table2.id_field_name

JOIN — это сокращенная версия соединения INNER JOIN, то есть внутреннего соединения.



---




SELECT id FROM users 
JOIN topics ON users.id = topics.user_id LIMIT 5;




---




SELECT users.id AS user_id, topics.id AS topic_id
  FROM users JOIN topics ON users.id = topics.user_id LIMIT 5;

 user_id | topic_id
---------+----------
       9 |        1
      33 |        2
      43 |        3
      49 |        4
      10 |        5
(5 rows)




---





SELECT first_name, title FROM users
  LEFT JOIN topics ON users.id = topics.user_id LIMIT 5;

first_name |            title
------------+------------------------------
 Sean       | beatae voluptatem commodi
 Wyatt      | tempora accusamus nostrum
 Mia        |
 Royal      |
 Enos       | et eos dicta





---




SELECT COUNT(*)
  FROM users
  LEFT JOIN topics ON users.id = topics.user_id
  WHERE title IS NULL;

 count
-------
    59
(1 row)





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

transactions
------------



id  user_id   amount
----------------------
1   10        100
2   30        100


---


SELECT amount FROM accounts WHERE user_id = 10;



---


UPDATE accounts SET amount = amount - 50 WHERE user_id = 10;



---


UPDATE accounts SET amount = amount + 50 WHERE user_id = 30;



---


id  user_id   amount
---------------------
1   10        50
2   30        150



---


id  user_id   amount
-----------------------
1   10        50
2   30        100




---




BEGIN;
SELECT amount FROM accounts WHERE user_id = 10;
UPDATE accounts SET amount = amount - 50 WHERE user_id = 10;
UPDATE accounts SET amount = amount + 50 WHERE user_id = 30;
COMMIT;




---




BEGIN — открытие транзакции
COMMIT — закрытие транзакции




---




BEGIN;
UPDATE accounts SET amount = amount - 50 WHERE user_id = 10;
ROLLBACK;




---




ACID
----


Atomicity     (Атомарность)
Consistency   (Согласованность)
Isolation     (Изолированность)
Durability    (Устойчивость)





----------------------------------------------------------------------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------------------------------------------------------------------

productivity
------------



EXPLAIN SELECT * FROM users
  JOIN topics ON users.id = topics.user_id
  WHERE users.created_at > '10.10.2018';

                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 Hash Join  (cost=10.66..23.59 rows=42 width=2377)
   Hash Cond: (topics.user_id = users.id)
   ->  Seq Scan on topics  (cost=0.00..11.30 rows=130 width=572)
   ->  Hash  (cost=10.50..10.50 rows=13 width=1805)
         ->  Seq Scan on users  (cost=0.00..10.50 rows=13 width=1805)
               Filter: (created_at > '2018-10-10 00:00:00'::timestamp without time zone)
(6 rows)




---




CREATE INDEX ON users(birthday);




---




SELECT * from users WHERE birthday = '2000-01-01';





----------------------------------------------------------------------------------------------------------------------------------------------------------------------























































































