--------------------
JAVASCRITP EXERCISES
--------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

basic exercises
---------------


bind.js
-------

export default (context, fn) => (...args) => fn.apply(context, args);





---





capitalize.js
-------------

const capitalize = (word) => {
  return word.slice(0, 1).toUpperCase() + word.slice(1, word.length);
};

console.log(capitalize('wikipedia'))





---





cart.js
-------

export default class Cart {
  constructor() {
    this.items = [];
  }

  addItem(item, count) {
    const items = this.getItems();
    items.push({ item, count });
  }

  getItems() {
    return this.items;
  }

  getCount() {
    return _.sumBy(this.getItems(), (goods) => goods.count);
  }

  getCost() {
    return _.sumBy(this.getItems(), (goods) => goods.item.price * goods.count);
  }
}





---




ceil.js
-------

const number = 923.2238;

console.log(Math.ceil(923.2238));





---




chainOfEvents.js
------------------

function bodyEvent () {
  window.alert('onclick for Document');
}

function pEvent () {
  window.alert('onclick for Paragraph');
}

function spanEvent () {
  window.alert('onclick for Span');
}





---




class.js
--------

class Human {
  constructor(year, hname) {
    this.year = year;
    this.hname = hname;
  }

  scream () {
    return this;
  }

  static listen () {
    return this;
  }

  static displayName = "man"
}

let Den = new Human(1980, "Den")

console.log(Den);
console.log(Human.displayName);


let obj = new Human();
obj.scream();
let scream = obj.scream();





---




collection.js
-------------

export default (objects, callback) => objects.forEach((object) => callback.call(object));





---




consoleLog.js
----------

console.log('Robert')
console.log('Stannis')
console.log('Renly')





---




convert.js
----------

const eurosCount = 100;

const dollarsCount = eurosCount * 1.25;
const ruCount = dollarsCount * 60;

console.log(dollarsCount);
console.log(ruCount);





---




convertText.js
---------------

const convertText = (text) => {
  if (text === '') {
    return '';
  }

  const reversable = text[0] !== text[0].toUpperCase();
  return reversable ? reverse(text) : text;
};

console.log(convertText('Hello'));





---




countChars.js
-------------

const countChars = (str, char) => {
  let i = 0;
  let count = 0;
  while (i < str.length) {
    if (str[i].toLowerCase() === char.toLowerCase()) {
      count = count + 1;
    }
    i = i + 1;
  }

  return count;
};





---




customObjects.js
-----------------

var Human = {
  firstName: "John",
  lastName: "Doe",
  getFullName: function () {
    var fname = this.firstName + ' ' + this.lastName;
    return fname;
  }
}

console.log(Human)
console.log(Human.firstName)
console.log(Human.lastName)
console.log(Human.getFullName())





---




date.js
-------

var date = new Date();

console.log(date.toString());
console.log(date.valueOf());
console.log(date.getDate());
console.log(date.getDay());
console.log(date.getMonth());
console.log(date.getFullYear());
console.log(date.getHours());
console.log(date.getMilliseconds());
console.log(date.valueOf().toString() + date.getMilliseconds().toString());
console.log(date.getTime());




---




date_2.js
---------

const date = new Date();



console.log('const date = new Date();\n')

console.log('date.toString()');
console.log(date.toString());

console.log('date.valueOf()');
console.log(date.valueOf());

console.log('date.getDate()');
console.log(date.getDate());

console.log('date.getDay()');
console.log(date.getDay());

console.log('date.getMonth()');
console.log(date.getMonth());

console.log('date.getFullYear()');
console.log(date.getFullYear());

console.log('date.getHours()');
console.log(date.getHours());

console.log('date.getMinutes()');
console.log(date.getMinutes());

console.log('date.getMilliseconds()');
console.log(date.getMilliseconds());

console.log('date.valueOf().toString() + date.getMilliseconds().toString()');
console.log(date.valueOf().toString() + date.getMilliseconds().toString());

console.log('date.getTime()');
console.log(date.getTime());

console.log('date.getTime().toMinutes()');
console.log(toMinutes(date.getTime()));





---




elementary.js
-------------

let a;
let b;
let c;
console.log(a = 3 ** 5);
console.log(b = -8 / -4);
console.log(c = 100 % 3);
console.log(a + b + c);





---




encrypt.js
----------

const encrypt = (str) => {
  let result = '';
  for (let i = 0; i < str.length; i += 2) {
    const nextSymbol = str[i + 1] || '';
    result = `${result}${nextSymbol}${str[i]}`;
  }

  return result;
};





---




expression.js
-------------

const text = 'Never forget what you are, for surely the world will not';

const letters = `First: ${text[0]}\nLast: ${text.at(-1)}`
console.log(letters)





---




factorial.js
------------

const factorial = (number) => {
  if (number === 0) {
    return 1;
  } else {
    return number * factorial(number - 1);
  }
}

const answer = factorial(3);





---




fibonacci.js
------------

const fibonacci1 = (num) => {
  let num1 = 0;
  let num2 = 1;
  let sum;
  let i = 0;

  for (i = 0; i < num; i++) {
    sum  = num1 + num2;
    num1 = num2;
    num2 = sum;
  }
  return num2;
}

console.log('fibonacci1');
console.log(fibonacci1(0));
console.log(fibonacci1(1));
console.log(fibonacci1(2));
console.log(fibonacci1(3));
console.log(fibonacci1(4));
console.log(fibonacci1(5));
console.log(fibonacci1(10));





const fibonacci2 = (num) => {
  if (num == 1) return 0;
  if (num == 2) return 1;

  let num1 = 0;
  let num2 = 1;
  let sum;
  let i = 2;

  while (i < num) {
    sum = num1 + num2;
    num1 = num2;
    num2 = sum;
    i += 1;
  }
  return num2;
}

console.log('fibonacci2');
console.log(fibonacci2(0));
console.log(fibonacci2(1));
console.log(fibonacci2(2));
console.log(fibonacci2(3));
console.log(fibonacci2(4));
console.log(fibonacci2(5));
console.log(fibonacci2(10));






const fibonacci3 = (num) => {
  if (num == 0) return 0;
  if (num == 1) return 1;

  return fibonacci3(num - 1) + fibonacci3(num - 2);
}

console.log('fibonacci3');
console.log(fibonacci3(0));
console.log(fibonacci3(1));
console.log(fibonacci3(2));
console.log(fibonacci3(3));
console.log(fibonacci3(4));
console.log(fibonacci3(5));
console.log(fibonacci3(10));





const fibonacci4 = number => {
  let num1 = 0, num2 = 1, result = number;
  
  for(let i = 2; i <= number; i++) {
    result = num1 + num2;
    num1 = num2;
    num2 = result;
  }
  
  return result;
};

console.log('fibonacci4');
console.log(fibonacci4(0));
console.log(fibonacci4(1));
console.log(fibonacci4(2));
console.log(fibonacci4(3));
console.log(fibonacci4(4));
console.log(fibonacci4(5));
console.log(fibonacci4(10));





const fibonacci5 = (n) => {
  if (n <= 1) return n;

  const result = [0, 1];

  for (let i = 2; i <= n; i++) {
    result[i] = result[i - 2] + result[i - 1];
  }

  return result[result.length - 1];
}

console.log('fibonacci5');
console.log(fibonacci5(0));
console.log(fibonacci5(1));
console.log(fibonacci5(2));
console.log(fibonacci5(3));
console.log(fibonacci5(4));
console.log(fibonacci5(5));
console.log(fibonacci5(10));




---




fizzBuzz.js
-----------

const fizzBuzz = (start, end) => {
  const result = [];
  const list = Array.from({length: end - start + 1}, (_, a) => a + start);
  console.log(list);

  if (start <= end) {
    for (const number of list) {
      if (number % 3 === 0 && number % 5 === 0) {
        result.push("FizzBuzz");
      } else if (number % 3 === 0) {
        result.push("Fizz");
      } else if (number % 5 === 0) {
        result.push("Buzz");
      } else {
        result.push(number);
      }
    }
    console.log(result.join('\n'));
  } else {
    false
  }
};


console.log('1 - 30')
fizzBuzz(1, 30);
console.log('41 - 60')
fizzBuzz(41, 60);
console.log('77 - 97')
fizzBuzz(77, 97);
console.log('45 - 45')
fizzBuzz(45, 45);
console.log('35 - 25')
fizzBuzz(35, 25);
console.log('35')
fizzBuzz(35);




---




formattedTime.js
----------------

const formattedTime = (num) => {

}


console.log(formattedTime(5));
console.log(formattedTime(15));
console.log(formattedTime(60));
console.log(formattedTime(67));
console.log(formattedTime(130));
console.log(formattedTime(175));
console.log(formattedTime(549));
console.log(formattedTime(600));
console.log(formattedTime(754));
console.log(formattedTime(1293));
console.log(formattedTime(1440));
console.log(formattedTime(1504));
console.log(formattedTime(2881));




---




function.js
-----------

const printMotto = () => {

  console.log('Winter is coming')
}

printMotto()





---




functionArguments.js
---------------------

function SumArgs () {
  var r = 0;
  for (var i = 0; i < arguments.length; i++) {
    r += arguments[i];
    return r;
  }
}

console.log(SumArgs(1, 2, 93));





---




getHiddenCard.js
----------------

const getHiddenCard = (cardNumber, starsCount = 4) => {
  const visibleDigitsLine = cardNumber.slice(12);
  return `${'*'.repeat(starsCount)}${visibleDigitsLine}`;
};

console.log(getHiddenCard('235467857654'))





---




getLetter.js
------------

const getLetter = (text, position) => text[position - 1] || '';

let name = 'Hexlet'
console.log(getLetter(name, 3));





---




getMutualFriends.js
-------------------

export const getMutualFriends = (user1, user2) => {
  const friends1 = user1.getFriends();
  const friends2 = user2.getFriends();
  const friends2Ids = friends2.map(({ id }) => id);
  return friends1.filter(({ id }) => friends2Ids.includes(id));
};





---




getNumberExplanation.js
-----------------------

const getNumberExplanation = (number) => {
  switch (number) {
    case 666:
      return 'devil number';
    case 7:
      return 'prime number';
    case 42:
      return 'answer for everything';
    default:
      return null;
  }
};





---




getRational.js
--------------

const make = (numer, denom) => ({
  numer,
  denom,
  setNumer(newNumer) {
    this.numer = newNumer;
  },
  setDenom(newDenom) {
    this.denom = newDenom;
  },
  getNumer() {
    return this.numer;
  },
  getDenom() {
    return this.denom;
  },
  toString() {
    return `${this.getNumer()}/${this.getDenom()}`;
  },
  add(rational) {
    const newNumer = this.getNumer() * rational.getDenom() + rational.getNumer() * this.getDenom();
    const newDenom = this.getDenom() * rational.getDenom();
    return make(newNumer, newDenom);
  },
});

export default make;





---




getTriangleArea.js
------------------

export const getTrianglePerimeter = (a, b, c) => a + b + c;

export const getTriangleArea = (h, b) => {
  const area = (h * b) / 2;
  return area;
};


import square from './square.js';

import { getTriangleArea } from './myMathModule.js';

const solution = (n) => getTriangleArea(n, square(n) / 2);

export default solution;





---




grade.js
--------

function finalGrade(exam, projects) {
  if (exam > 90 || projects > 10) {
    return 100
  } else if (exam > 75 && projects >= 5) {
    return 90
  } else if (exam > 50 && projects >= 2) {
    return 75
  } else {
    return 0
  }
};




---




hasfStrung.js
-------------

const getHalfString = (str) => {
  let result = '';
  for (let i = 0; i < str.length / 2; i += 1) {
    result += str[i];
  }
  return result;
};





---




happyTicket.js
--------------

const isHappyTicket = (num) => {
  let nums = num.split('');
  nums = nums.map((element)=> parseInt(element));

  const numsHalf  = Math.ceil(nums.length / 2);

  const elementsSum = (numbers) => {
    let sum = 0;

    for (const number of numbers) {
      sum += number;
    }
    return sum;
  };

  const startNums = nums.splice(0, numsHalf);
  let start = elementsSum(startNums);

  const endNums   = nums.splice(-numsHalf);
  let end = elementsSum(endNums);

  return start === end
};



console.log(isHappyTicket('385916')); // true
console.log(isHappyTicket('231002')); // false
console.log(isHappyTicket('1222'));   // false
console.log(isHappyTicket('054702')); // true
console.log(isHappyTicket('00'));     // true




---




internationalPhone.js
---------------------

const isInternationalPhone = (num) => {
  return num.toString()[0] === '+';
};

console.log(isInternationalPhone('+79602223423'));




---




invertCase.js
-------------

const invertCase = (string) => {
  const letters = string.split('');
  const result = [];

  const isLowerCase = (letter) => { return letter === letter.toLowerCase() };
  const isUpperCase = (letter) => { return letter === letter.toUpperCase() };

  for (let letter of letters) {
    if (isLowerCase(letter)) {
      result.push(letter.toUpperCase())
    } else if (isUpperCase(letter)) {
      result.push(letter.toLowerCase())
    } else {
      result.push(letter)
    }
  };

  return result.join('');
};


console.log(invertCase('Hello, World!'));
console.log(invertCase('I loVe JS'));




---




isHappyNumber.js
----------------

const sumOfSquareDigits = (num) => {
  const numAsStr = String(num);
  let sum = 0;

  for (let i = 0; i < numAsStr.length; i += 1) {
    const digit = Number(numAsStr[i]);
    sum += digit * digit;
  }

  return sum;
};



const isHappyNumber = (number) => {
  const result = [];

  for (let i = 0; i < 10; i++) {
    result.push(sumOfSquareDigits(number^2));
    console.log(result);
  }
  
}



console.log(isHappyNumber(1));
console.log(isHappyNumber(7));
console.log(isHappyNumber(13));
console.log(isHappyNumber(0));
console.log(isHappyNumber(2));
console.log(isHappyNumber(90));


// 7   => 7^2 = 49,
// 49  => 4^2 + 9^2 = 16 + 81 = 97,
// 97  => 9^2 + 7^2 = 81 + 49 = 130,
// 130 => 1^2 + 3^2 + 0^2 = 10,
// 10  => 1^2 + 0^2 = 1.






---




isLeapYear.js
-------------

const isLeapYear = (year) => {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
};

console.log(isLeapYear(2016)); 





---




isPerfect.js
------------

const isPerfect = (number) => {
  let result;
  let sum = 0;
  const list = [];

  if (number > 0) {
    for (let i = 1; i < number; i++) {
      result = number / i;
      if (Number.isInteger(result)) list.push(i);
    }
  }

  for (const index in list) {
    sum += list[index];
  }

  return number > 0 && number === sum;
}



console.log('Should be true')
console.log(isPerfect(6));
console.log(isPerfect(28));
console.log(isPerfect(496));
console.log(isPerfect(8128));


console.log('Should be false')
console.log(isPerfect(-6));
console.log(isPerfect(-28));
console.log(isPerfect(44));
console.log(isPerfect(0));
console.log(isPerfect(10));





---




isPrime.js
----------

const isPrime = (number) => {
  if (number < 2) { return false };

  for (let i = 2; i <= number / 2; i += 1) {
    if (number % i === 0) { return false };
  }

  return true;
};


console.log(isPrime(1));
console.log(isPrime(7));
console.log(isPrime(10));





---




iterativeProcess.js
-------------------

const factorial = (n) => {
  if (n === 0) { return 1 };

  const iter = (counter, acc) => {
    if (counter === 1) { return acc };
    return iter(counter - 1, counter * acc);
  };

  return iter(n, 1);
};





---




joinNumberFromRange.js
----------------------

const joinNumbersFromRange = (start, finish) => {
  let i = start;
  let result = '';

  while (i <= finish) {
    result = `${result}${i}`;
    i = i + 1;
  }

  return result;
};





---




json.js
-------

export const parseJson = (json) => {
  try {
    return JSON.parse(json);
  } catch (e) {
    throw new ParseError('Invalid JSON string');
  }
};





---




lessGreaterEqual.js
-------------------

import { length, toUpperCase } from './strings.js';

const bigLettersCount = (str) => {
  let result = 0;

  for (let i = 0; i < length(str); i += 1) {
    if (toUpperCase(str[i]) === str[i]) {
      result += 1;
    }
  }

  return result;
};


const compare = (first, second) => {
  const firstCount = bigLettersCount(first);
  const secondCount = bigLettersCount(second);

  if (firstCount > secondCount) {
    return 1;
  }
  if (firstCount < secondCount) {
    return -1;
  }

  return 0;
};

export const greaterThan = (first, second) => (
  compare(first, second) === 1);

export const lessThan = (first, second) => (
  compare(first, second) === -1);

export const isEqual = (first, second) => (
  compare(first, second) === 0);




  ---




letters.js
----------

const text = 'Never forget what you are, for surely the world will not';

const letters = `First: ${text[0]}\nLast: ${text.at(-1)}`
console.log(letters)





---




logic.js
--------

const getLetter = (text, position) => text[position - 1] || '';

console.log(getLetter('Some', 3));





---




magic.js
--------

const f = (...numbers) => {
  const sum = numbers.reduce((acc, x) => (x + acc), 0);
  const inner = (...rest) => f(sum, ...rest);
  inner.valueOf = () => sum;
  return inner;
};





---




makeFunny.js
------------

const makeItFunny = (str, n) => {
  let i = 0;
  let result = '';
  while (i < str.length) {
    const current = str[i];
    if ((i + 1) % n === 0) {
      result = `${result}${current.toUpperCase()}`;
    } else {
      result = `${result}${current}`;
    }
    i++;
  }

  return result;
};





---




mathAbs.js
----------

const soldiersCount = -2309;

console.log(Math.abs(soldiersCount))





---




mathCeil.js
-----------

const number = 923.2238;

console.log(Math.ceil(923.2238));





---




mathMin.js
----------

console.log(Math.min(3,10,22,-3,0))





---




mathRandom.js
-------------

console.log(Math.ceil(Math.random() * 10))





---




money.js
--------

const rates = {
  usd: {
    eur: 0.7,
  },
  eur: {
    usd: 1.2,
  },
};

export default function Money(value, currency = 'usd') {
  this.value = value;
  this.currency = currency;
}

Money.prototype.format = function format() {
  // bad design (pass undefined to the function), but it is js
  return this.getValue().toLocaleString(undefined, { style: 'currency', currency: this.getCurrency() });
};

Money.prototype.getValue = function getValue() {
  return this.value;
};

Money.prototype.getCurrency = function getCurrency() {
  return this.currency;
};

Money.prototype.exchangeTo = function exchangeTo(newCurrency) {
  const currency = this.getCurrency();
  const currentValue = this.getValue();
  if (currency === newCurrency) {
    return new Money(currentValue, currency);
  }
  const newValue = currentValue * rates[currency][newCurrency];
  return new Money(newValue, newCurrency);
};

Money.prototype.add = function add(money) {
  const currency = this.getCurrency();
  const convertedMoney = money.exchangeTo(currency);
  const additionalValue = convertedMoney.getValue();
  return new Money(this.getValue() + additionalValue, currency);
};





---




naming.js
---------

const king = 'King Balon the 6th';

const newHouse = 6
const rooms = 17

console.log(king + ' has ' + (newHouse * rooms) + ' rooms.')





---




normalizeUrl.js
-------------

const normalizeUrl = (url) => {
  if (url.startsWith('https://')) {
    return url;
  } else if (!url.startsWith('https://')) {
    return 'https://' + url;
  };
};

console.log(normalizeUrl('google.com'))





---




normalizeUrl.js
---------------

const normalizeUrl = (url) => {
  if (url.startsWith('https://')) {
    return url;
  } else if (!url.startsWith('https://')) {
    return 'https://' + url;
  };
};

console.log(normalizeUrl("google.com"));
console.log(normalizeUrl("https://ai.fi"));





---




onload.js
---------

function greeting (name) {
  name = 'John'
  document.write("<h1>HEY </h1>" + `<h2>${name}</h2>`);
  console.log('hey ' + name);
  window.alert('hey ' + name);
}





---




open.js
-------

function newOpen () {
  var options = "status = no, toolbar = no";
  return window.open("https://youtube.com", "youtube", options)
};




---




oopCircleArea.js
----------------

class Circle {
  constructor(radius) {
    this.radius = radius;
  }

  getArea() {
    return Math.PI * this.radius * this.radius;
  }

  getCircumference() {
    return Math.PI * 2 * this.radius;
  }
}


const circle_1 = new Circle(1);
const circle_2 = new Circle(3);
const circle_3 = new Circle(11);

console.log(circle_1.getArea());
console.log(circle_2.getArea());
console.log(circle_3.getArea());

console.log(circle_1.getCircumference());
console.log(circle_2.getCircumference());
console.log(circle_3.getCircumference());





---




point.js
--------

function getX() {
  return this.x;
}

function getY() {
  return this.y;
}

export default function Point(x, y) {
  this.x = x;
  this.y = y;
  this.getX = getX;
  this.getY = getY;
}




function getBeginPoint() {
  return this.beginPoint;
}

function getEndPoint() {
  return this.endPoint;
}

export default function Segment(beginPoint, endPoint) {
  this.beginPoint = beginPoint;
  this.endPoint = endPoint;
  this.getBeginPoint = getBeginPoint;
  this.getEndPoint = getEndPoint;
}




export default (segment) => {
  const beginPoint = segment.getBeginPoint();
  const endPoint = segment.getEndPoint();
  const newEndPoint = new Point(beginPoint.getX(), beginPoint.getY());
  const newBeginPoint = new Point(endPoint.getX(), endPoint.getY());

  return new Segment(newBeginPoint, newEndPoint);
};





---




predicate.js
------------

const isInternationalPhone = (num) => {
  return num.toString()[0] === '+'
}

console.log(isInternationalPhone('+79174568787'));





---




predicate_2.js
--------------

const isLeapYear = (year) => {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
};

console.log(isLeapYear(1999))





---




printNumber.js
--------------

const printNumbers = (initialNumber) => {
  let i = initialNumber;
  while (i >= 1) {
    console.log(i);
    i -= 1;
  }
  console.log('finished!');
};





---





random.js
---------

const getRandomNumber = () => {
  return Math.round(Math.random() * 10);
};

console.log(getRandomNumber());





---





randomRound.js
--------------

console.log(Math.round(Math.random() * 10))





---




recursionFactorial.js
------------

function f_Factorial (x) {
  if (x == 0 || x == 1) return 1;
  else return (x + f_Factorial (x - 1));
}

console.log(f_Factorial(7));





---




regexp.js
---------

let reg = new RegExp("abc[de]");
let str = "abc abcd abce abcs"

console.log(str.search(reg));


let reg2 = new RegExp("abc[de]");
let m = [];

m = str.match(reg2);

for (let i = 0, c = m.length; c < 0; i++) {
  console.log(m[i] + " ");
}


var p = new RegExp("abc[de]", "g");

let S = ''
let reg3 = new RegExp("abc[de]", "g");
S.replace(reg, "match");
console.log(S);





---




reverse.js
----------

const reverse = (s) => s.split('').reverse().join('');





---




reverseInt.js
-------------

const reverseInt = (number) => {
  let string = number.toString();
  let charList = string.split('');

  while (charList[charList.length - 1] === '0') {
    charList.pop();
  }

  if (charList[0] === '-') {
    charList.reverse().join('');
    charList.splice(0, -1, '-');
    charList.pop();
  } else {
    charList.reverse().join('');
  }

  return parseInt(charList.join(''));
};

export default reverseInt;


console.log(reverseInt(12));
console.log(reverseInt(-122));
console.log(reverseInt(8900));





---




reverseMethod.js
----------------

import reverse from './reverse';

const convertText = (text) => {
  if (text === '') {
    return '';
  }

  const reversable = text[0] !== text[0].toUpperCase();
  return reversable ? reverse(text) : text;
};

let string = 'string';

console.log(convertText(string));





---




shouldBeBig.js
--------------

export default (str) => {
  let result = '';
  
  for (let i = 0; i < length(str); i += 1) {
    const shouldBeBig = (i === 0 || str[i - 1] === ' ');
    result += shouldBeBig ? toUpperCase(str[i]) : str[i];
  }

  return result;
};




---




smallerDivisor.js
-----------------

const smallestDivisor = (num) => {
  if (num === 1) return 1;

  for (let i = 2; i <= num; i++) {
    let result = num % i;
    if (result === 0) return i;
  }
}



console.log(smallestDivisor(9))
console.log(smallestDivisor(17))
console.log(smallestDivisor(1))






---




smallerDivisor_2.js
-------------------

const smallestDivisor = (num) => {
  if (num === 1) return 1;
  let nan = NaN
  if (num < 1) return nan;

  let i = 1;

  while (i <= num) {
    i++
    let result = num % i;
    if (result === 0) return i;
  }
}



console.log(smallestDivisor(9))
console.log(smallestDivisor(17))
console.log(smallestDivisor(1))
console.log(smallestDivisor(0))




---




squares.js
----------

const square = (num) => num**2
const sumOfSquares = (num1, num2) => square(num1) + square(num2)
const squareSumOfSquares = (num1, num2) => square(sumOfSquares(num1, num2));




---




stringInterpolation.js
----------------------

const stark = 'Arya';

console.log(`Do you want to eat, ${stark}?`)





---




stringWork.js
-------------

const word = 'Na\nharis';

console.log(word[7]);





---




subString.js
------------

const mySubstr = (string, length) => {
  let resultString = '';
  let i = 0;
  while (i < length) {
    resultString += string[i];
    i += 1;
  }

  return resultString;
};





---




switch.js
---------

const getNumberExplanation = (number) => {
  switch (number) {
    case 666:
      return 'devil number';
    case 7:
      return 'prime number';
    case 42:
      return 'answer for everything';
    default:
      return null;
  }
};

console.log(getNumberExplanation(666));
console.log(getNumberExplanation(7));
console.log(getNumberExplanation(42));





---




sumOfSquareDigits.js
--------------------

const sumOfSquareDigits = (num) => {
  const numAsStr = String(num);
  let sum = 0;
  
  for (let i = 0; i < numAsStr.length; i += 1) {
    const digit = Number(numAsStr[i]);
    sum += digit * digit;
  }

  return sum;
};




---




surfaceArea.js
--------------

const surfaceAreaCalculator = (radius) => {
  return 4 * 3.14 * square(radius);
}

const square = (num) => {
  return num * num;
};




---




switch.js
---------

const getNumberExplanation = (number) => {
  switch (number) {
    case 666:
      return 'devil number';
    case 7:
      return 'prime number';
    case 42:
      return 'answer for everything';
    default:
      return null;
  }
};



console.log(getNumberExplanation(666));
console.log(getNumberExplanation(7));
console.log(getNumberExplanation(42));





---




switch_2.js
-----------

let answer;

if (num === 1) {
  answer = "One";
} else if (num === 2) {
  answer = "Two";
} else {
  answer = "Nothing";
}



switch(num) {
  case 1: 
    answer = "One";
    break;

  case 2:
    answer = "Two";
    break;

  default:
    answer = "Nothing";
    break;
}





time.js
-------

export default class Time {
  static fromString(time) {
    const [hours, minutes] = time.split(':');
    return new Time(hours, minutes);
  }

  constructor(hours, minutes) {
    this.minutes = minutes;
    this.hours = hours;
  }

  toString() {
    return `${this.hours}:${this.minutes}`;
  }
}






---




timeCover.js
------------

const timeConvert = (num) => {
  let number        = num;
  let hours         = (number / 60);
  let returnHours   = Math.floor(hours);
  let minutes       = (hours - returnHours) * 60;
  let returnMinutes = Math.round(minutes);

  return `${number} minutes = ${returnHours} hour(s) ${returnMinutes} minute(s)`;
}


console.log(timeConvert(200));
console.log(timeConvert(457));




---




toString.js
-----------

export default function Point(x, y) {
  this.x = x;
  this.y = y;
}

Point.prototype.getX = function getX() {
  return this.x;
};

Point.prototype.getY = function getY() {
  return this.y;
};

Point.prototype.toString = function toString() {
  return `(${this.getX()}, ${this.getY()})`;
};





export default function Segment(beginPoint, endPoint) {
  this.beginPoint = beginPoint;
  this.endPoint = endPoint;
}

Segment.prototype.getBeginPoint = function getBeginPoint() {
  return this.beginPoint;
};

Segment.prototype.getEndPoint = function getEndPoint() {
  return this.endPoint;
};

Segment.prototype.toString = function toString() {
  return `[${this.getBeginPoint()}, ${this.getEndPoint()}]`;
};





---




trim.js
-------

let firstName = '  Grigor   \n';

console.log(firstName.trim())





---




truncate.js
-----------

const truncate = (text, length) => {
  const result = `${text.slice(0, length)}...`;
  return result;
};

console.log(truncate('hello', 4))





---




typeOff.js
----------

const motto = 'Family, Duty, Honor';

console.log(typeof motto);





---




typization.js
-------------

const sumDigits = (num) => {
  const str = String(num);
  let result = 0;

  for (let i = 0; i < length(str); i += 1) {
    result += Number(str[i]);
  }
  return result;
};


const addDigits = (num) => {
  let result = num;

  while (result >= 10) {
    result = sumDigits(result);
  }
  return result;
};

export default addDigits;




---




windowObject.js
---------------

if (window.confirm("Push OK or CANCEL")) {
  console.log("You pushed OK");
} else {
  console.log("You pushed CANCEL");
}

window.alert('hey')

var UNname = window.prompt("What is your name?", "NoName");

if (UNname == null) {
  alert("Bye!");
} else {
  document.write("Hey " + UNname);
}




---




isHappyNumber.js
----------------

const sumOfSquareDigits = (num) => {
  const numAsStr = String(num);
  let sum = 0;
  for (let i = 0; i < numAsStr.length; i += 1) {
    const digit = Number(numAsStr[i]);
    sum += digit * digit;
  }

  return sum;
};

const isHappyNumber = (num) => {
  const seen = new Set();
  while (num != 1 && !seen.has(num)) {
    seen.add(num);
    num = sumOfSquareDigits(num);
  }
  return num == 1;
}

export default isHappyNumber;




---




dnaToRna.js
-----------

const dnaToRna = (dna) => {
  let arrayedRNA = ""
  for (let i = 0; i < dna.length; i++) {
    if (dna[i] == "G") {
      arrayedRNA += "C"
    } else if (dna[i] == "C") {
      arrayedRNA += "G"
    } else if (dna[i] == "T") {
      arrayedRNA += "A"
    } else if (dna[i] == "A") {
      arrayedRNA += "U"
    }
  }
  return arrayedRNA
}

export default dnaToRna;




---




sumSquareDifference.js
----------------------

function sumSquareDifference(n) {
  const sumOfN = (n * (n + 1)) / 2;
  const sumOfNSquare = (n * (n + 1) * (2 * n + 1)) / 6;

  return (sumOfN ** 2) - sumOfNSquare;
}

export default sumSquareDifference;




---




isPowerOfThree.js
-----------------

const isPowerOfThree = (num) => {
  return (Math.log10(num) / Math.log10(3)) % 1 == 0;
}

export default isPowerOfThree;







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----
test
----


import factorial from '../src';

test('factorial', () => {
  expect(factorial(5)).toBe(120);
  expect(factorial(1)).toBe(1);
  expect(factorial(0)).toBe(1);
  expect(factorial(-1)).toBe(NaN);
});









--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------































































