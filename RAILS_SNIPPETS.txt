---------------------------------------
Useful snippents for Rails app building
---------------------------------------











--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add credentials for google_map app cmd
--------------------------------------


$ rails credentials:edit --environment=development



---



Your Yarn packages are out of date
----------------------------------


$ yarn install --check-files



---



Using javascript in rails controller example
--------------------------------------------


class CommentsController < ApplicationController
  def create
    @comment = Comment.new comment_params
    @comment.account_id = current_account.id

    respond_to do |format|
      format.js {
        if @comment.save
          @comments = Comment.where(post_id: @comment.post_id)
          render 'comments/create'
        else
          # unable to save
        end
      }
    end
  end

  def comment_params
    params.require(:comment).permit(:message, :post_id)
  end
end


file.js.erb
-----------

document.getElementById('post-comments').innerHTML = "<%= escape_javascript(render partial: 'posts/comments', locals: { comments: @comments }) %>";



---



Date time format helper example
-------------------------------


<%= @profile.created_at.strftime('%d/%m/%Y') %>



---



Truncate helper example
-----------------------


<%= truncate post.body, length: 200 %>



---



Time ago in words helper example
--------------------------------


<%= time_ago_in_words post.created_at %>



---



Pluralize helper example
------------------------


<p><%= pluralize @subscriber_count %></p>



---



Date helper for rails app with created_at example
-------------------------------------------------


<%= @match.created_at.strftime("%d/%m/%Y") %>



---



Rails js.erb view file snippet example
--------------------------------------


alert('message has been saved');
$("#initiate-conversation").hide();
$("#conversation_messages").html("<%= escape_javascript(render partial: 'browse/messages') %>");



---



Rails ActiveStorage
-------------------


---1---

$ rails active_storage:install



---2---

$ rails db:migrate


config.active_storage.service = :local


local:
  service: Disk
  root: <%= Rails.root.join("storage") %>



---



Snippet for sign out (for routes.rb)
------------------------------------


devise_scope :user do
  get '/users/sign_out' => 'devise/sessions#destroy'
end



---



Required params snippet (with devise)
-------------------------------------


class ApplicationController < ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected
  
  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])
  end
end



---



Usefull sqlite3 helpfull cmd
----------------------------


pragma table_info(technologies);



---




Restart page with get request syntax example
--------------------------------------------


resource :contacts, only: [:new, :create], path_names: { :new => '' }




---




Rails console cmd for checking entity attributes
------------------------------------------------


Contact.attribute_names



---



Hello Rails
-----------


$ rails new MySite
$ bundle install
$ rails server



---



Rails controller
----------------


---1---

$ rails generate controller Pages 



---2---

app/controllers/pages_controller.rb
-----------------------------------

def home
end



class PagesController < ApplicationController
  def home
  end
end



---



Pluralize helper example
------------------------

<%= pluralize @subscriber_count %>



---



Simple format helper example
----------------------------

<%= simple_format @community.rules %>



---



Time ago in words helper example
--------------------------------

<%= time_ago_in_words post.created_at %>



---



Datetime helpers for footer
---------------------------

<small class="text-muted">&copy; Online Store
  <%= Date.today.year %>
</small>

<%= account.created_at > 2.days.ago ? 'New to instagramm' : "Followed by #{account.total_followers} users" %>



---



Truncate helper example
-----------------------

<%= truncate post.body, length: 200 %>



---



Date time format helper example
-------------------------------

<%= @profile.created_at.strftime('%d/%m/%Y') %>



---



Rails options snippets
----------------------

<%= form.label :category %>
<%= form.select(:category_id, options_from_collection_for_select(Category.all, :id, :heading, (@product.category.id if @product.category.present?)), {}, {class: 'form-control'}) %>



---



Customize rails option
----------------------

<%= f.collection_check_boxes :venue_ids, Venue.all, :id, :name, checked: Venue.all.map(&:id) do |b| %>
  <span>
    <%= b.check_box %>
    <%= b.label %>
  </span>
<% end %>



---



Blank link in app
-----------------

<%= link_to "#{@account.website}", "https://#{@account.website}", target: :_blank if @account.website.present? %>
<%= link_to "path_title", "https://path", target: :_blank if path_title.present? %>



---



Check output info snippet
-------------------------


some_controller.rb
------------------

render plain: params[:technology].inspect



---



Rails console cmd for checking entity attributes
------------------------------------------------

$ rails c

Contact.attribute_names



---



Restart page with get request syntax example
--------------------------------------------


routes.rb
---------

resource :contacts, only: [:new, :create], path_names: { :new => '' }



---



Link for sign out with helpers
------------------------------

<%= link_to 'Delete', technology_path(technology), method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-primary btn-sm' %>



---



Usefull sqlite3 helpfull cmd
----------------------------

$ rails c

> pragma table_info(technologies);



---



Form with collection example
----------------------------

<%= form_for ([@technology, @technology.lessons.build]) do |f| %>
  <%= f.text_field ... %>
<% end %>



---



Index migration example
-----------------------

add_index :users, :username, unique: true



---



Helpfull snippet
----------------

value: current_user.try(:username)



---



DRY snippet example for controllers
-----------------------------------

Class ApplicationController < ActionController::Base
  before_action :set_categories

  private

  def set_categories
    @categories = Category.all
  end
end



---



Rails js.erb view file snippet example
--------------------------------------


_some_template.js.erb
---------------------

alert('message has been saved');

$("#initiate-conversation").hide();
$("#conversation_messages").html("<%= escape_javascript(render partial: 'browse/messages') %>");



---



The way to turn off CSRF that won't render a null session
---------------------------------------------------------

class ApplicationController < ActionController::Base
  skip_before_action :verify_authenticity_token
end



---



Rendering the new action
------------------------

redirect_to :action => 'new'



---



Redirecting / Rendering a different page when Javascript is disabled
--------------------------------------------------------------------


your.html.erb file
------------------

<%= link_to "New Building", new_building_path, :id => 'new_building_link' %>


javascript file
---------------

$(document).load(function() {
  $("#new_building_link").click(function() {
    $.ajax({
      type:     "POST",
      url:      "/buildings/add_building",
      dataType: "script"
    });
    return false;
  });
});



---



Combining link_to with render :partial
--------------------------------------

<%= link_to render(:partial => 'shared/logo'), root_url %>



---



Add to controller snippets
--------------------------

def new
  @community = Community.find(params[:community_id])
  @post = Post.new
end

def create
  @post = Post.new(post_params)
  @post.account_id = current_account.id
  @post.community_id = params[:community_id]

  if @post.save
    redirect_to community_path(@post.community_id)
  else
    @community = Community.find(params[:community_id])
    render :new
  end
end



---



def create
  if user_exists?
    @author = current_user.username
    @author.save
  end
end



---



def create
  @comment = @commentable.comments.new comment_params
  @comment.user = current_user
  @comment.save
  redirect_to @commentable, notice: "Your comment was successfully posted."
end



---



def stripe_connect
  auth_data = request.env["omniauth.auth"]
  @user = current_user

  if @user.persisted?
    @user.provider = auth_data.provider
    @user.uid = auth_data.uid
    @user.access_code = auth_data.credentials.token
    @user.publishable_key = auth_data.info.stripe_publishable_key
    @user.save

    sign_in_and_redirect @user, event: :authentication
    flash[:notice] = 'Stripe Account Created And Connected' if is_navigational_format?
  else
    session["devise.stripe_connect_data"] = request.env["omniauth.auth"]
    redirect_to root_path
  end
end



---



@post = Post.includes(:comments).find(params[:id])



---



Subscription.where(community_id: params[:community_id], account_id: current_account.id)



---



def profile
  @profile = Account.find_by_username params[:username]
  @posts = @profile.posts
end


def create
  @order_item = @order.order_items.new(order_params)
  @order.save
  session[:order_id] = @order.id
end

def update
  @order_item = @order.order_items.find(params[:id])
  @order_item.update_attributes(order_params)
  @order_items = current_order.order_items
end



---



def create
  post_id = params[:post_id]

  vote = Vote.new
  vote.post_id = params[:post_id]
  vote.upvote = params[:upvote]
  vote.account_id = current_account.id

  existing_vote  = Vote.where(account_id: current_account.id, post_id: post_id)
  @new_vote = existing_vote.size < 1

  respond_to do |format|
    format.js {
      if existing_vote.size > 0
        existing_vote.first.destroy
      else
        if vote.save
          @success = true
        else
          @success = false
        end
      end

      @post = Post.find(post_id)
      @is_upvote = params[:upvote]
      render 'votes/create'
    }
  end
end



---



def create
  @article = Article.find(params[:atricle_id])
  @article.comments.create(comment_params)

  redirect_to article_path(@article)
end



---



def choose_plan
  plan = params[:plan]

  @subscription = current_account.subscription

  if @subscription.present? && @subscription.update(plan: plan)
    current_account.setup_stripe_subscription
  else
    # plan was updated
  end
end

def edit
  @technologies = Technology.all
  @technology = Technology.find(params[:id])
end



---



def create
  @conversation = Conversation.new(conversation_params)
  @conversation.sender_id = current_account.id
  @conversation.messages.first.account_id = current_account.id

  @messages = @conversation.messages

  match = Match.between(current_account.id, id)
  @match = match.first if match.present?


  if @conversation.save!
    # render partial: "browse/messages"
    # logger.debug 'conversation has been saved'
  else
    # logger.debug 'unable to save conversation!'
  end
end



---



@users = Account.where.not(id: current_account.id)



---



def create
  @article = Article.find(params[:article_id])
  @article.comments.create(comment_params)

  redirect_to article_path(@article)
end



---



def new
  @lesson = Lesson.new(lesson_params)
  @technology = Technology.find(params[:id])
  @ruby = Ruby.find(params[:id])
end

def create
  @lesson = Lesson.new(lesson_params)
  @technology = Technology.find(params[:id])
  @ruby = Ruby.find(params[:id])

  if @lesson.valid?
    @lesson.save

    redirect_to @technology
  else
    render action 'new'
  end
end



---



Add categories options to form
------------------------------

<%= form.label :category, class: 'mb-5' %>
<%= form.select(:category_id, options_from_collection_for_select(Category.all, :id, :heading, (@product.category.id if @product.category.present?)), {}, { class: 'form-control' }) %>



---



Bootstrap outline buttons styles for CRUD Rails app
---------------------------------------------------


edit.html.erb
-------------

<div class="btn-group my-5">
  <%= link_to "Show this user", @user, class: "btn btn-sm btn-outline-dark" %>
  <%= link_to "Back to users", users_path, class: "btn btn-sm btn-outline-dark" %>
</div>



index.html.erb
--------------

<p><%= link_to "Show user", user, class: "btn btn-sm btn-outline-dark my-3" %></p>
<%= link_to "New user", new_user_path, class: "btn btn-sm btn-outline-dark my-5" %>



new.html.erb
------------

<%= link_to "Back to users", users_path, class: "btn btn-sm btn-outline-dark my-5" %>



show.html.erb
-------------

<div class="btn-group my-5">
  <%= link_to "Edit this user", edit_user_path(@user), class: "btn btn-sm btn-outline-dark" %>
  <%= link_to "Back to users", users_path, class: "btn btn-sm btn-outline-dark" %>
  <%= button_to "Destroy this user", @user, method: :delete, class: "btn btn-sm btn-outline-dark" %>
</div>



_form.html.erb
--------------

<%= f.button :submit, class: "btn btn-sm btn-outline-dark" %>



---



Active storage attachment view snippets
---------------------------------------


model.rb
--------

class Book < ApplicationRecord
  has_many_attached :images
end



controller.rb
-------------

def book_params
  params.require(:book).permit(:title, images: [])
end



or
--



def create
  @book = Book.new(book_params)
  @book.attach(params[:images], content_type: 'application/png')

  respond_to do |format|
    if @book.save
      format.html { redirect_to book_url(@book), notice: "Book was successfully created." }
    else
      format.html { render :new, status: :unprocessable_entity }
    end
  end
end



_form.html.erb
--------------

<%= simple_form_for(@book) do |f| %>
  <%= f.error_notification %>
  <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

  <%= f.input :title %>
  <%= f.input :images, input_html: { multiple: true }, class: 'form-control-sm my-3' %>

  <div class="form-actions">
    <%= f.button :submit, class: 'btn btn-sm btn-outline-success mt-3' %>
  </div>
<% end %>



view.html.erb
-------------

<% @book.images.each do |image| %>

  <%= image_tag rails_blob_path(image), width: 200, height: 200 %>

  <%= link_to rails_blob_path(image, disposition: "attachment"), width: 200, height: 200 %>

  <%= image_tag url_for(image), width: 200, height: 200 %>

  <%= image_tag image.variant(resize_to_limit: [400, 400]) %>

  <%= image_tag image.preview(resize_to_limit: [400, 400]) %> # for video

<% end %>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

destructurization
-----------------


data = ['hexlet', 'online courses', topics: ['php', 'js']]
name, description, topics = data

puts name                                                     # "hexlet"
puts description                                              # "online courses"
puts topics                                                   # { topics: ["php", "js"] }




---




data = ['hexlet', 'online courses', ['php', 'js']]

name, description, (first_topic, second_topic) = data         # учли количество элементов
_, _, (first_topic, _) = data                                 # так же все элементы учтены
*, (_, second_topic) = data                                   # пропустили элементы в первом массиве, во вложенном количество учтено
name, description, (first_topic) = data





---





data = ['hexlet', 'online courses', ['php', 'js']]

name, *rest = data
puts rest                                                     # ["online courses", ["php", "js"]]

name, *rest, topic = data
puts rest                                                     # ["online courses"]




---




data = {
  name: 'hexlet',
  description: 'online courses',
  topic: 'programming'
}

name, description = data.values_at(:name, :description)




---



def process((name, *rest))
end

data = ['hexlet', 'online courses', 'programming']
process(data)





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Usefull javascript snippets
---------------------------

Make online video in browser faster
-----------------------------------


(function(){ document.querySelector('video').playbackRate = 2.0; })();




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Usefull rails commands
----------------------

Simple form for rails
---------------------


$ bin/rails g simple_form:install
$ bin/rails g simple_form:install --bootstrap

$ bin/rails g migration add_fields_to_articles published:boolean edited_at:datetime
$ bin/rails db:migrate



---



Rails routes
------------


$ bin/rails routes -g article
$ bin/rails routes | grep posts



---



Annotate for rails models
-------------------------


group :development do
  gem 'annotate'
end

$ bundle
$ bin/rails g annotate:install
$ bundle exec annotate



Rake
----


$ bin/rails generate
$ bin/rails generate scaffold
$ bin/rails destroy
$ bin/rails dbconsole
$ bin/rails runner 'User.all'

$ bin/rails runner 'pp User.first'
$ bin/rails runner lib/user.rb

$ bin/rails about
$ bin/rake about

$ bin/rake assets:precompile
$ bin/rake assets:clobber
$ bin/rake assets:clean
$ bin/rails notes
$ bin/rake stats
$ bin/rake timezones

$ bin/rake time:zones:all

$ bin/rails users:create

$ bin/rails g task
$ bin/rails g task manipulate_files create

$ bin/rails users:update name=vasya
$ bin/rails 'users:update[vasya]'



---



Create rake task
----------------


$ rails g task my_namespace my_task1 my_task2
$ rake -T | grep my_namespace



---



Start console in environment
----------------------------


$ RAILS_ENV=staging_unmerged bundle exec rails c



---



Kill already started ruby proc
------------------------------


$ lsof -wni tcp:3000 && kill -9 $(lsof -i tcp:3000 -t -c ruby -a)



---



$ lsof -wni tcp:3000 && pkill -9 -f puma



---



$ kill -9 pid_number
$ pkill -9 -f puma



---



$ lsof -wni tcp:3000
$ kill -9 pid_number



Interesting rails cmd's
-----------------------


$ rails db:prepare
$ rails db:reset
$ rails db:setup
$ rails db:seed:replant

$ rails middleware

$ rails initializers
$ rails initializers | grep devise

$ rails stats

$ rails runner
$ rails runner 'puts "Hello world"'
$ rails runner 'puts "#{User.first.email}"'

$ rails time:zones
$ rails



---



Rubocop usage
-------------


$ rubocop
$ rubocop -a
$ rubocop -A



---



Docker compose add
------------------


$ sudo apt-install docker-compose



---



Add column (migration) cmd
--------------------------


$ rails g migration add_username_to_users username:string



---



Add index to database example
-----------------------------


$ rails g migration add_username_index



---



New API key for rails app
--------------------------


$ rails new my_api --api



---



Rails app create cmd (property_finder)
--------------------------------------


$ rails new property_finder --database-postgresql --skip-test --skip-action-cable --skip-active-storage --skip-turbolinks --skip-yarn



---



Console commands for editors starting
-------------------------------------


$ atom .
$ subl .
$ code .



---



Create new credentials for Rails app
------------------------------------


$ rm -rf config/credentials.yml.enc && EDITOR="mate --wait" bin/rails credentials:edit



---



Clear tmp cach
--------------


$ rake tmp:cache:clear



---



Your Yarn packages are out of date
----------------------------------


$ yarn install --check-files



---



Add credentials for google_map app cmd
--------------------------------------


$ rails credentials:edit --environment=development



---



Create rails api app
--------------------


$ rails new app_name --api



---



Rails console reload from console
---------------------------------


> reload!

Reloading...
=> true

irb(main):005:0>



---



Set environment for database (psql)
-----------------------------------


$ rails db:environment:set RAILS_ENV=development



---



Refresh, modify and clean Rails application database by one complex console command
-----------------------------------------------------------------------------------


---v1---

$ rails db:drop && rails db:create && rails db:migrate && rails db:seed --trace


---v2---

$ rails db:{drop,create,migrate,seed} --trace



---



Add products with scaffold example
----------------------------------


$ rails g scaffold product name description:text price:decimal is_best_offer:boolean images:array videos:array



---



Add categories to rails app with scaffold
-----------------------------------------


---1---

$ rails g scaffold category heading overview:text display:boolean


---2---

$ rails g migration add_category_to_products category:references






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Associations (Rails 6)
----------------------

Association types
-----------------


belongs_to
has_one
has_many
has_many :through
has_one :through
has_and_belongs_to_many



---



belongs_to
----------

model.rb
--------


class Book < ApplicationRecord
  belongs_to :author
end



migration.rb
------------


class CreateOrders < ActiveRecord::Migration[6.0]
  def change
    create_table :authors do |t|
      t.string :name
      t.timestamps
    end

    create_table :books do |t|
      t.belongs_to :author, foreign_key: true
      t.datetime :published_at
      t.timestamps
    end
  end
end



---



has_one
-------

model.rb
--------

class Supplier < ApplicationRecord
  has_one :account
end


migration.rb
------------

class CreateSuppliers < ActiveRecord::Migration[6.0]
  def change
    create_table :suppliers do |t|
      t.string :name
      t.timestamps
    end

    create_table :accounts do |t|
      t.belongs_to :supplier, index: { unique: true }, foreign_key: true
      t.string :account_number
      t.timestamps
    end
  end
end



---



has_many
--------

class.rb
--------

class Author < ApplicationRecord
  has_many :books
end


migration.rb
------------

class CreateAuthors < ActiveRecord::Migration[6.0]
  def change
    create_table :authors do |t|
      t.string :name
      t.timestamps
    end

    create_table :books do |t|
      t.belongs_to :author, index: true, foreign_key: true
      t.datetime :published_at
      t.timestamps
    end
  end
end



---



has_many :through
-----------------

class.rb
--------

class Physician < ApplicationRecord
  has_many :appointments
  has_many :patients, through: :appointments
end

class Appointment < ApplicationRecord
  belongs_to :physician
  belongs_to :patient
end

class Patient < ApplicationRecord
  has_many :appointments
  has_many :physicians, through: :appointments
end



migration.rb
------------

class CreateAppointments < ActiveRecord::Migration[6.0]
  def change
    create_table :physicians do |t|
      t.string :name
      t.timestamps
    end

    create_table :patients do |t|
      t.string :name
      t.timestamps
    end

    create_table :appointments do |t|
      t.belongs_to :physician
      t.belongs_to :patient
      t.datetime :appointment_date
      t.timestamps
    end
  end
end



class.rb
--------

class Document < ApplicationRecord
  has_many :sections
  has_many :paragraphs, through: :sections
end

class Section < ApplicationRecord
  belongs_to :document
  has_many :paragraphs
end

class Paragraph < ApplicationRecord
  belongs_to :section
end



view.html.erb
-------------

@document.paragraphs



---



has_one :through 
-----------------

class.rb
--------

class Supplier < ApplicationRecord
  has_one :account
  has_one :account_history, through: :account
end

class Account < ApplicationRecord
  belongs_to :supplier
  has_one :account_history
end

class AccountHistory < ApplicationRecord
  belongs_to :account
end



migrations.rb
-------------

class CreateAccountHistories < ActiveRecord::Migration[6.0]
  def change
    create_table :suppliers do |t|
      t.string :name
      t.timestamps
    end

    create_table :accounts do |t|
      t.belongs_to :supplier
      t.string :account_number
      t.timestamps
    end

    create_table :account_histories do |t|
      t.belongs_to :account
      t.integer :credit_rating
      t.timestamps
    end
  end
end



---



has_and_belongs_to_many
-----------------------

class.rb
--------

class Assembly < ApplicationRecord
  has_and_belongs_to_many :parts
end

class Part < ApplicationRecord
  has_and_belongs_to_many :assemblies
end



migration.rb
------------

class CreateAssembliesAndParts < ActiveRecord::Migration[6.0]
  def change
    create_table :assemblies do |t|
      t.string :name
      t.timestamps
    end

    create_table :parts do |t|
      t.string :part_number
      t.timestamps
    end

    create_table :assemblies_parts, id: false do |t|
      t.belongs_to :assembly
      t.belongs_to :part
    end
  end
end



---



Polymorphic Associations
------------------------

class.rb
--------

class Picture < ApplicationRecord
  belongs_to :imageable, polymorphic: true
end

class Employee < ApplicationRecord
  has_many :pictures, as: :imageable
end

class Product < ApplicationRecord
  has_many :pictures, as: :imageable
end



migration.rb
------------

class CreatePictures < ActiveRecord::Migration[6.0]
  def change
    create_table :pictures do |t|
      t.string  :name
      t.bigint  :imageable_id
      t.string  :imageable_type
      t.timestamps
    end

    add_index :pictures, [:imageable_type, :imageable_id]
  end
end

class CreatePictures < ActiveRecord::Migration[6.0]
  def change
    create_table :pictures do |t|
      t.string :name
      t.references :imageable, polymorphic: true
      t.timestamps
    end
  end
end



---



Self Joins
----------

model.rb
--------

class Employee < ApplicationRecord
  has_many :subordinates, class_name: "Employee", foreign_key: "manager_id"
  belongs_to :manager, class_name: "Employee", optional: true
end



migration.rb
------------

class CreateEmployees < ActiveRecord::Migration[6.0]
  def change
    create_table :employees do |t|
      t.references :manager, foreign_key: { to_table: :employees }
      t.timestamps
    end
  end
end



Methods Added by belongs_to
---------------------------

model.rb
--------

class Book < ApplicationRecord
  belongs_to :author
end



Book methods
------------

rails c
-------

@author = @book.author
@author = @book.reload_author
@book.author = @author
@author = @book.build_author(author_number: 123, author_name: "John Doe")
@author = @book.create_author(author_number: 123, author_name: "John Doe")



---



Options for belongs_to
----------------------

:autosave
:class_name

:counter_cache
--------------

class Book < ApplicationRecord
  belongs_to :author, counter_cache: :count_of_books
end

class Author < ApplicationRecord
  has_many :books
end



:dependent
:foreign_key

:primary_key
------------

class User < ApplicationRecord
  self.primary_key = 'guid' # primary key is guid and not id
end

class Todo < ApplicationRecord
  belongs_to :user, primary_key: 'guid'
end


:inverse_of
:polymorphic
:touch
:validate
:optional




model.rb
--------

class Book < ApplicationRecord
  belongs_to :author, touch: :books_updated_at, counter_cache: true
end



---



Scopes for belongs_to
---------------------

where
-----

class Book < ApplicationRecord
  belongs_to :author, -> { where active: true }
end



includes
--------

class Chapter < ApplicationRecord
  belongs_to :book, -> { includes :author }
end

class Book < ApplicationRecord
  belongs_to :author
  has_many :chapters
end

class Author < ApplicationRecord
  has_many :books
end


readonly
select



---



Do Any Associated Objects Exist
-------------------------------

if @book.author.nil?
  @msg = "No author found for this book"
end



Methods by has_one
------------------

model.rb
--------

class Supplier < ApplicationRecord
  has_one :account
end


> rails c

@account = @supplier.account
@account = @supplier.reload_account
@supplier.account = @account
@account = @supplier.build_account(terms: "Net 30")



Options for has_one
-------------------

model.rb
--------

class Supplier < ApplicationRecord
  has_one :account, class_name: "Billing", dependent: :nullify
end



---



menthods
--------

:as
:autosave
:class_name
:dependent
:foreign_key
:inverse_of
:primary_key
:source
:source_type
:through
:touch
:validate



---



Scopes for has_one
------------------

where
-----

class Supplier < ApplicationRecord
  has_one :account, -> { where "confirmed = 1" }
end



includes
--------

class Supplier < ApplicationRecord
  has_one :account, -> { includes :representative }
end

class Account < ApplicationRecord
  belongs_to :supplier
  belongs_to :representative
end

class Representative < ApplicationRecord
  has_many :accounts
end


readonly
select



---



Methods by has_many
-------------------

collection
collection<<(object, ...)
collection.delete(object, ...)
collection.destroy(object, ...)
collection=(objects)
collection_singular_ids
collection_singular_ids=(ids)
collection.clear
collection.empty?
collection.size
collection.find(...)
collection.where(...)
collection.exists?(...)
collection.build(attributes = {})
collection.create(attributes = {})
collection.create!(attributes = {})
collection.reload



model.rb
--------

class Author < ApplicationRecord
  has_many :books
end


> rails c
---------

> author.books
> author.books<<(object, ...)
> author.books.delete(object, ...)
> author.books.destroy(object, ...)
> author.books=(objects)
> author.book_ids
> author.book_ids=(ids)
> author.books.clear
> author.books.empty?
> author.books.size
> author.books.find(...)
> author.books.where(...)
> author.books.exists?(...)
> author.books.build(attributes = {}, ...)
> author.books.create(attributes = {})
> author.books.create!(attributes = {})
> author.books.reload



controller.rb
-------------

@books = @author.books
@author.books << @book1
@author.books.delete(@book1)
@author.books.destroy(@book1)
@book_ids = @author.book_ids
@author.books.clear

<% if @author.books.empty? %>
  No Books Found
<% end %>

@book_count = @author.books.size
@available_book = @author.books.find(1)

@available_books = @author.books.where(available: true) # No query yet
@available_book = @available_books.first # Now the database will be queried

@book = @author.books.build(published_at: Time.now, book_number: "A12345")

@books = @author.books.build([
  { published_at: Time.now, book_number: "A12346" },
  { published_at: Time.now, book_number: "A12347" }
])



---



The has_many association supports these options
-----------------------------------------------

:as
:autosave
:class_name
:counter_cache
:dependent
:foreign_key
:inverse_of
:primary_key
:source
:source_type
:through
:validate



Scopes for has_many
-------------------

where
extending



group
-----

class Author < ApplicationRecord
  has_many :chapters, -> { group 'books.id' }, through: :books
end



includes
--------

person.articles << article unless person.articles.include?(article)



limit
-----

class Author < ApplicationRecord
  has_many :recent_books, -> { order('published_at desc').limit(100) }, class_name: "Book"
end


offset



order
-----

class Author < ApplicationRecord
  has_many :books, -> { order "date_confirmed DESC" }
end



readonly
select
distinct
--------

class Person
  has_many :readings
  has_many :articles, -> { distinct }, through: :readings
end



---



Methods Added by has_and_belongs_to_many
----------------------------------------

collection
collection<<(object, ...)
collection.delete(object, ...)
collection.destroy(object, ...)
collection=(objects)
collection_singular_ids
collection_singular_ids=(ids)
collection.clear
collection.empty?
collection.size
collection.find(...)
collection.where(...)
collection.exists?(...)
collection.build(attributes = {})
collection.create(attributes = {})
collection.create!(attributes = {})
collection.reload



model.rb
--------

class Part < ApplicationRecord
  has_and_belongs_to_many :assemblies
end



$ rails c
---------

> part.assemblies
> part.assemblies<<(object, ...)
> part.assemblies.delete(object, ...)
> part.assemblies.destroy(object, ...)
> part.assemblies=(objects)
> part.assembly_ids
> part.assembly_ids=(ids)
> part.assemblies.clear
> part.assemblies.empty?
> part.assemblies.size
> part.assemblies.find(...)
> part.assemblies.where(...)
> part.assemblies.exists?(...)
> part.assemblies.build(attributes = {}, ...)
> part.assemblies.create(attributes = {})
> part.assemblies.create!(attributes = {})
> part.assemblies.reload



controller.rb
-------------

collection
----------

@assemblies = @part.assemblies
@part.assemblies << @assembly1
@part.assemblies.delete(@assembly1)
@part.assemblies.destroy(@assembly1)
@assembly_ids = @part.assembly_ids

<% if @part.assemblies.empty? %>
  This part is not used in any assemblies
<% end %>

@assembly_count = @part.assemblies.size
@assembly = @part.assemblies.find(1)
@new_assemblies = @part.assemblies.where("created_at > ?", 2.days.ago)
@assembly = @part.assemblies.build({assembly_name: "Transmission housing"})
@assembly = @part.assemblies.create({assembly_name: "Transmission housing"})
@assemblies = @part.assemblies.reload



---



Options for has_and_belongs_to_many
-----------------------------------

model.rb
--------

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { readonly }, autosave: true
end


The has_and_belongs_to_many association supports these options
--------------------------------------------------------------

:association_foreign_key
:autosave
:class_name
:foreign_key
:join_table
:validate



model.rb
--------

class User < ApplicationRecord
  has_and_belongs_to_many :friends, class_name: "User", foreign_key: "this_user_id", association_foreign_key: "other_user_id"
end



Scopes for has_and_belongs_to_many
----------------------------------

model.rb
--------

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { where active: true }
end



standard querying methods
-------------------------

where
-----

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { where "factory = 'Seattle'" }
end

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { where factory: 'Seattle' }
end



extending
group
-----

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { group "factory" }
end



includes
limit
-----

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { order("created_at DESC").limit(50) }
end



offset
order
-----

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { order "assembly_name ASC" }
end


readonly
select
distinct



---



Association Callbacks
---------------------

controller.rb
-------------

before_add
after_add
before_remove
after_remove



model.rb
--------

class Author < ApplicationRecord
  has_many :books, before_add: :check_credit_limit

  def check_credit_limit(book)
    throw(:abort) if limit_reached?
  end
end

class Author < ApplicationRecord
  has_many :books, before_add: [:check_credit_limit, :calculate_shipping_charges]

  def check_credit_limit(book)
    throw(:abort) if limit_reached?
  end

  def calculate_shipping_charges(book)
    author.books << book
    author.books = [book, book2]
    book.update(author_id: 1)
  end
end



def check_credit_limit(book)
  throw(:abort) if limit_reached?
end



---



Association Extensions
----------------------

model.rb
--------

class Author < ApplicationRecord
  has_many :books do
    def find_by_book_prefix(book_number)
      find_by(category_id: book_number[0..2])
    end
  end
end


module FindRecentExtension
  def find_recent
    where("created_at > ?", 5.days.ago)
  end
end

class Author < ApplicationRecord
  has_many :books, -> { extending FindRecentExtension }
end

class Supplier < ApplicationRecord
  has_many :deliveries, -> { extending FindRecentExtension }
end




Single Table Inheritance (STI)
------------------------------

$ rails generate model vehicle type:string color:string price:decimal{ 10.2 }
$ rails generate model car --parent=Vehicle



model.rb
--------

class Car < Vehicle
end



controller.rb
-------------

> rails c
---------

Car.create(color: 'Red', price: 10000)

INSERT INTO "vehicles" ("type", "color", "price") VALUES ('Car', 'Red', 10000)


Car.all

SELECT "vehicles".* FROM "vehicles" WHERE "vehicles"."type" IN ('Car')




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

PostgreSQL
----------


PosgreSQL guide, get starting: (windows)
----------------------------------------

https://winitpro.ru/index.php/2019/10/25/ustanovka-nastrojka-postgresql-v-windows/



---



PostgreSQL commands
-------------------

https://guruadmin.ru/page/15-practical-postgresql-database-administration-commands



---



PostgreSQL documentation (Getting Started)
------------------------------------------

https://www.microfocus.com/documentation/idol/IDOL_12_0/MediaServer/Guides/html/English/Content/Getting_Started/Configure/_TRN_Set_up_PostgreSQL.htm



$ psql -U userName

CREATE DATABASE myDatabase WITH ENCODING 'UTF8' LC_COLLATE='English_United Kingdom' LC_CTYPE='English_United Kingdom';

\c databaseName
\set ON_ERROR_STOP on
\i 'path/postgres.sql'



GRANT TEMP ON DATABASE databaseName TO userName;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO userName;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO userName;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO userName;



---



PostgreSQL cmd for role create
------------------------------

postgres=# CREATE ROLE second WITH SUPERUSER REPLICATION LOGIN CREATEDB CREATEROLE PASSWORD '123456';

\du
\q
\l



---



PostgerSQL documentation (db creating)
--------------------------------------


https://www.postgresql.org/docs/current/sql-createdatabase.html



CREATE DATABASE lusiadas;
CREATE DATABASE sales OWNER salesapp TABLESPACE salesspace;


CREATE DATABASE music
  LOCALE 'sv_SE.utf8'
  TEMPLATE template0;


CREATE DATABASE music2
  LOCALE 'sv_SE.iso885915'
  ENCODING LATIN9
  TEMPLATE template0;






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Database optimization in Rails
------------------------------


gem 'activerecord-analyze'



---




$ User.count
$ User.all.explain
$ User.all.analyze
$ User.where(id: 3).analyze
$ User.where(name: 'Dave').analyze



---



in migration file
-----------------

class AddIndexToUserName < ActiveRecord::Migration[6.1]
  def change
    add_index :users, :name
  end
end




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails multiple object create snippets for seeds.rb
--------------------------------------------------

Seeds snippet with account
--------------------------


Account.create([
  { username: 'John',  first_name: 'John',  last_name: 'Doe',   email: 'johndoe@example.com',    password: 'password' },
  { username: 'Jane',  first_name: 'Jane',  last_name: 'Smith', email: 'fanesmith@example.com',  password: 'password' },
  { username: 'Susan', first_name: 'Susan', last_name: 'Baker', email: 'susanbaker@example.com', password: 'password' },
])


Account.create([
  { first_name: 'Sarah',    last_name: 'Jones',   username: 'sarah',    email: 'sarah@example.com',     password: 'Password1' },
  { first_name: 'Emily',    last_name: 'Hart',    username: 'emily',    email: 'emily@example.com',     password: 'Password1' },
  { first_name: 'Melanie',  last_name: 'hunt',    username: 'melanie',  email: 'melanie@example.com',   password: 'Password1' },
  { first_name: 'Caroline', last_name: 'Simpson', username: 'caroline', email: 'caroline@example.com',  password: 'Password1' },
  { first_name: 'Bridget',  last_name: 'Smith',   username: 'bridget',  email: 'bridget@example.com',   password: 'Password1' }
])


Account.create([
  { name: 'Sarah',    username: 'sarah',    email: 'sarah@example.com',    admin: true,  maker: true,   backer: true,  password: 'Password1' },
  { name: 'Emily',    username: 'emily',    email: 'emily@example.com',    admin: false, maker: true,   backer: true,  password: 'Password1' },
  { name: 'Melanie',  username: 'melanie',  email: 'melanie@example.com',  admin: false, maker: false,  backer: false, password: 'Password1' },
  { name: 'Caroline', username: 'caroline', email: 'caroline@example.com', admin: false, maker: true,   backer: false, password: 'Password1' },
  { name: 'Bridget',  username: 'bridget',  email: 'bridget@example.com',  admin: false, maker: false,  backer: true,  password: 'Password1' }
])


Account.create([
  { first_name: 'Sarah',    last_name: 'Jones',   email: 'sarah@example.com',     password: 'Password1' },
  { first_name: 'Emily',    last_name: 'Hart',    email: 'emily@example.com',     password: 'Password1' },
  { first_name: 'Melanie',  last_name: 'hunt',    email: 'melanie@example.com',   password: 'Password1' },
  { first_name: 'Caroline', last_name: 'Simpson', email: 'caroline@example.com',  password: 'Password1' },
  { first_name: 'Bridget',  last_name: 'Smith',   email: 'bridget@example.com',   password: 'Password1' }
])


Account.create([
  { username: 'sarah',    email: 'sarah@example.com',     password: 'Password1' },
  { username: 'emily',    email: 'emily@example.com',     password: 'Password1' },
  { username: 'melanie',  email: 'melanie@example.com',   password: 'Password1' },
  { username: 'caroline', email: 'caroline@example.com',  password: 'Password1' },
  { username: 'bridget',  email: 'bridget@example.com',   password: 'Password1' }
])


Account.create([
  { email: 'sarah@example.com',     password: 'Password1' },
  { email: 'emily@example.com',     password: 'Password1' },
  { email: 'melanie@example.com',   password: 'Password1' },
  { email: 'caroline@example.com',  password: 'Password1' },
  { email: 'bridget@example.com',   password: 'Password1' }
])



---



Seeds snippet with user
-----------------------

User.create([
  { username: 'John',  first_name: 'John',  last_name: 'Doe',   email: 'johndoe@example.com',    password: 'password' },
  { username: 'Jane',  first_name: 'Jane',  last_name: 'Smith', email: 'fanesmith@example.com',  password: 'password' },
  { username: 'Susan', first_name: 'Susan', last_name: 'Baker', email: 'susanbaker@example.com', password: 'password' },
])


User.create([
  { first_name: 'Sarah',    last_name: 'Jones',   username: 'sarah',    email: 'sarah@example.com',     password: 'Password1' },
  { first_name: 'Emily',    last_name: 'Hart',    username: 'emily',    email: 'emily@example.com',     password: 'Password1' },
  { first_name: 'Melanie',  last_name: 'hunt',    username: 'melanie',  email: 'melanie@example.com',   password: 'Password1' },
  { first_name: 'Caroline', last_name: 'Simpson', username: 'caroline', email: 'caroline@example.com',  password: 'Password1' },
  { first_name: 'Bridget',  last_name: 'Smith',   username: 'bridget',  email: 'bridget@example.com',   password: 'Password1' }
])


User.create([
  { name: 'Sarah',    username: 'sarah',    email: 'sarah@example.com',    admin: true,  maker: true,   backer: true,  password: 'Password1' },
  { name: 'Emily',    username: 'emily',    email: 'emily@example.com',    admin: false, maker: true,   backer: true,  password: 'Password1' },
  { name: 'Melanie',  username: 'melanie',  email: 'melanie@example.com',  admin: false, maker: false,  backer: false, password: 'Password1' },
  { name: 'Caroline', username: 'caroline', email: 'caroline@example.com', admin: false, maker: true,   backer: false, password: 'Password1' },
  { name: 'Bridget',  username: 'bridget',  email: 'bridget@example.com',  admin: false, maker: false,  backer: true,  password: 'Password1' }
])


User.create([
  { first_name: 'Sarah',    last_name: 'Jones',   email: 'sarah@example.com',     password: 'Password1' },
  { first_name: 'Emily',    last_name: 'Hart',    email: 'emily@example.com',     password: 'Password1' },
  { first_name: 'Melanie',  last_name: 'hunt',    email: 'melanie@example.com',   password: 'Password1' },
  { first_name: 'Caroline', last_name: 'Simpson', email: 'caroline@example.com',  password: 'Password1' },
  { first_name: 'Bridget',  last_name: 'Smith',   email: 'bridget@example.com',   password: 'Password1' }
])


User.create([
  { username: 'sarah',    email: 'sarah@example.com',     password: 'Password1' },
  { username: 'emily',    email: 'emily@example.com',     password: 'Password1' },
  { username: 'melanie',  email: 'melanie@example.com',   password: 'Password1' },
  { username: 'caroline', email: 'caroline@example.com',  password: 'Password1' },
  { username: 'bridget',  email: 'bridget@example.com',   password: 'Password1' }
])


User.create([
  { email: 'sarah@example.com',     password: 'Password1' },
  { email: 'emily@example.com',     password: 'Password1' },
  { email: 'melanie@example.com',   password: 'Password1' },
  { email: 'caroline@example.com',  password: 'Password1' },
  { email: 'bridget@example.com',   password: 'Password1' }
])




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Lorem Ipsum text
----------------



Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.


Lorem ipsum dolor sit amet, consectetur adipiscing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia 
deserunt mollit anim id est laborum.


Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, 
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum 
dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.


Lorem ipsum dolor sit amet, consectetur 
adipiscing elit, sed do eiusmod tempor 
incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud 
exercitation ullamco laboris nisi ut aliquip 
ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in 
voluptate velit esse cillum dolore eu fugiat 
nulla pariatur.
Excepteur sint occaecat cupidatat non proident, 
sunt in culpa qui officia deserunt mollit anim 
id est laborum.


Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, 
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum 
dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, 
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum 
dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, 
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum 
dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails ActiveStorage
-------------------


---1---

$ rails active_storage:install

Copied migration 20210212141003_create_active_storage_tables.active_storage.rb from active_storage



---2---

$ rails db:migrate


config.active_storage.service = :local


local:
  service: Disk
  root: <%= Rails.root.join("storage") %>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Render partial on the same page after clicking on link_to with AJAX
-------------------------------------------------------------------


---1---

Create a div that will contain the loaded data. In this case div#current_customer
---------------------------------------------------------------------------------

<div id='customer'></div>



---2---

Add remote: true to your link
-----------------------------

<td><%= link_to 'Show', customer, remote: true %></td>



---3---

Name your partial customers/_show.html.erb (don't forget the _so it can be called as a partial)
-----------------------------------------------------------------------------------------------

<p>
   <strong>Name:</strong>
   <%= @customer.name %>
   <%= @customer.id %>
</p>

<%= link_to 'Edit Customer', edit_customer_path(@customer) %>



---4---

Respond to Javascript in the show method in CustomersController
---------------------------------------------------------------

respond_to do |format|
  format.js {render layout: false} # Add this line to you respond_to block
end



---5---

Create your show.js.erb view, which is going to handle the front-end changes when respond_to :jsis gonna be called (In this case triggered by remote: true)
-----------------------------------------------------------------------------------------------------------------------------------------------------------

$ touch show.js.erb



---6---

Tell show.js.erb what it must do (Replace #current_customer content with your partial, using the right @customer)
-----------------------------------------------------------------------------------------------------------------

customers/show.js.erb
---------------------

$("#current_customer").html("<%= escape_javascript(render partial: 'customers/show', locals: { customer: @customer } ) %>");



customers/index.html.erb
------------------------

<div id="current_customer">
</div>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Using javascript in rails controller example
--------------------------------------------


class CommentsController < ApplicationController
  def create
    @comment = Comment.new comment_params
    @comment.account_id = current_account.id

    respond_to do |format|
      format.js {
        if @comment.save
          @comments = Comment.where(post_id: @comment.post_id)
          render 'comments/create'
        else
          # unable to save
        end
      }
    end
  end

  def comment_params
    params.require(:comment).permit(:message, :post_id)
  end
end



file.js.erb
-----------

document.getElementById('post-comments').innerHTML = "<%= escape_javascript(render partial: 'posts/comments', locals: { comments: @comments }) %>";




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Usefull web resources
---------------------

Rails configuring
-----------------


https://edgeguides.rubyonrails.org/configuring.html



---



Rails Ransack
-------------

https://activerecord-hackery.github.io/ransack/getting-started/simple-mode/



---



AASM - Rails FSM
----------------

https://github.com/aasm/aasm



---



Ruby market
-----------

https://github.com/markets/awesome-ruby


---



About Rails Fixtures
--------------------

https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html



---



Faker themes and docs
---------------------

https://www.rubydoc.info/gems/faker/1.6.6



---




About Puma server
-----------------

https://puma.io



---



Rubocop .yml template
---------------------

https://github.com/hexlet-components/rails-users-list/blob/main/.rubocop.yml



---



Rubocop Rails
-------------

https://github.com/rubocop/rubocop-rails



---



About test
----------

https://ru.hexlet.io/blog/posts/how-to-test-code


---



Good practice check list
------------------------

https://guides.hexlet.io/ru/check-list-of-engineering-practices
/?_gl=1*fn31i6*_ga*MjI5MDExNTEyLjE2NjM1MDQzNzU.*_ga_PM3R85EKHN*MTY4NDIzNjUyMi41OC4xLjE2ODQyMzc4MTUuMC4wLjA.*_ga_WWGZ6EVHEY*MTY4NDIzNjUyMi44LjEuMTY4NDIzNzc1NS4wLjAuMA..



---



Testing Rails Applications
--------------------------

https://guides.rubyonrails.org/testing.html



---



Active Record Basics
--------------------

https://guides.rubyonrails.org/active_record_basics.html



---



Using a Model to Interact with the Database
-------------------------------------------

https://guides.rubyonrails.org/getting_started.html#using-a-model-to-interact-with-the-database



---



Rails Layouts and Rendering
---------------------------

https://guides.rubyonrails.org/layouts_and_rendering.html



---



Rails Routing
-------------

https://guides.rubyonrails.org/routing.html



---



Integrate AndminLTE with Ruby On Rails 6
----------------------------------------

https://dev.to/brayvasq/integrate-andminlte-with-ruby-on-rails-6-od7



---



Stimulus popover, stimulus components
-------------------------------------

https://www.stimulus-components.com/docs/stimulus-popover/



---



DEVISE on Hotwire / Turbo integration
-------------------------------------

https://github.com/heartcombo/devise/blob/main/CHANGELOG.md
https://github.com/heartcombo/devise/wiki/How-To:-Upgrade-to-Devise-4.9.0-%5BHotwire-Turbo-integration%5D



---



Rails with default tailwind
---------------------------

https://www.simplethread.com/how-to-create-a-new-rails-7-app-with-tailwind/



---



Turbo search Rails
------------------

https://web-crunch.com/posts/turbo-charged-real-time-search-ruby-on-rails-7



---



How to start using Arrays in Rails with PostgreSQL
--------------------------------------------------


https://blog.arkency.com/2014/10/how-to-start-using-arrays-in-rails-with-postgresql



---



How to Save Multiple Checkbox Values to a Database in Rails
-----------------------------------------------------------

https://www.sitepoint.com/save-multiple-checkbox-values-database-rails



---



Hexlet on YouTube
-----------------

https://www.youtube.com/watch?v=aEnk5r-zDdc&list=PLQUXJZ4AOy9qJDD9x4jK1fgnSo3gycwHx&index=33



---



Web scrapping with Ruby
-----------------------

https://oxylabs.io/blog/web-scraping-with-ruby



---



Rails 6 (and 5): User Accounts with 3 types of Roles – Devise, Rails Admin, CanCanCan
-------------------------------------------------------------------------------------

https://altalogy.com/blog/rails-6-user-accounts-with-3-types-of-roles



---



Build with Ruby on Rails
------------------------

https://web-crunch.com/collections/lets-build-with-ruby-on-rails



---



Rails routing guides
--------------------

https://guides.rubyonrails.org/routing.html



---



Copy to clipboard with javscript
--------------------------------

https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html



---


Interesting rails blog tutorial
-------------------------------


https://www.freecodecamp.org/news/lets-create-an-intermediate-level-ruby-on-rails-application-d7c6e997c63f



---


Rails GitHub Deanout
--------------------

https://github.com/Deanout



---



Dockerize Rails 7 App
---------------------

https://codingpackets.com/blog/dockerize-rails-7-app/



---



iPhone app sites
----------------

https://github.com/ging/vish
https://github.com/jwncoexists/strategicHR
https://github.com/GilTorch/rails-mooc-portfolio-project
https://service-iphone.ru/
https://documentation.mjml.io/#mj-attributes



---



Ruby lessons
------------

https://github.com/krdprog/rubyschool-notes/blob/master/one-by-one/lesson-01.md



---



Yandex cloud for rails GitHub
-----------------------------

https://github.com/programrails/carrierwave-yandex-disk
https://github.com/anjlab/yandex-disk



---



Add video with carrierwave
--------------------------


https://github.com/rheaton/carrierwave-video
https://www.randygirard.com/how-to-create-a-video-upload-platform-using-ruby-on-rails-part-1/
https://admatbandara.medium.com/video-upload-processing-with-ruby-on-rails-c3c5aa04e08



---



Implement add more images feature
---------------------------------


http://bobintornado.github.io/rails/2015/12/29/Multiple-Images-Uploading-With-CarrierWave-and-PostgreSQL-Array.html



---



Add bootstrap 5 to Rails 7
--------------------------


---v1---

https://jasonfleetwoodboldt.com/courses/stepping-up-rails/rails-7-bootstrap/



---v2---

https://www.bootrails.com/blog/rails-7-bootstrap-5-tutorial/



---v3---

https://dev.to/coorasse/rails-7-bootstrap-5-and-importmaps-without-nodejs-4g8



---



BOOTSRAP DATEPICKER
-------------------


https://bootstrap-datepicker.readthedocs.io/en/latest/
https://github.com/vitalets/bootstrap-datepicker



---



STRF Time refactoring
---------------------

http://strftime.net/



---



Graphs for rails
----------------

https://chartkick.com/



---



Quote turbo-app example
-----------------------

https://www.hotrails.dev/turbo-rails/quote-totals-turbo-frames



---




esbuild-rails
-------------

https://github.com/excid3/esbuild-rails



---



Stimulus for Rails
------------------

https://github.com/hotwired/stimulus-rails



---



Rails Deanin
------------

https://deanin.com/
https://github.com/Deanout



---



Creating a Linux Desktop application with Ruby
----------------------------------------------

https://iridakos.com/programming/2018/01/25/creating-a-gtk-todo-application-with-ruby
https://github.com/cedlemo/ruby-gtk3-tutorial



---



Ruby & Rails Tools
------------------

https://www.ruby-toolbox.com/categories



---



Rails with Docker compose
-------------------------


https://github.com/ryanwi/rails7-on-docker
https://github.com/rails/rails/pull/46762
https://evilmartians.com/chronicles/ruby-on-whales-docker-for-ruby-rails-development
https://github.com/coderjourney/03-learn-to-use-docker-in-development



---



Authentication for Rails API with devise-api gem
------------------------------------------------

https://github.com/nejdetkadir/devise-api



---



Rails guides
------------

https://gorails.com
https://web-crunch.com/
https://blog.corsego.com/



---



Rails cources
-------------

https://www.theodinproject.com/paths/full-stack-ruby-on-rails?
https://exercism.org/tracks/ruby/exercises



---



Rails Templates
---------------

https://railsbytes.com/



---



Rails API
---------

https://github.com/loopstudio/rails-api-boilerplate
https://github.com/shftco/rails-api-boilerplate
https://github.com/Deanout/api_boilerplate_rails



Starting from 5.5.0 RC1 Doorkeeper requires client authentication for Resource Owner Password Grant
as stated in the OAuth RFC. You have to create a new OAuth client (Doorkeeper::Application) if you didn't
have it before and use client credentials in HTTP Basic auth if you previously used this grant flow without
client authentication.

To opt out of this you could set the "skip_client_authentication_for_password_grant" configuration option
to "true", but note that this is in violation of the OAuth spec and represents a security risk






https://github.com/doorkeeper-gem/doorkeeper/issues/561#issuecomment-612857163



---



Best doc library
----------------

https://devdocs.io



---



Download Youtube video
----------------------

https://9convert.com/en2



---



iphones
-------

https://service-iphone.ru/remont-iphone/iphone-5/#category-0



---



eLearning Platforms on GitHub
-----------------------------

https://github.com/GilTorch/rails-mooc-portfolio-project/tree/master/app/models
https://github.com/jwncoexists/strategicHR/tree/master/app/controllers



---



Flickr.com
----------

https://www.flickr.com/search/?text=groningen



---



David Battersby clones
----------------------

https://github.com/search?q=david+battersby



---



Add simple Likes Button Rails 6
-------------------------------


https://medium.com/swlh/how-to-add-a-simple-like-button-to-your-rails-6-application-c1040999dc2



---



Beautifull images and photos
----------------------------

https://unsplash.com/



---



Site making resource
--------------------

https://www.sitepoint.com/



---



Rails 6 Amazon S3 storage guide
-------------------------------

https://edgeguides.rubyonrails.org/active_storage_overview.html



---



DefactoSoftware
---------------

https://github.com/DefactoSoftware/Hours
https://happyhours.io/



---



New reloc One account
---------------------

https://one.newrelic.com/launcher/nr1-core.home?pane=eyJuZXJkbGV0SWQiOiJucjEtY29yZS5saXN0aW5nLWVtcHR5LXN0YXRlIn0=&cards[0]
=eyJuZXJkbGV0SWQiOiJzZXR1cC1uZXJkbGV0cy5zZXR1cC1ydWJ5LWludGVncmF0aW9uIiwiYWNjb3VudElkIjozMDg4OTg1fQ==&platform[accountId]
=3088985&platform[timeRange][duration]=1800000&platform[$isFallbackTimeRange]=true



---



Active Record Nested Attributes docs
------------------------------------


https://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html



---



ImageMagick GraphicsMagick
--------------------------


file:///C:/Program%20Files/ImageMagick-7.0.10-Q16-HDRI/index.html
file:///C:/Program%20Files%20(x86)/GraphicsMagick-1.3.34-Q16/www/index.html



---



Rails learning video
--------------------


https://www.youtube.com/watch?v=qvGGz-2WHpU



---



Learn about simple_form helper
------------------------------


https://github.com/heartcombo/simple_form



---



Learn ruby lessons
------------------


https://www.youtube.com/channel/UCuEXLUx21ofCvFx8wFwtfNQ/videos



---



Check later
-----------

https://www.youtube.com/watch?v=sVJRkTxqlSQ



---



Rails app for learn coding
--------------------------

https://github.com/DefactoSoftWare/Hours/
https://happyhours.io/



---



Build with Ruby on Rails
------------------------

https://web-crunch.com/collections/lets-build-with-ruby-on-rails



---



Hello rails
-----------

https://hellorails.io/
https://www.youtube.com/playlist?list=PL01nNIgQ4uxNkDZNMON-TrzDVNIk3cOz4



---



Sidekiq guide
-------------

https://github.com/virtualforce/rails_sidekiq_guide



---



Json API
--------

https://jsonapi.org/



---



Ruby Geocoder
-------------

http://www.rubygeocoder.com/



---



google-maps project credentials and guides links
------------------------------------------------

https://console.cloud.google.com/apis/credentials?hl=ru&project=g-maps-307916&angularJsUrl=%2Fprojectselector%2Fapis%2
Fcredentials%3Fhl%3Dru%26supportedpurview%3Dproject%26project%3Dg-maps-307916&folder=&organizationId=&supportedpurview=project


https://github.com/apneadiving/Google-Maps-for-Rails/wiki/Change-handler-behavior
http://underscorejs.org/



---



Ruby Pattetrns
--------------

http://refactoring guru/ru/design-patterns
http://sandimetz.com/99bottles
http://www.poodr.com



---



Docker
------

https://www.youtube.com/playlist?list=PL8D2POruohOA4Y9LQoTttfSqsRwUGWpu6
https://lipanski.com/posts/dockerfile-ruby-best-practices
https://evilmartians.com/chronicles/ruby-on-whales-docker-for-ruby-rails-development
https://docs.docker.com/



---



Dry Rails
---------

https://dry-rb.org/



---



Rails Templates
---------------

https://www.railsbytes.com/public/templates



---



Placeholders for layouts
------------------------

https://placeholder.com/



---



Safe fonts for difficult borwsers
---------------------------------

https://www.w3schools.com/cssref/css_websafe_fonts.php



---



Fast deploy
-----------

https://www.netlify.com/



---



UI/UX designed templates from figma
-----------------------------------

https://www.templatefreebies.com/




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Frontend resources
------------------

css web helper
--------------


https://cssmatic.com



---



Bulma - CSS based frontand framework
------------------------------------

https://bulma.io/documentation/overview/start/



---



Sass
----

Sass tool
---------

https://github.com/thoughtbot/bourbon#installation



---



Sass basics
-----------

https://sass-lang.com/guide



---



Atom IDE constamization
-----------------------

https://www.material-theme.com/docs/configuration/icons-settings/



---



CSS
---

CSS :hover transitions
----------------------

http://shpargalkablog.ru/2011/07/transformaciya-css.html



---



css web helper
--------------

https://cssmatic.com/




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Get API key for Stripe
----------------------

Api key generation with ultrahook
---------------------------------


https://www.ultrahook.com/



$ echo "api_key: PU6UGaBRGNKO65dcvhSAChdoxkxjSJr4" > ~/.ultrahook

PU6UGaBRGNKO65dcvhSAChdoxkxjSJr4



---



Stripe docs
-----------

https://stripe.com/docs/webhooks#signatures



---



Stripe documentation
--------------------

https://dashboard.stripe.com/test/dashboard
https://dashboard.stripe.com/test/webhooks/we_1IQb1PAikeNSsMWCZHXNF934



---



Stripe API
----------

https://stripe.com/docs/api/customers/create



---



Get api key on UltraHook
------------------------

https://www.ultrahook.com/register




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Deploing rails app on heroku
----------------------------


1. $ heroku apps:create rails-geo-example
2. $ heroku open
3. $ git remote -v
4. $ git push heroku master
5. $ heroku rails db:migrate
   $ heroku run rails db:create
6. $ heroku logs
7. $ https://rails-geo-example.herokuapp.com/
8. $ https://git.heroku.com/rails-geo-example.git





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Deploy app to heroku
--------------------


---1---

$ heroku apps:create rails-location-detect



---2---

$ heroku open



---3---

$ git remote -v

heroku  https://git.heroku.com/rails-location-detect.git (fetch)
heroku  https://git.heroku.com/rails-location-detect.git (push)
origin  git@github.com:TheGor-365/location_detect.git (fetch)
origin  git@github.com:TheGor-365/location_detect.git (push)



---4---

$ git status



---5---

$ git push heroku master



---6---

$ heroku run rails db:create
$ heroku run rails db:migrate



---




https://rails-location-detect.herokuapp.com/ deployed to Heroku




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Set your master key in production (heroku example)
--------------------------------------------------


$ heroku config:set RAILS_MASTER_KEY=YOURMASTERKEY
$ heroku config:set RAILS_MASTER_KEY=`cat config/master.key`





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Getting API's for oath_app
--------------------------

Add to Gemfile
--------------


gem 'omniauth'
gem 'omniauth-facebook'
gem 'omniauth-github', github: 'omniauth/omniauth-github', branch: 'master'
gem 'omniauth-google-oauth2'
gem "omniauth-rails_csrf_protection"
gem 'activerecord-session_store'
gem 'devise', github: 'heartcombo/devise', branch: 'ca-omniauth-2'



---



devise for omniauth helper stachoverflow
----------------------------------------

https://stackoverflow.com/questions/65702896/latest-omniauth-facebook-gem-breaks-devise



---



Credentials for Rails 6
-----------------------

https://dev.to/yarotheslav/ruby-on-rails-6-credentials-quick-guide-2g8i





OAUTH
-----


---1---

Facebook for developers
https://developers.facebook.com/apps/427450925200664/settings/basic/

Facebook App ID:
427450925200664

Secret key:
9da417863abd3abf9865ec583d06a6bb



---2---

GitHub for developers:
https://github.com/settings/applications/1495661


Authorization callback URL:
http://localhost:3000/users/auth/github/callback


Client ID:
312477946ec39dcb80ac


Client secrets:
138f3ef1603fe6759819167dcbc5fd63393dfb73



---3---

Google
https://console.cloud.google.com/apis/dashboard?pli=1&project=property-finder-289221&folder=&organizationId=


API key:
AIzaSyDGGhIBg984-J2vyWdsVznEpG2rf0Zk1c8


Authorization callback URL:
http://localhost:3000/users/auth/google_oauth2/callback


Client ID:
351657204801-oao6uomlmhqv2a9l3fupurjb444hqnds.apps.googleusercontent.com


Client secret:
R7s767hu79i4UvV8yFzyRCEi



---4---

C:\Projects\rails_basics\oauth_app\config\credentials.yml.enc
-------------------------------------------------------------


For edit vim file
-----------------

$ EDITOR=vim rails credentials:edit

press i and add changes



---



When done
---------

press ESC + :wq + ENTER --- to exit with saving


or
--


press ESC + :q! + ENTER --- to exit without saving


File encrypted and saved.



---5---

$ rails credentials:show


C:\Users\74955\AppData\Local\Temp\656.credentials.yml
-----------------------------------------------------

facebook:
  facebook_client_id: 427450925200664
  facebook_client_secret: 9da417863abd3abf9865ec583d06a6bb

github:
  github_client_id: 312477946ec39dcb80ac
  github_client_secret: 138f3ef1603fe6759819167dcbc5fd63393dfb73

google:
  google_client_id: 351657204801-oao6uomlmhqv2a9l3fupurjb444hqnds.apps.googleusercontent.com
  google_client_secret: R7s767hu79i4UvV8yFzyRCEi

secret_key_base: 23960f33178f13b9ded84bbb7c5aaa28625fbc6167f2c7e1c20da0adb2dd9b4b965d2768c1fc4f502b90256de18098e5b341b5e856f166fddc01914e02c9c8d6



---



$ rails c

> Rails.application.credentials.dig(:facebook, :facebook_client_secret)

=> "9da417863abd3abf9865ec583d06a6bb"



---7---

C:\Projects\rails_basics\oauth_app\config\initializers\devise.rb
----------------------------------------------------------------

#config.omniauth :github, 'APP_ID', 'APP_SECRET', scope: 'user,public_repo'

  config.omniauth :facebook, Rails.application.credentials.dig(:facebook, :facebook_client_id),
  Rails.application.credentials.dig(:facebook, :facebook_client_secret), scope: 'public_profile,email'

  config.omniauth :github, Rails.application.credentials.dig(:github, :github_client_id),
  Rails.application.credentials.dig(:github, :github_client_secret), scope: 'user,public_repo'

  config.omniauth :google_oauth2, Rails.application.credentials.dig(:google, :google_client_id),
  Rails.application.credentials.dig(:google, :google_client_secret), scope: 'userinfo.email,userinfo.profile'



---8---

$ cd 'c:\Projects\rails_basics\oauth_app\config\initializers\session_store.rb'

Rails.application.config.session_store :active_record_store, key: '_devise_omniauth_session'



---9---

$ rails g migration update_users

invoke  active_record
create    db/migrate/20210312165207_update_users.rb


class UpdateUsers < ActiveRecord::Migration[6.0]
  def change
    add_column :users, :provider, :string, limit: 50, null: false, default: ''
    add_column :users, :uid, :string, limit: 500, null: false, default: ''
  end
end



$ rails g migration create_sessions

invoke  active_record
create    db/migrate/20210312165940_create_sessions.rb



class CreateSessions < ActiveRecord::Migration[6.0]
  def change
    create_table :sessions do |t|
      t.string :session_id, null: false
      t.text :data

      t.timestamps
    end
    add_index :sessions, :session_id, unique: true
    add_index :sessions, :updated_at
  end
end


$ rails db:migrate



---10---

C:\Projects\rails_basics\oauth_app\app\models\user.rb
-----------------------------------------------------

class User < ApplicationRecord
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable

  devise :database_authenticatable, :registerable,
  :recoverable, :rememberable, :validatable, :omniauthable,
  omniauth_providers: [ :facebook, :github, :google_oauth2 ]

  def self.create_from_provider_data(provider_data)
    where(provider: provider_data.provider, uid: provider_data.uid).first_or_create do |user|
      user.email = provider_data.info.email
      user.password = Devise.friendly_token[ 0, 20 ]
    end
  end
end



---11---

$ rails g controller omniauth



---12---

C:\Projects\rails_basics\oauth_app\app\controllers\omniauth_controller.rb
-------------------------------------------------------------------------

class OmniauthController < ApplicationController
  def facebook
    @user = User.create_from_provider_data(request.env['omniauth.auth'])

    if @user.persisted?
      sign_in_and_redirect @user
    else
      flash[:error] = 'There was a problem signing you in through Facebook. Please register or try signing in later.'
      redirect_to new_user_registration_url
    end
  end

  def github
    @user = User.create_from_provider_data(request.env['omniauth.auth'])

    if @user.persisted?
      sign_in_and_redirect @user
    else
      flash[:error] = 'There was a problem signing you in through Github. Please register or try signing in later.'
      redirect_to new_user_registration_url
    end
  end

  def google_oauth2
    @user = User.create_from_provider_data(request.env['omniauth.auth'])

    if @user.persisted?
      sign_in_and_redirect @user
    else
      flash[:error] = 'There was a problem signing you in through Google. Please register or try signing in later.'
      redirect_to new_user_registration_url
    end
  end

  def failure
    flash[:error] = 'There was a problem signing you in. Please register or signing in later.'
    redirect_to new_user_registration_url
  end
end



---13---

C:\Projects\rails_basics\oauth_app\app\views\devise\shared\_links.html.erb
--------------------------------------------------------------------------

<%- if devise_mapping.omniauthable? %>
  <%- resource_class.omniauth_providers.each do |provider| %>
    <%= link_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), method: :post, class: 'text-decoration-none' %><br />
  <% end %>
<% end %>




add
---


method: :post / button_to

customize devise pages!



---14---

routes.rb
---------

Rails.application.routes.draw do
  devise_for :users, controllers: { omniauth_callbacks: 'omniauth' }
  root to: 'public#home'
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

OmniAuth Facebook for insta_clone
---------------------------------


---1---

gem 'omniauth-facebook'

https://github.com/simi/omniauth-facebook
https://medium.com/@jvanier/omniauth-on-rails-4e0180e6a69e
https://www.youtube.com/watch?v=Dd8dOAL6WYs



---2---

$ rails g migration AddOmniauthToAccounts provider:string uid:string



---3---

$ rake db:migrate



---4---

config.omniauth :facebook, 'APP_ID', 'APP_SECRET'


gem 'omniauth-facebook', '~> 8.0'
gem "omniauth", "~> 1.9.1"





---5---

class Accounts::OmniauthCallbacksController < Devise::OmniauthCallbacksController
  def facebook
    @account = Account.from_omniauth(request.env['omniauth.auth'])

    if @account.persisted?
      sign_in_and_redirect @account, event: :authentication
      set_flash_message(:notice, :success, kind: 'Facebook') if is_navigational_format?
    else
      session['devise.facebook_data'] = request.env['omniauth.auth']
      redirect_to new_account_registration_url
    end
  end

  def failure
    redirect_to root_path
  end
end



---



https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview
https://developers.facebook.com/




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Oauth authentication tutorial
-----------------------------


ruby gem for oauth authentication
---------------------------------


https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview
https://github.com/cookpad/omniauth-rails_csrf_protection

gem "omniauth-rails_csrf_protection"



---



Devise Authentication Guide with GitHub OmniAuth for Rails Application (tutorial)
---------------------------------------------------------------------------------

https://salmaeng71.medium.com/devise-authentication-guide-with-github-omniauth-for-rails-application-220aa52d5b82



---



Oauth: list of strategies guide
-------------------------------

https://github.com/omniauth/omniauth/wiki/List-of-Strategies



---



OmniAuth with multiple models guide
-----------------------------------

https://github.com/heartcombo/devise/wiki/OmniAuth-with-multiple-models



---



github_login app oauth callback path
------------------------------------

http://localhost:3000/users/auth/github/callback



---



Oauth twitter for Rails app
---------------------------

$ bundle add omniauth-twitter omniauth-rails_csrf_protection




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Devise LDAP
-----------


https://github.com/cschiewek/devise_ldap_authenticatable



---



1. Edit Gemfile
---------------

gem 'devise'
gem 'devise_ldap_authenticatable'



2. Setup Devise and Devise LDAP
-------------------------------

$ bundle exec rails g devise:install                            --- Install Devise
$ bundle exec rails g devise User                               --- Create User Model
$ bundle exec rails g devise_ldap_authenticatable:install       --- Install Devise LDAP



3. Edit User Model
------------------

app/models/user.rb
------------------

class User < ApplicationRecord
  devise :ldap_authenticatable, :rememberable, :trackable
end



4. Edit Migration File
----------------------

db/migrate/XXXXXXXXXX_devise_create_users.rb
--------------------------------------------



5. Initial settings for Devise
------------------------------

config/initializers/devise.rb
-----------------------------

config.ldap_logger = true                                         --- Enable logging LDAP Query
config.ldap_create_user = true                                    --- All valid AD users can log in and automatically create user records.
config.ldap_update_password = false                               --- Make sure that password change is not written back to AD.
config.ldap_use_admin_to_bind = true                              --- Use Administrator in bind at the time of LDAP authentication.
config.authentication_keys = [:username]                          --- Key used for authentication. This time, use the username of the User model.
config.case_insensitive_keys = [:username]                        --- Does not distinguish case of key
config.strip_whitespace_keys = [:username]                        --- Delete the blanks contained in the key



6. ldap.yml Settings
--------------------

config/ldap.yml
---------------

development:
  host: <YOUR DOMAIN CONTROLLER>
  port: 389
  attribute: sAMAccountName
  base: CN=Users,DC=example,DC=com
  admin_user: CN=Administrator,CN=Users,DC=example,DC=com
  admin_password: <admin_user password>
  ssl: false



7. Create and edit a View
-------------------------

$ bundle exec rails g devise:views users -v sessions

app/views/users/sessions/new.html.erb
-------------------------------------

<h2>Log in</h2><%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
  <div class="field">
    <%= f.label :username, "Windows Account Name" %><br />
    <%= f.text_field :username, autofocus: true, autocomplete: "username" %>
  </div>  <div class="field">
    <%= f.label :password %><br />
    <%= f.password_field :password, autocomplete: "current-password" %>
  </div>  <% if devise_mapping.rememberable? %>
    <div class="field">
      <%= f.check_box :remember_me %>
      <%= f.label :remember_me %>
    </div>
  <% end %>  <div class="actions">
    <%= f.submit "Log in" %>
  </div>
<% end %><%= render "users/shared/links" %>



8. Generate a Controller
------------------------

$ bundle exec rails g devise:controllers users -c=sessions


app/controllers/users/sessions_controller.rb
--------------------------------------------

class Users::SessionsController < Devise::SessionsController
  before_action :configure_sign_in_params, only: [:create]

  # GET /resource/sign_in
  def new
    super
  end

  # POST /resource/sign_in
  def create
    super
  end

  # DELETE /resource/sign_out
  def destroy
    super
  endprotected

  def configure_sign_in_params
    devise_parameter_sanitizer.permit(:sign_in, keys: [:username])
  end
end



9. Create a view to display after login
---------------------------------------

$ bundle exec rails g controller StaticPages home


app/views/static_pages/home.html.erb
------------------------------------

<h1>StaticPages#home</h1>
<p>Find me in app/views/static_pages/home.html.erb</p>
<p>Welcome <%= current_user.username %> !</p>
<%= link_to  "logout", destroy_user_session_path %>



10. Edit a routes
-----------------

config/routes.rb
----------------

Rails.application.routes.draw do
  get 'home', to: 'static_pages#home'  devise_for :users, controllers: {
    sessions: 'users/sessions'
  }  

  devise_scope :user do
    root to: 'users/sessions#new'
    get 'sign_in', to: 'users/sessions#new'
    get '/users/sign_out', to: 'users/sessions#destroy'
  end
end



app/controllers/application_controller.rb
-----------------------------------------

class ApplicationController < ActionController::Base
  rescue_from DeviseLdapAuthenticatable::LdapException do |exception|
    render :text => exception, :status => 500
  end  def after_sign_in_path_for(resource)
    home_path
  end
end



11. Do login
------------

localhost:3000
--------------

$ bundle exec rails s



app/controllers/static_pages_controller.rb
------------------------------------------

class StaticPagesController < ApplicationController
  before_action :authenticate_user!

  def home
  end
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Turbo devise controller
-----------------------


turbo_devise_controller.rb
--------------------------

class TurboDeviseController < ApplicationController
  class Responder < ActionController::Responder
    def to_turbo_stream
      controller.render(options.merge(formats: :html))
    rescue ActionView::MissingTemplate => e
      if get?
        raise e
      elsif has_errors? && default_action
        render rendering_options.merge(formats: :html, status: :unprocessable_entity)
      else
        redirect_to navigation_location
      end
    end
  end

  self.responder = Responder
  respond_to :html, :turbo_stream
end



---



devise.rb
---------

class TurboFailureApp < Devise::FailureApp
  def respond
    if request_format == :turbo_stream
      :redirect
    else
      super
    end
  end

  def skip_format?
    %[ html turbo_stream ].include?(request_format.to_s)
  end
end



Devise.setup do |config|
  config.parent_controller = "TurboDeviseController"
  config.navigational_formats = [ '*/*', :html, :turbo_stream ]

  config.warden do |manager|
    manager.failure_app = TurboFailureApp
  end
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails 6 (and 5): User Accounts with 3 types of Roles – Devise, Rails Admin, CanCanCan
-------------------------------------------------------------------------------------


https://altalogy.com/blog/rails-6-user-accounts-with-3-types-of-roles/



---



Admin Users – Rails Admin gem
-----------------------------


---1---

gem 'rails_admin', git: 'https://github.com/sferik/rails_admin.git'



---2---

$ bundle install
$ rails g rails_admin:install



---3---

config/initializers/rails_admin.rb
----------------------------------

class Ball < ActiveRecord::Base
  validates :name, presence: true
  belongs_to :player

  rails_admin do
    configure :player do
      label 'Owner of this ball: '
    end
  end
end



---4---

http://localhost:3000/admin



---



Authorization – CanCanCan
-------------------------


---1---

gem 'cancancan'



---2---

$ bundle install



---3---

$ rails g cancan:ability



---4---

$ touch models/ability.rb



---5---

$ rails generate migration add_roles_to_users superadmin_role:boolean supervisor_role:boolean user_role:boolean



---6---

Open db/migrate/xxx_add_roles_to_users.rb and adjust the code
-------------------------------------------------------------

def change
  add_column :users, :superadmin_role, :boolean, default: false
  add_column :users, :supervisor_role, :boolean, default: false
  add_column :users, :user_role, :boolean, default: true
end


$ rake db:migrate



To verify current user’s role, you can use
------------------------------------------

current_user.superadmin_role?
current_user.supervisor_role?
current_user.user_role?



---7---


Views
-----

<% if current_user.superadmin_role? || current_user.supervisor_role? %>
  <p>Visible only for superadmins and supervisors! </p>
<% end %>

<% if can? :manage, User %>
  <p>Visible only for superadmins and supervisors! </p>
<% end %>



---8---

And in app/model/ability.rb
---------------------------

class Ability
  include CanCan::Ability

  def initialize(user)
    user ||= User.new # guest user (not logged in)

    if user.superadmin_role?
      can :manage, :all
    end

    if user.supervisor_role?
      can :manage, User
    end
  end
end



---



Controllers
-----------


---1---

To authorize user access to controller’s actions, let’s add the following to a specific controller
--------------------------------------------------------------------------------------------------

load_and_authorize_resource



---2---

Rails Admin and CanCanCan
-------------------------

configure config/initializers/rails_admin.rb
--------------------------------------------

config.authorize_with :cancan



---3---

modify app/model/ability.rb
---------------------------

user ||= User.new

if user.superadmin_role?
  can :manage, :all
  can :access, :rails_admin
  can :manage, :dashboard
end

if user.supervisor_role?
  can :manage, User
end



---4---

Manage User accounts
--------------------

add can :manage, :all for any user in app/models/ability.rb
-----------------------------------------------------------

user ||= User.new

can :manage, :all

if user.superadmin_role?
  can :manage, :all
  can :access, :rails_admin
  can :manage, :dashboard
end

if user.supervisor_role?
  can :manage, User
end



---5---

$ rails generate migration add_superadmin



---6---

def change
  User.create! do |u|
    u.email     = 'test_admin@test.com'
    u.password  = 'password'
    u.superadmin_role = true
  end
end



---7---

$ rails db:migrate



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Simple form Rails
-----------------


gem 'simple_form'



---



$ rails generate simple_form:install
$ rails generate simple_form:install --bootstrap
$ rails generate simple_form:install --foundation



---



Country Select
--------------

Gemfile
-------

gem 'country_select'




simple_form.rb initializer
--------------------------

config.input_mappings = { /country/ => :string }



---



http://simple-form-bootstrap.plataformatec.com.br/




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

simple form usage
-----------------


some.html.erb
-------------

<%= simple_form_for @user do |f| %>
  <%= f.input :username %>
  <%= f.input :password %>
  <%= f.button :submit %>
<% end %>




---




simple form default label
-------------------------

<%= simple_form_for @user do |f| %>
  <%= f.input :username, label: 'Your username please', error: 'Username is mandatory, please specify one' %>
  <%= f.input :password, hint: 'No special characters.' %>
  <%= f.input :email, placeholder: 'user@domain.com' %>
  <%= f.input :remember_me, inline_label: 'Yes, remember me' %>
  <%= f.button :submit %>
<% end %>




---




labels, hints, errors
---------------------

<%= simple_form_for @user do |f| %>
  <%= f.input :username, label_html: { class: 'my_class' }, hint_html: { class: 'hint_class' } %>
  <%= f.input :password, hint: false, error_html: { id: 'password_error' } %>
  <%= f.input :password_confirmation, label: false %>
  <%= f.button :submit %>
<% end %>




---




labels, hints, errors
---------------------

<%= simple_form_for @user do |f| %>
  <%= f.input :username, input_html: { class: 'special' } %>
  <%= f.input :password, input_html: { maxlength: 20 } %>
  <%= f.input :remember_me, input_html: { value: '1' } %>
  <%= f.button :submit %>
<% end %>




---




input_html
----------

<%= simple_form_for @user, defaults: { input_html: { class: 'default_class' } } do |f| %>
  <%= f.input :username, input_html: { class: 'special' } %>
  <%= f.input :password, input_html: { maxlength: 20 } %>
  <%= f.input :remember_me, input_html: { value: '1' } %>
  <%= f.button :submit %>
<% end %>




---




wrapper_html
------------

<%= simple_form_for @user do |f| %>
  <%= f.input :username, wrapper_html: { class: 'username' } %>
  <%= f.input :password, wrapper_html: { id: 'password' } %>
  <%= f.input :remember_me, wrapper_html: { class: 'options' } %>
  <%= f.button :submit %>
<% end %>




---




required
--------

<%= simple_form_for @user do |f| %>
  <%= f.input :name, required: false %>
  <%= f.input :username %>
  <%= f.input :password %>
  <%= f.button :submit %>
<% end %>




---




default input type
------------------

<%= simple_form_for @user do |f| %>
  <%= f.input :username %>
  <%= f.input :password %>
  <%= f.input :description, as: :text %>
  <%= f.input :accepts,     as: :radio_buttons %>
  <%= f.button :submit %>
<% end %>




---




disabled
--------

<%= simple_form_for @user do |f| %>
  <%= f.input :username, disabled: true, hint: 'You cannot change your username.' %>
  <%= f.button :submit %>
<% end %>




---




error and full_errors helpers
-----------------------------

<%= simple_form_for @user do |f| %>
  <%= f.label :username %>
  <%= f.input_field :username %>
  <%= f.hint 'No special characters, please!' %>
  <%= f.error :username, id: 'user_name_error' %>
  <%= f.full_error :token %>
  <%= f.submit 'Save' %>
<% end %>




---




input_field helper
------------------

simple_form_for @user do |f|
  f.input_field :name
  f.input_field :remember_me, as: :boolean
end


<form>
  <input class="string required" id="user_name" maxlength="255" name="user[name]" size="255" type="text">
  <input name="user[remember_me]" type="hidden" value="0">
  <label class="checkbox">
    <input class="boolean optional" id="user_published" name="user[remember_me]" type="checkbox" value="1">
  </label>
</form>




---




inline for check boxes
----------------------

simple_form_for @user do |f|
  f.input_field :name
  f.input_field :remember_me, as: :boolean, boolean_style: :inline
end



<form>
  <input class="string required" id="user_name" maxlength="255" name="user[name]" size="255" type="text">
  <input name="user[remember_me]" type="hidden" value="0">
  <input class="boolean optional" id="user_remember_me" name="user[remember_me]" type="checkbox" value="1">
</form>




---




collections
-----------

select
------

<%= simple_form_for @user do |f| %>
  <%= f.input :user %>
  <%= f.input :age, collection: 18..60 %>
  <%= f.button :submit %>
<% end %>




---




label_method
------------

<%= simple_form_for @user do |f| %>
  <%= f.input :gender, as: :radio_buttons, collection: [['0', 'female'], ['1', 'male']], label_method: :second, value_method: :first %>
<% end %>



= f.association :user, label_method: :username




---




prompt, selected, slim
----------------------

= f.input :age, collection: 18..60, prompt: "Select your age", selected: 21




---




group, slim
-----------

= f.input :country_id, collection: @continents, as: :grouped_select, group_method: :countries




---




time_zone, country helpers
--------------------------

= f.input :residence_country, priority: [ "Brazil" ]
= f.input :time_zone, priority: /US/
= f.input :shipping_country, priority: [ "Brazil" ], collection: [ "Australia", "Brazil", "New Zealand"]







Associations
------------

models
------

class User < ActiveRecord::Base
  belongs_to :company
  has_and_belongs_to_many :roles
end

class Company < ActiveRecord::Base
  has_many :users
end

class Role < ActiveRecord::Base
  has_and_belongs_to_many :users
end



_form.html.erb
--------------

<%= simple_form_for @user do |f| %>
  <%= f.input :name %>
  <%= f.association :company %>
  <%= f.association :roles %>
  <%= f.button :submit %>
<% end %>




---




change types, slim
------------------

= f.association :company, as: :radio_buttons
= f.association :roles,   as: :check_boxes




---




prompt, slim
------------

= f.association :company, collection: Company.active.order(:name), prompt: "Choose a Company"




---




buttons
-------

<%= simple_form_for @user do |f| %>
  <%= f.input :name %>
  <%= f.button :submit %>
<% end %>




---




<%= f.button :submit, "Custom Button Text", class: "my-button" %>




---




<%= f.button :button, "Custom Button Text" %>

<%= f.button :button do %>
  Custom Button Text
<% end %>






wrapping rails form helpers
---------------------------

<%= f.input :role do %>
  <%= f.select :role, Role.all.map { |r| [r.name, r.id, { class: r.company.id }] }, include_blank: true %>
<% end %>




extra helpers, like fields_for
------------------------------

form_for @user do |f|
  f.simple_fields_for :posts do |posts_form|
    # Here you have all simple_form methods available
    posts_form.input :title
  end
end




---




collection radio buttons, simple form
-------------------------------------

form_for @user do |f|
  f.collection_radio_buttons :options, [[true, 'Yes'], [false, 'No']], :first, :last
end



<input id="user_options_true" name="user[options]" type="radio" value="true" />
<label class="collection_radio_buttons" for="user_options_true">Yes</label>
<input id="user_options_false" name="user[options]" type="radio" value="false" />
<label class="collection_radio_buttons" for="user_options_false">No</label>




---




collection check boxes, simple form
-----------------------------------

form_for @user do |f|
  f.collection_check_boxes :options, [[true, 'Yes'], [false, 'No']], :first, :last
end



<input name="user[options][]" type="hidden" value="" />
<input id="user_options_true" name="user[options][]" type="checkbox" value="true" />
<label class="collection_check_box" for="user_options_true">Yes</label>
<input name="user[options][]" type="hidden" value="" />
<input id="user_options_false" name="user[options][]" type="checkbox" value="false" />
<label class="collection_check_box" for="user_options_false">No</label>




---




use associations
----------------

form_for @user do |f|
  f.collection_check_boxes :role_ids, Role.all, :id, :name # using :roles here is not going to work.
end




---




item_label_class, slim
----------------------

= f.collection_check_boxes :role_ids, Role.all, :id, :name, item_label_class: 'my-custom-class'




---




available input types and defaults for each column type
-------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------

Mapping                                             Generated HTML Element                              Database Column Type

----------------------------------------------------------------------------------------------------------------------------------------------------------
boolean                                             input[type=checkbox]                                boolean
----------------------------------------------------------------------------------------------------------------------------------------------------------
string                                              input[type=text]                                    string
----------------------------------------------------------------------------------------------------------------------------------------------------------
citext                                              input[type=text]                                    citext
----------------------------------------------------------------------------------------------------------------------------------------------------------
email                                               input[type=email]                                   string with name =~ /email/
----------------------------------------------------------------------------------------------------------------------------------------------------------
url                                                 input[type=url]                                     string with name =~ /url/
----------------------------------------------------------------------------------------------------------------------------------------------------------
tel                                                 input[type=tel]                                     string with name =~ /phone/
----------------------------------------------------------------------------------------------------------------------------------------------------------
password                                            input[type=password]                                string with name =~ /password/
----------------------------------------------------------------------------------------------------------------------------------------------------------
search                                              input[type=search]                                  -
----------------------------------------------------------------------------------------------------------------------------------------------------------
uuid                                                input[type=text]                                    uuid
----------------------------------------------------------------------------------------------------------------------------------------------------------
color                                               input[type=color]                                   string
----------------------------------------------------------------------------------------------------------------------------------------------------------
text                                                textarea                                            text
----------------------------------------------------------------------------------------------------------------------------------------------------------
hstore                                              textarea                                            hstore
----------------------------------------------------------------------------------------------------------------------------------------------------------
json                                                textarea                                            json
----------------------------------------------------------------------------------------------------------------------------------------------------------
jsonb                                               textarea                                            jsonb
----------------------------------------------------------------------------------------------------------------------------------------------------------
file                                                input[type=file]                                    string responding to file methods
----------------------------------------------------------------------------------------------------------------------------------------------------------
hidden                                              input[type=hidden]                                  -
----------------------------------------------------------------------------------------------------------------------------------------------------------
integer                                             input[type=number]                                  integer
----------------------------------------------------------------------------------------------------------------------------------------------------------
float                                               input[type=number]                                  float
----------------------------------------------------------------------------------------------------------------------------------------------------------
decimal                                             input[type=number]                                  decimal
----------------------------------------------------------------------------------------------------------------------------------------------------------
range                                               input[type=range]                                   -
----------------------------------------------------------------------------------------------------------------------------------------------------------
datetime                                            datetime select                                     datetime/timestamp
----------------------------------------------------------------------------------------------------------------------------------------------------------
date                                                date select                                         date
----------------------------------------------------------------------------------------------------------------------------------------------------------
time                                                time select                                         time
----------------------------------------------------------------------------------------------------------------------------------------------------------
select                                              select                                              belongs_to / has_many / has_and_belongs_to_many
----------------------------------------------------------------------------------------------------------------------------------------------------------
radio_buttons                                       collection of input[type=radio]                     belongs_to associations
----------------------------------------------------------------------------------------------------------------------------------------------------------
check_boxes                                         collection of input[type=checkbox]                  has_many / has_and_belongs_to_many
----------------------------------------------------------------------------------------------------------------------------------------------------------
country                                             select (countries as options)                       string with name =~ /country/
----------------------------------------------------------------------------------------------------------------------------------------------------------
time_zone                                           select (timezones as options)                       string with name =~ /time_zone/
----------------------------------------------------------------------------------------------------------------------------------------------------------




---




custom inputs simple form
-------------------------

app/inputs/currency_input.rb
----------------------------

class CurrencyInput < SimpleForm::Inputs::Base
  def input(wrapper_options)
    merged_input_options = merge_wrapper_options(input_html_options, wrapper_options)

    "$ #{@builder.text_field(attribute_name, merged_input_options)}".html_safe
  end
end




view.html.erb
-------------

= f.input :money, as: :currency




---




new class for customing simle form
----------------------------------

app/inputs/date_time_input.rb
-----------------------------

class DateTimeInput < SimpleForm::Inputs::DateTimeInput
  def input(wrapper_options)
    template.content_tag(:div, super)
  end
end




---




add new class to all select fields
----------------------------------

app/inputs/collection_select_input.rb
-------------------------------------

class CollectionSelectInput < SimpleForm::Inputs::CollectionSelectInput
  def input_html_classes
    super.push('chosen')
  end
end




---




context to simple form for conflicts
------------------------------------

app/inputs/custom_inputs/numeric_input
--------------------------------------

module CustomInputs
  class NumericInput < SimpleForm::Inputs::NumericInput
    def input_html_classes
      super.push('no-spinner')
    end
  end
end






config/simple_form.rb
---------------------

config.custom_inputs_namespaces << "CustomInputs"




---




custom form builder, simple form
--------------------------------

def custom_form_for(object, *args, &block)
  options = args.extract_options!
  simple_form_for(object, *(args << options.merge(builder: CustomFormBuilder)), &block)
end




---




ingerits simple form
--------------------

class CustomFormBuilder < SimpleForm::FormBuilder
  def input(attribute_name, options = {}, &block)
    super(attribute_name, options.merge(label: false), &block)
  end
end




---




I18n, simple form
-----------------

costomize forms
---------------

form.yml
--------

en:
  simple_form:
    labels:
      user:
        username: 'User name'
        password: 'Password'
    hints:
      user:
        username: 'User name to sign in.'
        password: 'No special characters, please.'
    placeholders:
      user:
        username: 'Your username'
        password: '****'
    include_blanks:
      user:
        age: 'Rather not say'
    prompts:
      user:
        role: 'Select your role'





---




en:
  simple_form:
    labels:
      user:
        username: 'User name'
        password: 'Password'
        edit:
          username: 'Change user name'
          password: 'Change password'





---




en:
  simple_form:
    labels:
      defaults:
        username: 'User name'
        password: 'Password'
        new:
          username: 'Choose a user name'
    hints:
      defaults:
        username: 'User name to sign in.'
        password: 'No special characters, please.'
    placeholders:
      defaults:
        username: 'Your username'
        password: '****'





---




pass translate
--------------

= f.input :role, prompt: :translate




---




roles
-----

= f.input :role, collection: [:admin, :editor]




---




en:
  simple_form:
    options:
      user:
        role:
          admin: 'Administrator'
          editor: 'Editor'





---




en:
  activerecord:
    models:
        admin/user: User
    attributes:
        admin/user:
            name: Name





---




en:
  simple_form:
    labels:
      posts:
        title: 'Post title'
    hints:
      posts:
        title: 'A good title'
    placeholders:
      posts:
        title: 'Once upon a time...'









configurations
--------------

wrappers API, simple form
-------------------------


config.wrappers tag: :div, class: :input, error_class: :field_with_errors, valid_class: :field_without_errors do |b|
  # Form extensions

  b.use :html5
  b.optional :pattern
  b.use :maxlength
  b.use :placeholder
  b.use :readonly


  # Form components

  b.use :label_input
  b.use :hint,  wrap_with: { tag: :span, class: :hint }
  b.use :error, wrap_with: { tag: :span, class: :error }
end



:label         --- <label> tag alone
:input         --- <input> tag alone
:label_input   --- <label> and the <input> tags
:hint          --- hint for the input
:error         --- error for the input




---





create new form components wit API simple form
----------------------------------------------

config.wrappers do |b|
  b.use :placeholder
  b.use :label_input

  b.wrapper tag: :div, class: 'separator' do |component|
    component.use :hint,  wrap_with: { tag: :span, class: :hint }
    component.use :error, wrap_with: { tag: :span, class: :error }
  end
end




---




passing options for simple form components
------------------------------------------

config.wrappers do |b|
  b.use :label_input, class: 'label-input-class', error_class: 'is-invalid', valid_class: 'is-valid'
end




---




naming custom component
-----------------------

config.wrappers do |b|
  b.use :placeholder
  b.use :label_input

  b.wrapper :my_wrapper, tag: :div, class: 'separator', html: { id: 'my_wrapper_id' } do |component|
    component.use :hint,  wrap_with: { tag: :span, class: :hint }
    component.use :error, wrap_with: { tag: :span, class: :error }
  end
end




---




view.html.erb
-------------

= f.input :name, my_wrapper: false
= f.input :name, my_wrapper_html: { id: 'special_id' }
= f.input :name, my_wrapper_tag: :p




---




config.wrappers :small do |b|
  b.use :placeholder
  b.use :label_input
end




---




optional
--------

config.wrappers placeholder: false do |b|
  b.use :placeholder
  b.use :label_input

  b.wrapper tag: :div, class: 'separator' do |component|
    component.optional :hint, wrap_with: { tag: :span, class: :hint }
    component.use :error, wrap_with: { tag: :span, class: :error }
  end
end




---




unless_blank
------------

b.wrapper tag: :span, class: 'hint', unless_blank: true do |component|
  component.optional :hint
end




---




custom components
-----------------

view.html.erb
-------------

<%= simple_form_for @blog do |f| %>
  <div class="row">
    <div class="span1 number">
      1
    </div>
    <div class="span8">
      <%= f.input :title %>
    </div>
  </div>
  <div class="row">
    <div class="span1 number">
      2
    </div>
    <div class="span8">
      <%= f.input :body, as: :text %>
    </div>
  </div>
<% end %>




---




<%= simple_form_for @blog, wrapper: :with_numbers do |f| %>
  <%= f.input :title, number: 1 %>
  <%= f.input :body, as: :text, number: 2 %>
<% end %>




---




config/initializers/simple_form.rb
----------------------------------

Dir[Rails.root.join('lib/components/**/*.rb')].each { |f| require f }




---




lib/components/numbers_component.rb
-----------------------------------

module NumbersComponent
  def number(wrapper_options = nil)
    @number ||= begin
      options[:number].to_s.html_safe if options[:number].present?
    end
  end
end

SimpleForm.include_component(NumbersComponent)




---




config/initializers/simple_form.rb
----------------------------------

config.wrappers :with_numbers, tag: 'div', class: 'row', error_class: 'error' do |b|
  b.use :html5
  b.use :number, wrap_with: { tag: 'div', class: 'span1 number' }

  b.wrapper tag: 'div', class: 'span8' do |ba|
    ba.use :placeholder
    ba.use :label
    ba.use :input
    ba.use :error, wrap_with: { tag: 'span', class: 'help-inline' }
    ba.use :hint,  wrap_with: { tag: 'p', class: 'help-block' }
  end
end







HTML5 notice, simple form
-------------------------

config.wrappers tag: :div do |b|
  b.use :html5
  b.use :label_input
end



config.wrappers tag: :div do |b|
  b.use :label_input
end




---




desable borowser validation
---------------------------

SimpleForm.browser_validations = false




---




novalidate
----------

<%= simple_form_for(resource, html: { novalidate: true }) do |form| %>




---




expires_at
----------

<%= f.input :expires_at, as: :date, html5: true %>




---




include module
--------------

class User
  include ActiveModel::Model

  attr_accessor :id, :name
end




---




simple delegator
----------------

class UserPresenter < SimpleDelegator
  def to_model
    self
  end
end




---




define required all methods
---------------------------

class User
  extend ActiveModel::Naming

  attr_accessor :id, :name

  def to_model
    self
  end

  def to_key
    id
  end

  def persisted?
    false
  end
end




---




not implemented
---------------

class User
  attr_accessor :id, :name

  def persisted?
    false
  end
end



<%= simple_form_for(@user, as: :user, method: :post, url: users_path) do |f| %>
  <%= f.input :name %>
  <%= f.submit 'New user' %>
<% end %>




---






simple form documentation
-------------------------

http://rubydoc.info/github/heartcombo/simple_form/main/frames








-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

useful simple form helper snippets
----------------------------------


collection select
-----------------

<%= simple_form_for @bill do |f| %>
  <%= f.association :location, collection: @locations, priority: @bill.location %>
  <%= f.button :submit %>
<% end %>




---




<%= 
  f.input        :location_id, 
  collection:    @locations, 
  label_method:  :location_name, 
  value_method:  :id, 
  label:         "Location", 
  include_blank: false, 
  selected:      @bill.location_id 
%>



<%= f.input :category, collection: Category.all, label_method: :name, value_method: :id, label: "Category", include_blank: false, selected: @pack.category_id %>
<%= f.collection_select :category_id, Category.all, :id, :name, promt: "Choose a category", class: "form-dropdown" %>





---




collection select with slim
---------------------------

= f.input :country_id, :collection => all_countries, :selected => selected_country_id




---




set values on collection
------------------------

= simple_form_for :credits, url: "/accounts/#{@account.id}/topup" do |f|
  = f.collection_check_boxes :amount, [[100, 500], [500, 'a'], [1000, 'b'], [5000, 'c'], [10000, 'd']]
= f.button :submit






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails API - active_model_serializers
------------------------------------


Gemfile
-------

gem 'active_model_serializers', '~> 0.10.2'

$ bundle



---



guide
-----

https://github.com/rails-api/active_model_serializers/tree/0-10-stable
https://github.com/rails-api/active_model_serializers




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ROR primitive blog guide
------------------------


$ rails new blog
$ rails server



---



http://localhost:3000



---



$ rails server -e (envairment key)
$ rails server -e development



---



$ rails server
$ rails generate Some_Generator params
$ rails g



---



Generators
----------

controller
model



---



$ rails g controller home index


http://localhost:3000/home/index



---



$ rails g model Article title:string text:text



---



app/db/migrate/111_create_migrate.rb
------------------------------------

class Create Articles < ActiveRecord::Migration
  def change
    create_table :articles do |t|
      t.string :title
      t.text :text

      t.timestamps
    end
  end
end



---



app/models/article.rb
---------------------

class Article < ActiveRecord::Base
end



---



$ rake db:migrate



---



app/db/development.sqlite3
--------------------------

sqlite3 development.sqlite

.tables



---



articles  schime_migrations

$ rake routes



---



home_index GET /home/index(.:format) home#index



---



blog/config/routes.rb
---------------------

Rails.application.routes.draw do
  get '/' => 'home/index'
end



---



blog/config/routes.rb
---------------------

resources :articles



---



$ rake routs



http://localhost:3000/articles/new
----------------------------------


! Routing error



---



$ rails g controller articles



---



app/controllers/articles_controller.rb
--------------------------------------

class ArticlesController < ApplicationController
end 



---



http://localhost:3000/articles/new
----------------------------------

! Uncknown action




---



app/controllers/articles_controller.rb
--------------------------------------

def new
end



---



class ArticlesController < ApplicationController
  def new
  end
end



---



http://localhost:3000/articles/new
----------------------------------

! Template missing



---



app/views/articles
------------------

new.html.erb
------------

<h1>New article</h1>



---



http://localhost:3000/articles/new
----------------------------------

=> New article



---



app/views/articles/new.html.erb
-------------------------------

<%= from_for :article do |f| %>
  <p>
    <%= f.label :title %>
    <%= f.text_field :title %>
  </p>

  <p>
    <%= f.label :text %>
    <%= f.text_area :text %>
  </p>

  <p>
    <%= f.submit %>
  </p>  
<% end %>



---



$ rake routes



---


...
new_article GET /articles/new articles#new
...

---


new.html.erb:
url: '/articles'(or articles_path)



---



<%= from_for :article, url: articles_path do |f| %>



---



app/controllers/articles_controller.rb
--------------------------------------

def create
end



---



class ArticlesController < ApplicationController
  def new
  end

  def create
  end
end



---



localhost:3000/articles
-----------------------

! Template missing



---



articles_controller.rb
----------------------

render plain: params[:article].inspect



---



def create
  render plain: params[:article].inspect
end



---



localhost:3000/articles
-----------------------

{"title" => "123", "text" => "123"}





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

RUBY ON RAILS, BLOG
-------------------


$ start cmd

C:\new_repeat\ruby_cource\lesson_40_rails_blog\Blog_40>


show page
---------

/terms
/about



---



Add static pages
----------------

1. add controller

$ rails g controller Pages


2. add actions

def some_action
  @info_vaiable = Info_variable.all
end


3. add views

$ touch about.html.erb


4. add routes

get '/index' => 'pages/index'



---




sinatra
-------

1. route (app.rb)
2. view (project/views)



---




Work with dynamic pages, rails
------------------------------

1. Add model
------------

a) create model (rails g model Article string:title text:text)
b) create migration (rake db:migrate)


2. Add routes

a) resource (profile of user)
b) resources (products)


3. Add controller

> rails g controller Articles


4. Create actions in controllers

a) index*
b) new + create
c) edit + update
e) destroy


5. Add views

a) show.html.erb
b) index.html.erb
c) new.html.erb
d) edit.html.erb
e) static.html.erb



---




https://github.com/ro31337/sample-blog



---




delete
------

$ Article.find(2)



---




$ rails console

Article.all
Article.find(id)
@article = Article.find(1)
@article.destroy


$ @article.destroy



---




def destroy
  @article = Article.find(params[:id])
  @article.destroy
end



---




class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  def edit
    @article = Article.find(params[:id])
  end

  def update
    @article = Article.find(params[:id])

    if @article.update(article_params)
      redirect_to @article
    else
      render action: 'edit'
    end
  end

  def destroy
    @article = Article.find(params[:id])
    @article.destroy

    redirect_to articles_path
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end


redirect_to articles_path



---




Go to client
------------

<%= link_to 'Destroy', article_path(article), method: :delete %>



---




<h2>List of articles</h2>

<% @articles.each do |article| %>
  <h3><%= article.title %></h3>
  <p><%= article.text %></p>
  <p>
    <%= link_to 'Show', article_path(article) %> |
    <%= link_to 'Edit', edit_article_path(article) %> |
    <%= link_to 'Destroy', article_path(article), method: :delete %>
  </p>
  <hr>
<% end %>



---



data-method="delete"
ajax



---




<body>
  <h2>List of articles</h2>
<h3>1231123</h3>
<p>xxx</p>
<p>
  <a href="/articles/1">Show</a> |
  <a href="/articles/1/edit">Edit</a> |
  <a rel="nofollow" data-method="delete" href="/articles/1">Destroy</a>
</p>
<hr>
<h3>777</h3>





---




data-method="delete" (HTML5)



---




link_to docs
------------

http://api.rubyonrails.org/classes/ActionViews/Helpers/UrlHelper.html#method-i-link_to



---




<%= link_to 'Destroy', article_path(article), method: :delete, data: { confirm: 'Are you sure?' } %>



---




render
------

method returns action: 'data'



---




call.back



---




comments
--------

$ rails g model ...

http://railsguides.net/advanced-rails-model-generators/



---




Article 1 ------- * Comment

one-to-many



---




$ rails g model Comment author:string body:text article:references



---




$ rails db:migrate
$ sqlite3 development.sqlite



---




comment.rb
----------

class Comment < ApplicationRecord
  belongs_to :article
end



---




20200610232329_create_comments.rb
---------------------------------

class CreateComments < ActiveRecord::Migration[6.0]
  def change
    create_table :comments do |t|
      t.string :auther
      t.text :body
      t.references :article, null: false, foreign_key: true

      t.timestamps
    end
  end
end



---




$ rake db:migrate



---




sqlite> pragma table_info(articles);

cid         name        type        notnull     dflt_value  pk
----------  ----------  ----------  ----------  ----------  ----------
0           id          integer     1                       1
1           title       varchar     0                       0
2           text        text        0                       0
3           created_at  datetime(6  1                       0
4           updated_at  datetime(6  1                       0



sqlite> pragma table_info(comments);


---




pragma_table(table_name);


every 1 comment -> 1 article
every 1 article -> has many comments



---




article.rb
----------

has_many :comments



---




class Article < ApplicationRecord
  has_many :comments
end



---




routes.rb
---------

resource :contacts, only: [:new, :create], path_names: { :new => '' }

resources :articles do
  resources :comments
end



---



Rails.application.routes.draw do
  get 'home/index'
  get 'terms' => 'pages#terms'
  get 'about' => 'pages#about'

  resource :contacts, only: [:new, :create], path_names: { :new => '' }

  resources :articles do
    resources :comments
  end
end



---




$ rake routes



---




$ rails g controller comments



---




comments_controller.rb
----------------------

class CommentsController < ApplicationController
  def create
  end
end



---




$ Comment.all
$ Article.comments


---




$ @article = Article.find(7)
$ @article.comments
$ @article.comments.create({ auther: 'Mike', body: 'Hello' })



---




@article = Article.find(params[:atricle_id])
@article.comments.create({ auter: 'Mike', body: 'Hello'})



---




class CommentsController < ApplicationController
  def create
    @article = Article.find(params[:atricle_id])
    @article.comments.create({ auter: 'Mike', body: 'Hello'})
  end
end



---




private

def comment_params
  params.require(:comment).permit(:auter, :body)
end



---




class CommentsController < ApplicationController
  def create
    @article = Article.find(params[:atricle_id])
    @article.comments.create(comment_params)
  end

  private

  def comment_params
    params.require(:comment).permit(:auter, :body)
  end
end



---




class CommentsController < ApplicationController
  def create
    @article = Article.find(params[:atricle_id])
    @article.comments.create(comment_params)

    redirect_to article_path(@article)
  end

  private

  def comment_params
    params.require(:comment).permit(:author, :body)
  end
end




---



routes
------

article_comments GET    /articles/:article_id/comments(.:format)  comments#index
                 POST   /articles/:article_id/comments(.:format)  comments#create



<%= form_for :article do |f| %>
  <p>Bla</p>
<% end %>


/articles/4/comments
<form action="/articles/3" ...




---



neeed
-----

<form action="/articles/3/comments" ...


NameError in Articles#show

undefined local variable or method `comments_path' for #<#<Class:0x0000000007d71908>:0x0000000007d6b788>
Did you mean?  font_path
Extracted source (around line #10):


<div class="container">
  <%= form_for :comment, url: comments_path do |f| %>
    <p>Blabla</p>
  <% end %>
</div>




---



http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html



collection.build(attributes = {})
---------------------------------

@article.comments                     - collection
([@article, @article.comments.build])



---




$ @article.comments.build



---




<%= form_for([ @article, @article.comments.build ]) do |f| %>



---




<h2><%= @article.title %></h2>
<p>
  <%= @article.text %>
</p>
<p>
  <%= form_for([ @article, @article.comments.build ]) do |f| %>
    <p>
      blabla
    </p>
  <% end %>
</p>


action="/articles/4/comments"



---




.tables
.mode columns
.header on


> SELECT * FROM articles;

> pragma table_info(articles);
> pragma table_info(comments);



---




every comment belonges_to article
every article has_many comments



---




app/models/article_model.rb
---------------------------

has_many :comments



---




routes.rb
---------

resources :articles do
  resources :comments
end



---




https://sql.ru
http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html



---




@article.comments
([@article, @article.comments.build])






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

RUBY ON RAILS, RSPEC, TESTS, CRUD
---------------------------------


http://rutracker.org/forum/viewtopic.php?t=4691636



---




Rails
-----

table: many
model: one
controller: many



---




1 - *

Article     Comment
has_many :comments  belongs_to :article
id      article_id



---




1 - 1

Address     Order
belongs_to :order has_one :address
order_id    id



---




denormalization for fast work (for server)



---




complex-type



---




* - *

Tag (category)    Article     tags.articles
id      id      tag_id
            article_id
has_and_belong_to_many :articles
has_and_belong_to_many :tags



---




Show comments
-------------

article#show
------------

<% @article.comments.each do |comment| %>
  <p>
    <i><%= comment.auther %> said: </i>
    <% comment.body %>
  </p>
<% end %>



---




<h2><%= @article.title %></h2>
<p>
  <%= @article.text %>
</p>

<h2>Comments</h2>

<% @article.comments.each do |comment| %>
  <p>
    <i><%= comment.auther %> said: </i>
    <% comment.body %>
  </p>
<% end %>


<h2>Add comment</h2>

<p>
  <%= form_for([ @article, @article.comments.build ]) do |f| %>
  <p>
    <%= f.label :auther %><br>
    <%= f.text_field :auther %>
  </p>
  <p>
    <%= f.label :body %><br>
    <%= f.text_area :body %>
  </p>
  <p>
    <%= f.submit %>
  </p>
  <% end %>
</p>



---




ActiveRecord
------------

C         R       U         D
create    read    update    delete
-------   -----   -------   --------
.new      .find   .update   .destroy
.save     .all    .delete
.create   .where



---




google
------

ApplicationController params



---




REST
----

GET POST  UPDATE  DELETE

ROY



---




resource
resources ... index



---




resources :... do
  resources :...
end



---




REST - Representeytional State Transfer



---




1 resource -> 1 url (or parametr)



---




Helpfull web resources
----------------------

https://plnkr.co/

https://plnkr.co/plunk/6N2IqTT36tvw4Mt8

Plunker



---




Bootstrap in Planker



---




chrome developer tools
----------------------

mobile phone
------------

iphone 5



---




jsfiddle.net
<script async src="//jsfiddle.net/TheGor/jqt3fhec/embed/"></script>

https://jsfiddle.net/TheGor/jqt3fhec/#&togetherjs=kFC90AwvlK
online frontend tool

TheGor - Log in



---




google
------

ruby fiddle
-----------

https://www.onlinegdb.com/online_ruby_compiler



---




x = 2 != 3
=> true

x = 2 == 3
=> false



---




rspec
framework



---




> gem install rspec



---




$ rspec
No examples found.


Finished in 0.00066 seconds (files took 0.15738 seconds to load)
0 examples, 0 failures



---




describe
it



---




hero_spec.rb
------------

describe Hero do
end



---




$ gem install rspec
$ rspec

No examples found.


Finished in 0.03896 seconds (files took 1.01 seconds to load)
0 examples, 0 failures

touch hero_spec.rb

describe
it


console
-------

$ rspec hero_spec.rb

An error occurred while loading ./hero_spec.rb.
Failure/Error:
  describe Hero do
  end

NameError:
  uninitialized constant Hero
# ./hero_spec.rb:1:in `<top (required)>'
No examples found.


Finished in 0.00004 seconds (files took 0.18927 seconds to load)
0 examples, 0 failures, 1 error occurred outside of examples


not find
--------

Hero



---




hero.rb
-------

class Hero
end



hero_spec.rb
------------

require './hero'

describe Hero do
end


console
-------

$ rspec hero_spec.rb
No examples found.


Finished in 0.00051 seconds (files took 0.2812 seconds to load)
0 examples, 0 failures



---




class Hero
  def initialize(name, health=100)
    @name = name.capitalize
    @health = health
  end

  def name
    @name
  end

  def power_up
    @health += 10
  end

  def power_down
    @health -= 10
  end

  def hero_info
    "#{name} has a health #{@health}"
  end
end


hero = Hero.new 'Mike'

puts hero.name
puts hero.power_up
puts hero.hero_info



---




console
-------

$ rspec hero_spec.rb

Mike
110
Mike has a health 110
No examples found.


Finished in 0.00059 seconds (files took 0.29684 seconds to load)
0 examples, 0 failures



---




hero_rspec.rb
-------------

it "has a capitalized name" do
  hero = Hero.new 'mike'

  expect(hero.name).to eq 'Mike'
end



---




require './hero'

describe Hero do
  it "has a capitalized name" do
    hero = Hero.new 'mike'

    expect(hero.name).to eq 'Mike'
  end
end



---




console
-------

$ rspec hero_spec.rb
.

Finished in 0.01089 seconds (files took 0.27059 seconds to load)
1 example, 0 failures



---




require './hero'

describe Hero do
  it "has a capitalized name" do
    hero = Hero.new 'mike'

    expect(hero.name).to eq 'mike'
  end
end



---




console
-------

$ rspec hero_spec.rb
F

Failures:

1) Hero has a capitalized name
   Failure/Error: expect(hero.name).to eq 'mike'

     expected: "mike"
          got: "Mike"

     (compared using ==)
   # ./hero_spec.rb:7:in `block (2 levels) in <top (required)>'

Finished in 0.16185 seconds (files took 0.26991 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./hero_spec.rb:4 # Hero has a capitalized name



---




require './hero'

describe Hero do
  it "has a capitalized name" do
    hero = Hero.new 'mike'

    expect(hero.name).to eq 'mike'
  end

  it "can power up" do
    hero = Hero.new 'mike'

    expect(hero_power_up).to eq 110
  end
end



---




console
-------

$ rspec hero_spec.rb
FF


Failures
--------

1) Hero has a capitalized name
   Failure/Error: expect(hero.name).to eq 'mike'

     expected: "mike"
          got: "Mike"

     (compared using ==)
   # ./hero_spec.rb:7:in `block (2 levels) in <top (required)>'


2) Hero can power up
   Failure/Error: expect(hero_power_up).to eq 110

   NameError:
     undefined local variable or method `hero_power_up' for #<RSpec::ExampleGroups::Hero "can power up" (./hero_spec.rb:10)>
   # ./hero_spec.rb:13:in `block (2 levels) in <top (required)>'

Finished in 0.03581 seconds (files took 0.26007 seconds to load)
2 examples, 2 failures


Failed examples
---------------

rspec ./hero_spec.rb:4 # Hero has a capitalized name
rspec ./hero_spec.rb:10 # Hero can power up








-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create messages in Rails app guide
----------------------------------

config/routes.rb
----------------


get 'messages/new' => 'messages#new'



---



app/controllers/messages_controller.rb
--------------------------------------

def new 
  @message = Message.new 
end 



---



class MessagesController < ApplicationController
  def index
    @messages = Message.all
  end

  def new
    @message = Message.new
  end
end



---



config/routes.rb
----------------

post 'messages' => 'messages#create'



---



app/controllers/messages_controller.rb
--------------------------------------

private

def message_params 
  params.require(:message).permit(:content) 
end



---



def create 
  @message = Message.new(message_params)

  if @message.save 
    redirect_to '/messages' 
  else 
    render 'new' 
  end 
end 



---



app/views/messages/new.html.erb
-------------------------------

<%= form_for(@message) do |f| %>  
  <div class="field"> 
    <%= f.label :message %><br> 
    <%= f.text_area :content %> 
  </div> 
  <div class="actions"> 
    <%= f.submit "Create" %> 
  </div> 
<% end %>



---



<% @messages.each do |message| %>                     - перебирает каждое сообщение в массиве @messages
@messages                                             - array
<%= message.content %>                                - отобразить его содержимое
<%= message.created_at %>                             - отображение времени его создания



---



<div class="header">
  <div class="container">
    <img src="http://s3.amazonaws.com/codecademy-content/courses/learn-rails/img/logo-1m.svg">
    <h1>Messenger</h1>
  </div>
</div>

<div class="create">
  <div class="container">
    <%= form_for(@message) do |f| %>  
      <div class="field"> 
        <%= f.label :message %><br> 
        <%= f.text_area :content %> 
      </div> 
      <div class="actions"> 
        <%= f.submit "Create" %> 
      </div> 
    <% end %>
  </div>
</div>



---



app/views/messages/index.html.erb
---------------------------------

<%= link_to 'New Message', "messages/new" %>



---



<div class="header">
  <div class="container">
    <img src="http://s3.amazonaws.com/codecademy-content/courses/learn-rails/img/logo-1m.svg">
    <h1>Messenger</h1>
  </div>
</div>

<div class="messages">
  <div class="container">
    <% @messages.each do |message| %> 
      <div class="message"> 
        <p class="content"><%= message.content %></p> 
        <p class="time"><%= message.created_at %></p> 
      </div> 
    <% end %>
    <%= link_to 'New Message', "messages/new" %>
  </div>
</div>



---



http://localhost:8000/messages





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create Signups guide
--------------------


$ rails new innovation-cloud
$ cd innovation-cloud
$ bundle install

$ rails g controller Signups
$ rails g controller Pages

$ touch app/views/signups/new.html.erb
$ touch app/views/pages/thanks.html.erb
$ touch app/assets/stylesheets/pages.css

$ rails g model Signup
$ bundle exec rake db:migrate



---



app/controllers/pages_controller.rb
-----------------------------------

def thanks
  get '/thanks' => 'pages#thanks'
end



---



config/routes.rb
----------------

resources :signups


$ bundle exec rake routes



---



app/controllers/signup_controller.rb
------------------------------------

def new
  @signup = Signup.new
end



---



app/views/signups/new.html.erb
------------------------------

<%= form_for(@signup) do |f| %>
  <%= f.text_field :email, :placeholder => "Email" %>
  <%= f.submit "Join", :class =>'btn' %> 
<% end %>



---



config/routes.rb
----------------

root 'signup#new'



---



app/controllers/signups_controller.rb
-------------------------------------

def create
  @signup = Signup.new(signup_params)

  if @signup.save
    redirect_to thanks_url
  else
    render 'new'
  end
end

private

def signup_params
  params.require(:signup).permit(:email)
end



---



$ cd innovation-cloud
$ rails console



---



Signup.all

Ctrl + d





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Look at Rails app routes
------------------------


In browser
----------

http://localhost:3000/rails/info/routes



---



in terminal or console
----------------------

$ rails routes




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Routes
------------


config/routes.rb
----------------

get 'welcome' => 'pages#home'



---



Rails.application.routes.draw do
  root 'welcome#index'

  get 'welcome' => 'pages#home'
  get 'products/:id' => 'catalog#view'
  get 'products/:id/purchase' => 'catalog#purchase', as: :purchase

  resources :products

  resources :products do
    member do
      get 'short'
      post 'toggle'
    end

    collection do
      get 'sold'
    end
  end

  resources :products do
    resources :comments, :sales
    resource :seller
  end

  resources :products do
    resources :comments
    resources :sales do
      get 'recent', on: :collection
    end
  end

  concern :toggleable do
    post 'toggle'
  end

  resources :posts, concerns: :toggleable
  resources :photos, concerns: :toggleable

  namespace :admin do
    resources :products
  end
end




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails routing errors
--------------------

localhost:3000/contacts
-----------------------


! Routing error


$ rails g controller contacts



---



app/controllers/contacts_controller.rb
--------------------------------------

class ContactsController < ApplecationController
end



---



def index
end



---



class ContactsController < ApplecationController
  def index
  end
end



---



config/routes.rb
----------------

get 'contacts/index'



---



Rails.application.routes.draw do
  get '/' => 'home/index'
  get 'contacts/index'

  resources :articles
end



---



REVERSE
-------


a. GET page (new)
b. POST data (create)



---



contacts_controller.rb
----------------------

class ContactsController < ApplecationController
  def new
  end

  def create
  end
end



---



config/routes.rb
----------------

resource :contacts, only: [:new, :create]



---



Rails.application.routes.draw do
  get '/' => 'home/index'

  resource :contacts, only: [:new, :create]
  resources :articles
end



---



$ rake routes



---



contacts  POST  /contacts contacts#create
new_contacts  GET /contacts/new contacts#new



---



localhost:3000/contacts/new
---------------------------

! template error



---



app/views/contacts
------------------

new.html.erb
------------

<h1>Contact us</h1>



---



localhost:3000/contacts/new
=> Contact us



---



$ rails g model Contact email:string message:text



---



$ rake db:migrate
$ sqlite3 evelopment.sqlite

.tables



---



$ rails console

Contact.all
(SELECT * FROM contacts;)

Article.all
(SELECT * FROM article;)

Contact.attribute_names
Article.attribute_names

exit



---



app/views/contacts/new.html.erb
-------------------------------

<%= from_for :contact, url: contacts_path do |f| %>
  <p>
    <%= f.label :email %>
    <%= f.text_field :email %>
  </p>

  <p>
    <%= f.label :message %>
    <%= f.text_area :message %>
  </p>

  <p>
    <%= f.submit 'Send message' %>
  </p>
<% end %>



---



http://guades.rubyonrails.org/routing.html



---



app/views/contacts/create.html.erb
----------------------------------

<h1>Thanks</h1>



---



app/controllers/contacts_controller.rb
--------------------------------------

def create
  @contact = Contact.new(params[:contact])
end



---



class ContactsController < ApplecationController
  def new
  end

  def create
    @contact = Contact.new(params[:contact])
  end
end



---



private

def contact_params
  params.require(:contact).permit(:email, :message)
end



---



class ContactsController < ApplecationController
  def new
  end

  def create
    @contact = Contact.new(contact_params)
  end

  private

  def contact_params
    params.require(:contact).permit(:email, :message)
  end
end



---



app/controllers/contacts_controller.rb
--------------------------------------

def create
  @contact.save
end



---



class ContactsController < ApplecationController
  def new
  end

  def create
    @contact = Contact.new(contact_params)
    @contact.save
  end

  private

  def contact_params
    params.require(:contact).permit(:email, :message)
  end
end



---



$ rails console

Contact.all
(SELECT * FROM contacts;)



---



input info



---



Contact.all



---




Validation
----------

app/models/contact.rb
---------------------

validates :email, presence: true
validates :message, presence: true



---



class Contact < ActiveRecord::Base
  validates :email, presence: true
  validates :message, presence: true
end



---



app/controllers/contacts_controller.rb
--------------------------------------

if @contact.valid?
  @contact.save
else
  render action: 'new'
end



---



class ContactsController < ApplecationController
  def new
  end

  def create
    @contact = Contact.new(contact_params)

    if @contact.valid?
      @contact.save
    else
      render action: 'new'
    end
  end

  private

  def contact_params
    params.require(:contact).permit(:email, :message)
  end
end



---



app/assets/stylesheets/applecation.css
--------------------------------------

.field_with_errors input {
  border-color: red;
}

.field_with_errors textarea {
  border-color: red;
}



---



localhost:3000/contacts
-----------------------

! Routing error



---



config/router.rb
----------------

get '/contacts' => 'contacts#new'
resource :contacts, only: [:create]



---



Rails.application.routes.draw do
  get '/' => 'home/index'
  get '/contacts' => 'contacts#new'

  resource :contacts, only: [:create]
  resources :articles
end



---



path_names: {:new => ''}



---



Rails.application.routes.draw do
  get 'home/index'

  resource :contacts, only: [:new, :create], path_names: {:new => ''}
  resources :articles
end



---



Output errors
-------------

app/vews/contacts/new.html.erb
------------------------------

<p>
  <%= @contact.errors.full_messages %>
</p>



---



<%= from_for :contact, url: contacts_path do |f| %>
  <p>
    <%= @contact.errors.full_messages %>
  </p>
  <p>
    <%= f.label :email %>
    <%= f.text_field :email %>
  </p>
  <p>
    <%= f.label :message %>
    <%= f.text_area :message %>
  </p>
  <p>
    <%= f.submit 'Send message' %>
  </p>
<% end %>



---



<% if @contact && @contact.errors.any? %>
  <p>
    <%= @contact.errors.full_messages %>
  </p>
<% end %>



---



<h1>Contact us</h1>

<%= from_for :contact, url: contacts_path do |f| %>
  <% if @contact && @contact.errors.any? %>
    <p>
      <%= @contact.errors.full_messages %>
    </p>
  <% end %>
  <p>
    <%= f.label :email %>
    <%= f.text_field :email %>
  </p>
  <p>
    <%= f.label :message %>
    <%= f.text_area :message %>
  </p>
  <p>
    <%= f.submit 'Send message' %>
  </p>
<% end %>



---



Display error message
---------------------

app/vews/contacts/new.html.erb
------------------------------


<ul>
  <% @contact.errors.full_messages.each do |msg| %>
    <li><%= msg %></li>
  <% end %>
</ul>



---



<h1>Contact us</h1>

<%= from_for :contact, url: contacts_path do |f| %>
  <% if @contact && @contact.errors.any? %>
    <p>
      <ul>
        <% @contact.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </p>
  <% end %>
  <p>
    <%= f.label :email %>
    <%= f.text_field :email %>
  </p>
  <p>
    <%= f.label :message %>
    <%= f.text_area :message %>
  </p>
  <p>
    <%= f.submit 'Send message' %>
  </p>
<% end %>






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Adding TailwindCSS to your Rails 6 Project
------------------------------------------


---1---

$ yarn add tailwindcss



---2---

npx tailwindcss init
--------------------

module.exports = {
  purge: [],
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}

module.exports = {
  theme: {
    extend: {
      colors: {
        primary: {
          100: "#fef6eb",
          200: "#f7c686",
          300: "#f4b35d",
          400: "#f2aa49",
          500: "#f1a035",
          600: "#d99030",
          700: "#c1802a",
          800: "#a97025",
          900: "#916020",
        },
      },
    },
  },
  purge: {
    content: ["./app/**/*.html.erb"],
  }
};



---3---

adding tailwind to PostCSS config
---------------------------------

require("tailwindcss"),

here is an example of my postcss.config.js file

module.exports = {
  plugins: [
    require('postcss-import'),
    require('postcss-flexbugs-fixes'),
    require("tailwindcss"),
    require('postcss-preset-env')({
      autoprefixer: {
        flexbox: 'no-2009'
      },
      stage: 3
    })
  ]
}



---4---

Import tailwind to your Javascript Pack
---------------------------------------

$ touch javascript/layouts/application.css

@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";


app/javascript/packs/application.js
-----------------------------------

import  "../layouts/application.css";



---5---

Import Tailwind to your layout
------------------------------

<%=  stylesheet_pack_tag  'application',  media: 'all',  'data-turbolinks-track': 'reload'  %>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add twitter-bootstrap to rails app
----------------------------------


---1---

$ yarn add bootstrap@4.5.2 jquery popper.js



---2---

add to environment.js
---------------------

const webpack = require("webpack")

environment.plugins.append("Provide", new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery',
  Popper: ['popper.js', 'default']
}))



---3---

add to application.css
----------------------

*= require bootstrap
*= require_tree .
*= require_self





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add jquery twitter-bootstrap and popper.js to rails app with yarn
-----------------------------------------------------------------


$ yarn add bootstrap jquery popper.js


@import 'bootstrap/scss/bootstrap';

require("bootstrap")



---



ADD JQUERY SNIPPET
------------------

const webpack = require('webpack')
environment.plugins.prepend('Provide',
  new webpack.ProvidePlugin({
    $: 'jquery/src/jpuery',
    jQuery: 'jquery/src/jpuery',
    Popper: ['popper.js', 'default']
  })
)



---




https://gist.github.com/nachozt/799a54c1bba79975bdcfd4f67226ce22





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add bootstrap 4.5 to Rails app with yarn
----------------------------------------


---1---

---v1---

$ yarn add bootstrap jquery popper.js



---v2---

$ yarn add bootstrap jquery @popperjs/core@2.0.0-alpha.1



---2---

add the following to config/webpack/environment.js
--------------------------------------------------

const webpack = require('webpack')
environment.plugins.append('Provide', new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery',
  Popper: ['popper.js', 'default']
}))



---3---

app/javascript/packs/application.js
-----------------------------------

import 'bootstrap'

document.addEventListener("turbolinks:load", () => {
  $('[data-toggle="tooltip"]').tooltip();
  $('[data-toggle="popover"]').popover()
})

window.jQuery = $;
window.$ = $;



---4---

Create folder and new .scss file
--------------------------------

$ mkdir app/javascript/stylesheets && touch app/javascript/stylesheets/application.scss



---5---

app/javascript/stylesheets/application.scss
-------------------------------------------

@import "~bootstrap/scss/bootstrap";



---6---

app/javascript/packs/application.js
-----------------------------------

import '../stylesheets/application'



---7---

application.html.erb
--------------------

<%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
<%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
<%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>



---8---

config/webpacker.yml
--------------------

resolved_paths: ['app/assets']





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add bootstrap 5 to Rails 6 app
------------------------------


---1---

$ yarn add bootstrap@5.0.0-beta2 && yarn add @popperjs/core@2.0.0-alpha.1 && yarn add jquery


add the following to config/webpack/environment.js
--------------------------------------------------

const webpack = require('webpack')
environment.plugins.append('Provide', new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery',
  Popper: ['popper.js', 'default']
}))



---2---

$ mkdir app/javascript/js && touch app/javascript/js/bootstrap_js_files.js



---3---

add bootstrap 5 js
------------------

app/javascript/js/bootstrap_js_files.js
---------------------------------------

import 'bootstrap/js/src/collapse'
import 'bootstrap/js/src/dropdown'
import 'bootstrap/js/src/scrollspy'
import 'bootstrap/js/src/alert'
import 'bootstrap/js/src/button'
import 'bootstrap/js/src/carousel'
import 'bootstrap/js/src/modal'
import 'bootstrap/js/src/popover'
import 'bootstrap/js/src/tab'
import 'bootstrap/js/src/toast'
import 'bootstrap/js/src/tooltip'



---4---

app/javascript/packs/application.js
-----------------------------------

import '../js/bootstrap_js_files.js'

window.jQuery = $;
window.$ = $;



---5---

add bootstrap 5 scss
--------------------

$ touch app/javascript/packs/application.scss



app/javascript/packs/application.scss
-------------------------------------

@import "~bootstrap/scss/bootstrap";



---6---

application.html.erb
--------------------

<%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
<%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>



---



https://bootrails.com/blog/rails-bootstrap-tutorial





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add bootstrap 5 icons with yarn for Rails 6 app version_1
---------------------------------------------------------


---1---

$ yarn add bootstrap-icons



---2---

app/helpers/application_helper.rb
---------------------------------

module ApplicationHelper
  def icon(icon, options = {})
    file = File.read("node_modules/bootstrap-icons/icons/#{icon}.svg")
    doc = Nokogiri::HTML::DocumentFragment.parse file
    svg = doc.at_css 'svg'

    if options[:class].present?
      svg['class'] += " " + options[:class]
    end
    doc.to_html.html_safe
  end
end



---3---

view.html.erb
-------------

<%= icon("bicycle", class: "text-success") %>



---4---

Find Icon
---------

https://icons.getbootstrap.com/



Add bootstrap 5 icons with yarn for Rails 6 app version_2
---------------------------------------------------------

---1---

$ yarn add bootstrap-icons



---2---

application.js
--------------

import 'bootstrap-icons/font/bootstrap-icons.css'



---3---

view.html.erb
-------------

<i class="bi bi-plus-circle"></i>



---4---

Find Icon
---------

https://icons.getbootstrap.com/





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add bootstrap 5 to rails 7 without node.js app guide
----------------------------------------------------


---1---

Add gems to Gemfile
-------------------

gem "sassc-rails"
gem 'bootstrap', '~> 5.1.3'



---2---

$ mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss



---3---

$ echo -n "" > app/assets/stylesheets/application.scss && echo "@import 'bootstrap';" >> app/assets/stylesheets/application.scss



---4---

$ rails assets:precompile



---5---

Find ( Ctrl + P ) config/initializers/assets.rb
-----------------------------------------------

Rails.application.config.assets.precompile += %w( bootstrap.min.js popper.js )



---6---

Find ( Ctrl + P ) config/importmap.rb
-------------------------------------

pin "popper", to: 'popper.js', preload: true
pin "bootstrap", to: 'bootstrap.min.js', preload: true



---7---

Find ( Ctrl + P ) app/javascript/application.js
-----------------------------------------------

import "popper"
import "bootstrap"





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add bootstrap 5 to rails 7 with node.js, yarn, jquery guide
-----------------------------------------------------------


---1---

$ rails new rails_with_jQuery_bootstrap -j esbuild --css bootstrap
$ cd rails_with_jQuery_bootstrap



---2---

$ yarn add jquery



---3---

$ touch app/javascript/add_jquery.js
$ echo "import jquery from 'jquery'" >> app/javascript/add_jquery.js && echo "window.jQuery = jquery" >> app/javascript/add_jquery.js && echo "window.$ = jquery" >> app/javascript/add_jquery.js



---4---

$ echo "import './add_jquery'" >> app/javascript/application.js





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add bootstrap 5 to rails 7 with node.js, yarn, jquery and jquery-ui guide
-------------------------------------------------------------------------


---1---

$ rails new jquery-example -j esbuild --css bootstrap --database=postgresql
$ cd jquery-example



---2---

$ yarn add jquery



---3---

$ mkdir app/javascript/src && touch app/javascript/src/jquery.js && touch app/javascript/src/jquery-ui.js && touch app/stylesheets/jquery-ui.css
$ echo "import jquery from 'jquery'" >> app/javascript/src/jquery.js && echo "window.jQuery = jquery" >> app/javascript/src/jquery.js && echo "window.$ = jquery" >> app/javascript/src/jquery.js



---4---

$ echo 'import "./src/jquery"' >> app/javascript/application.js && echo "import './src/jquery-ui'" >> app/javascript/application.js



---5---

$ echo "@import 'jquery-ui';" >> app/assets/stylesheets/application.bootstrap.scss



---6---

https://jqueryui.com/





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bootstrap-datepicker-rails
--------------------------


---1---


Include bootstrap-datepicker-rails in Gemfile
---------------------------------------------

gem 'bootstrap-datepicker-rails'



or you can install from latest build
------------------------------------

gem 'bootstrap-datepicker-rails', :require => 'bootstrap-datepicker-rails', :git => 'git://github.com/Nerian/bootstrap-datepicker-rails.git'



---2---


$ bundle install



---3---


Add this line to app/assets/stylesheets/application.css
-------------------------------------------------------

*= require bootstrap-datepicker



Or if using bootstrap v3
------------------------

*= require bootstrap-datepicker3



---4---


Add this line to app/assets/javascripts/application.js
------------------------------------------------------

//= require bootstrap-datepicker



---5---


Using bootstrap-datepicker-rails
--------------------------------


---v1---


use the simple data-provide='datepicker' attribute
--------------------------------------------------

<input type="text" data-provide='datepicker' >



---v2---


Or call datepicker() with any selector
--------------------------------------

<input type="text" class='datepicker' >

<script type="text/javascript">
  $(document).ready(function(){
    $('.datepicker').datepicker();
  });
</script>



---



https://github.com/Nerian/bootstrap-datepicker-rails




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bootstrap 6 dropdown snippet
----------------------------


<div class="accordion" id="accordionExample">
  <div class="accordion-item">
    <h2 class="accordion-header" id="headingOne">
      <button
        class="accordion-button"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#collapseOne"
        aria-expanded="true"
        aria-controls="collapseOne"
      >
        Accordion Item #1
      </button>
    </h2>
    <div
      id="collapseOne"
      class="accordion-collapse collapse show"
      aria-labelledby="headingOne"
      data-bs-parent="#accordionExample"
    >
      <div class="accordion-body">
        <strong>This is the first item
      </div>
    </div>
  </div>
</div>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

How to Upgrade Rails app
------------------------


---1---

Install Ruby to appropriate version (`(rvm | rbenv) install `)
--------------------------------------------------------------

$ rvm install 3.0.0
$ gem install rails
$ ruby -v && rails -v



---2---

Add to Gemfile
--------------

ruby '3.0.0'
gem 'rails', '~> 7.0.2.2'



---3---

Update Gemfile
--------------

$ bundler update
$ bin/rails app:update




---------------
if got problems
---------------


---1---

config/initializers/activerecord_yaml.rb
----------------------------------------

ActiveRecord.use_yaml_unsafe_load = true



---2---

$ gem 'psych', '< 4'



---3---

module YAML
  def self.properly_load_file(path)
    YAML.load_file path, aliases: true
  rescue ArgumentError
    YAML.load_file path
  end
end



---



Gemfile
-------

ruby "3.1.2"
gem "rails", "~> 7.0.4", ">= 7.0.4.1"
gem "sprockets-rails"
gem "pg", "~> 1.1"
gem "puma", "~> 5.0"
gem "jsbundling-rails"
gem "turbo-rails"
gem "stimulus-rails"
gem "cssbundling-rails"
gem "jbuilder"
gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]
gem "bootsnap", require: false

# gem "sassc-rails"
# gem "redis", "~> 4.0"
# gem "kredis"
# gem "bcrypt", "~> 3.1.7"
# gem "image_processing", "~> 1.2"

group :development, :test do
  gem "debug", platforms: %i[ mri mingw x64_mingw ]
end

group :development do
  gem "web-console"

  # gem "rack-mini-profiler"
  # gem "spring"
end

group :test do
  gem "capybara"
  gem "selenium-webdriver"
  gem "webdrivers"
end



---



layouts/application.html.erb
----------------------------

<%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
<%= javascript_include_tag "/assets/application.js", "data-turbo-track": "reload", defer: true %>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

database.yml config template
----------------------------


default: &default
  adapter: postgresql
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000
  username: postgres
  host: localhost
  port: 5432

development:
  <<: *default
  database: ruby_gt

test:
  <<: *default
  database: ruby_gt_test

production:
  <<: *default
  database: ruby_gt_pro



---



https://betterprogramming.pub/devise-auth-setup-in-rails-7-44240aaed4be




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create new Rails app with pg
----------------------------


$ rails new example_app
$ rails new simple-blog --api
$ rails new . --force -d=postgresql --minimal
$ rails new myapp --database=postgresql -j esbuild --css bootstrap
$ rails new tailwind_rails --database=postgresql -c tailwind -j esbuild
$ rails new quote-editor --css=sass --javascript=esbuild --database=postgresql
$ rails new property_finder --database-postgresql --skip-test --skip-action-cable --skip-active-storage --skip-turbolinks --skip-yarn
$ rails new example_app --minimal --api --skip-git



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Font-awesome in a Rails 6 application with yarn
-----------------------------------------------


---1---

$ yarn add @fortawesome/fontawesome-free



---2---

application.js
--------------

import "@fortawesome/fontawesome-free/css/all.css"





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add flash messages to Rails app with toastr guide
-------------------------------------------------


---1---

$ yarn add toastr



---2---

app/javascript/packs/application.js
-----------------------------------

global.toastr = require("toastr")



---3---

$ mkdir app/javascript/stylesheets && touch app/javascript/stylesheets/application.scss


import in app/javascript/stylesheets/application.scss
-----------------------------------------------------

@import 'toastr';



---4---

app/javascript/packs/application.js
-----------------------------------

import "../stylesheets/application"



---5---

application_helper.rb
---------------------

def toastr_flash
  flash.each_with_object([]) do |(type, message), flash_messages|
    type = 'success' if type == 'notice'
    type = 'error' if type == 'alert'
    text = "<script>toastr.#{type}('#{message}', '', { closeButton: true, progressBar: true })</script>"
    flash_messages << text.html_safe if message
  end.join("\n").html_safe
end



---6---

layouts/application.html.erb
----------------------------

<%= toastr_flash %>



Toastr for flash messages in app links
--------------------------------------

https://github.com/CodeSeven/toastr
https://stackoverflow.com/questions/58777081/how-do-you-add-toastr-rails-gem-to-rails-6-project





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Flash messages for Rails app
----------------------------


Gemfile
-------

gem 'flash_rails_messages'



---



layout.html.erb
---------------

<%= render_flash_messages %>
<%= render_flash_messages dismissible: true %>
<%= render_flash_messages dismissible: true, id: 'my-alert', class: 'custom-class' %>





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Input notice and alert to Rails app
-----------------------------------


application.html.erb
--------------------

---v1---

<% if notice.present? %>
  <div class="container alert alert-success">
    <%= notice %>
  </div>
<% end %>

<% if alert.present? %>
  <div class="container alert alert-danger">
    <%= alert %>
  </div>
<% end %>



---v2---

<% case @info %>
<% when notice.present? %>
  <% @info = notice %>

  <div class="container alert alert-success">
    <%= @info %>
  </div>
<% when alert.present? %>
  <% @info = alert %>

  <div class="container alert alert-danger">
    <%= @info %>
  </div>
<% end %>



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Simple Devise guide for Rails 6 app
-----------------------------------


gem 'devise'


---1---

$ rails generate devise:install



---2---

config/environments/development.rb
----------------------------------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }



---3---

$ rails generate devise User
$ rails db:migrate



---4---

Add to controller
-----------------

before_action :authenticate_user!



---5---

Devise Helpers
--------------

1. user_signed_in?
2. current_user
3. user_session
4. after_sign_in_path_for
5. after_sign_out_path_for
6. after_sign_up_path_for



---6---

Configures
----------

devise :database_authenticatable, :registerable, :confirmable, :recoverable, stretches: 13



---7---

Strong Parameters
-----------------

ApplicationController
---------------------

before_action :configure_permitted_parameters, if: :devise_controller?

protected

def configure_permitted_parameters
  devise_parameter_sanitizer.permit(:sign_up, keys: [:username])
  devise_parameter_sanitizer.permit(:account_update, keys: [:username])
end



---8---

$ rails generate devise:views


scoped views
------------

$ rails generate devise:views users



ones for the registerable and confirmable module:
-------------------------------------------------

$ rails generate devise:views -v registrations confirmations



---9---

Configuring controllers
-----------------------

$ rails generate devise:controllers [scope]

devise_for :users, controllers: { sessions: 'users/sessions' }



Copy the views from devise/sessions to users/sessions. Since the controller was changed, it won't use the default views located in devise/sessions
--------------------------------------------------------------------------------------------------------------------------------------------------


class Users::SessionsController < Devise::SessionsController
  def create
    # custom sign-in code
  end
end



---10---

Configuring routes
------------------

devise_for :users, path: 'auth', path_names: {
  sign_in: 'login', sign_out: 'logout', password: 'secret', confirmation: 'verification', unlock: 'unblock', registration: 'register', sign_up: 'cmon_let_me_in'
}


devise_scope :user do
  get 'sign_in', to: 'devise/sessions#new'
end


devise_for :users, skip: :all




---




https://github.com/heartcombo/devise





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add devise for User with sign_in by username or email (login)
-------------------------------------------------------------


---1---

Add devise gem to Gemfile
-------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address


gem 'devise'



---2---

$ rails g devise:install

config/environments/development.rb
----------------------------------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }



devise methods
--------------

before_action :authenticate_user!
user_signed_in?
current_user
user_session
after_sign_in_path_for
after_sign_up_path_for
after_sign_out_path_for



---3---

$ rails g devise User



---4---

$ rails db:migrate



---5---

Add username column to Users
----------------------------

$ rails generate migration add_username_to_users username:string:uniq
$ rake db:migrate



---6---

Add strong params to application_controller.rb
----------------------------------------------

before_action :configure_permitted_parameters, if: :devise_controller?

protected

def configure_permitted_parameters
  added_attrs = [:username, :email, :password, :password_confirmation, :remember_me]

  devise_parameter_sanitizer.permit :sign_up, keys: added_attrs
  devise_parameter_sanitizer.permit :sign_in, keys: [:login, :password]
  devise_parameter_sanitizer.permit :account_update, keys: added_attrs
end



---7---

Create a login virtual attribute in the User model
--------------------------------------------------

app/models/user.rb
------------------

attr_writer :login

def login
  @login || self.username || self.email
end



---8---

config/initializers/devise.rb
-----------------------------

config.authentication_keys = [ :login ]


If you are using multiple models with Devise
--------------------------------------------

devise :database_authenticatable, :registerable,
  :recoverable, :rememberable, :trackable,
  :validatable, authentication_keys: [:login]


If you need permissions
-----------------------

devise :database_authenticatable, :registerable,
  :recoverable, :rememberable, :trackable,
  :validatable, :authentication_keys => { email: true, login: false }



---9---

Overwrite Devise's find_for_database_authentication method in User model
------------------------------------------------------------------------

app/models/user.rb
------------------

def self.find_for_database_authentication(warden_conditions)
  conditions = warden_conditions.dup

  if login = conditions.delete(:login)
    where(conditions.to_h).where(["lower(username) = :value OR lower(email) = :value", { :value => login.downcase }]).first
  elsif conditions.has_key?(:username) || conditions.has_key?(:email)
    where(conditions.to_h).first
  end
end



---10---

Validate username
-----------------

app/models/user.rb
------------------

validate :validate_username

def validate_username
  if User.where(email: username).exists?
    errors.add(:username, :invalid)
  end
end



---11---

---v1---

$ rails g devise:views



---v2---

$ rails g devise:views users


Devise views
------------

shared/_links.html.erb
----------------------

<%- if controller_name != 'sessions' %>
  <%= link_to "Sign in", new_session_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.registerable? && controller_name != 'registrations' %>
  <%= link_to "Sign up", new_registration_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.recoverable? && controller_name != 'passwords' && controller_name != 'registrations' %>
  <%= link_to "Forgot your password?", new_password_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.confirmable? && controller_name != 'confirmations' %>
  <%= link_to "Didn't receive confirmation instructions?", new_confirmation_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks' %>
  <%= link_to "Didn't receive unlock instructions?", new_unlock_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.omniauthable? %>
  <%- resource_class.omniauth_providers.each do |provider| %>
    <%= link_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), method: :post, class: 'text-decoration-none text-dark' %><br />
  <% end %>
<% end %>



---



sessions/new.html.erb
---------------------

<div class="container mt-5 mb-5">
  <div class="row">
    <div class="col-7">
      <div class="card p-5">
        <h5>Sign in</h5>

        <%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
          <div class="form-group">
            <%= f.label :login %>
            <%= f.text_field :login, class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.label :password %>
            <%= f.password_field :password, class: 'form-control' %>
          </div>

          <% if devise_mapping.rememberable? %>
            <div class="form-group">
              <%= f.check_box :remember_me %>
              <%= f.label :remember_me %>
            </div>
          <% end %>

          <div class="form-group">
            <div class="row ml-1">
              <%= f.submit "Sign in", class: 'btn btn-success btn-sm mr-2' %>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <div class="row mt-5">
    <div class="col-6">
      <div class="card p-5">
        <small><%= render "devise/shared/links" %></small>
      </div>
    </div>
  </div>
</div>



---



descriptions/new.html.erb
-------------------------

<div class="container mt-5 mb-5">
  <div class="row">
    <div class="col-6">
      <div class="card p-5">
        <h5>Sign up</h5>

        <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
          <%= render "devise/shared/error_messages", resource: resource %>
          <div class="form-group">
            <%= f.label :email %>
            <%= f.email_field :email, autofocus: true, autocomplete: "email", class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.label :username %>
            <%= f.text_field :username, class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.label :password %>
            <% if @minimum_password_length %>
            <small class="text-muted">(<%= @minimum_password_length %> characters minimum)</small>
            <% end %>
            <%= f.password_field :password, autocomplete: "new-password", class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.label :password_confirmation %>
            <%= f.password_field :password_confirmation, autocomplete: "new-password", class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.submit "Sign up", class: 'btn btn-success btn-sm' %>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <div class="row mt-5">
    <div class="col-6">
      <div class="card p-5">
        <small><%= render "devise/shared/links" %></small>
      </div>
    </div>
  </div>
</div>



---



registrations/edit.html.erb
---------------------------

<div class="edit-page pt-5 pb-5">
  <div class="container">
    <div class="row">
      <div class="col-6">
        <div class="card p-5">
          <h5>Edit <%= resource_name.to_s.humanize %></h5>

          <%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
            <%= render "devise/shared/error_messages", resource: resource %>

            <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
            <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
            <% end %>

            <div class="form-group">
              <%= f.label :email %>
              <%= f.email_field :email, autofocus: true, autocomplete: "email", class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= f.label :username %>
              <%= f.text_field :username, class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= f.label :password %> <small class="text-muted">(leave blank if you don't want to change it)</small>
              <%= f.password_field :password, autocomplete: "new-password", class: 'form-control' %>
              <% if @minimum_password_length %>
                <small class="text-muted"><%= @minimum_password_length %> characters minimum</small>
              <% end %>
            </div>

            <div class="form-group">
              <%= f.label :password_confirmation %>
              <%= f.password_field :password_confirmation, autocomplete: "new-password", class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= f.label :current_password %><br> <small class="text-muted">(we need your current password to confirm your changes)</small>
              <%= f.password_field :current_password, autocomplete: "current-password", class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= f.submit "Update", class: 'btn btn-success btn-sm' %>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <div class="row mt-5">
      <div class="col-6">
        <div class="card p-5">
          <small><%= link_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?" }, method: :delete, class: 'text-decoration-none text-danger' %></small>
        </div>
      </div>
    </div>
  </div>
</div>



---12---


sessions/new.html.erb
---------------------

<%= f.label :login %>
<%= f.text_field :login %>


or
--


<%= f.label :username %>
<%= f.text_field :username %>



registrations/edit.html.erb
---------------------------

<%= f.label :username %>
<%= f.text_field :username %>



---13---

$ rails db:migrate



---14---

Configure Devise to use username as reset password or confirmation keys
-----------------------------------------------------------------------

config/initializers/devise.rb
-----------------------------

config.reset_password_keys = [ :username ]
config.confirmation_keys = [ :username ]



---15---

redirect to a specific page on successful sign in out
-----------------------------------------------------

def after_sign_in_path_for(resource)
 current_user_path
end


Keeping user on the same page after signing out
-----------------------------------------------

def after_sign_out_path_for(resource_or_scope)
 request.referrer
end


redirect to special page on signe_up
------------------------------------

$ touch controllers/registrations_controller.rb


add
---


class RegistrationsController < Devise::RegistrationsController
  protected

  def after_sign_up_path_for(resource)
    '/path'
  end
end


If the account that is registered is confirmable and not active yet
-------------------------------------------------------------------

class RegistrationsController < Devise::RegistrationsController
  protected

  def after_inactive_sign_up_path_for(resource)
    '/path'
  end
end



---16---

routes.rb
---------

devise_for :users, :controllers => {:registrations => "registrations"}



---17---

Guest user guide
----------------

https://github.com/heartcombo/devise/wiki/How-To:-Create-a-guest-user



---18---

Notify users via email when their passwords change
--------------------------------------------------

config/initializers/devise.rb
-----------------------------

config.send_password_change_notification = true

!!! You can customize the password change email by editing the devise/mailer/password_change.html.erb template



---19---

Customize minimum password length
---------------------------------

---v1---

config/initializers/devise.rb
-----------------------------

config.password_length = 10



---v2---

user.rb
-------

devise :database_authenticatable, :validatable, password_length: 10



---20---

Add sign_in, sign_out, and sign_up links to your layout template
----------------------------------------------------------------

views/devise/menu/_login_items.html.erb
---------------------------------------

<% if user_signed_in? %>
  <li>
    <%= link_to('Logout', destroy_user_session_path, method: :delete) %>
  </li>
<% else %>
  <li>
    <%= link_to('Login', new_user_session_path) %>
  </li>
<% end %>



views/devise/menu/_registration_items.html.erb
----------------------------------------------

<% if user_signed_in? %>
  <li>
    <%= link_to('Edit registration', edit_user_registration_path) %>
  </li>
<% else %>
  <li>
    <%= link_to('Register', new_user_registration_path) %>
  </li>
<% end %>



layouts/application.html.erb
----------------------------

<ul class="hmenu">
  <%= render 'devise/menu/registration_items' %>
  <%= render 'devise/menu/login_items' %>
</ul>
<%= yield %>



Sign_in, sign_out links
-----------------------

---v1---

<% if current_user.nil? %>
  <%= link_to new_user_session_path, class: 'login-button' do %>
    Sign in
  <% end %>
<% else %>
  <%= link_to app_dashboard_index_path, class: 'login-button' do %>
    Go to App
  <% end %>
  <%= link_to destroy_user_session_path, method: :delete do %>
    Log out
  <% end %>
<% end %>



---v2---

<% if user_signed_in? %>

  <%= link_to('Edit registration', edit_user_registration_path) %>
  <%= link_to('Logout', destroy_user_session_path, :method => :delete) %>
<% else %>

  <%= link_to('Register', new_user_registration_path)  %>
  <%= link_to('Login', new_user_session_path)  %>
<% end %>



styles.scss
-----------

ul.hmenu {
  list-style: none;
  margin: 0 0 2em;
  padding: 0;
}

ul.hmenu li {
  display: inline;
}



---21---


Styles for forms (with bootstrap)
---------------------------------

.btn:focus, .btn:active {
  outline: none !important;
  box-shadow: none !important;
}

input[type=text] {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  background: transparent !important;
}

input[type=email] {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  background: transparent !important;
}

input[type=password] {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  background: transparent !important;
}

input[type=password-confirmation] {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  background: transparent !important;
}

select {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  cursor: pointer;
}

textarea {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  cursor: pointer;
}



---



Snippet for sign out (for routes.rb)
------------------------------------

devise_scope :user do
  get '/users/sign_out' => 'devise/sessions#destroy'
end



---



Devise How To's
---------------

https://github.com/heartcombo/devise/wiki/How-Tos



---



How To: Allow users to sign in with something other than their email address
----------------------------------------------------------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Allow-users-to-sign-in-with-something-other-than-their-email-address



---



Add sign_in, sign_out, and sign_up links to your layout template
----------------------------------------------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Add-sign_in,-sign_out,-and-sign_up-links-to-your-layout-template



---



Allow users to sign in using their username or email address
------------------------------------------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address



---



Redirect to specific page by sign up with devise
------------------------------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Redirect-to-a-specific-page-on-successful-sign-up-(registration)





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Display a custom sign_in form anywhere in your app
--------------------------------------------------

Example with form_for and posting to user_session_path
------------------------------------------------------


<%= form_for(:user, :url => session_path(:user)) do |f| %>
  <%= f.text_field :email %>
  <%= f.password_field :password %>
  <%= f.check_box :remember_me %>
  <%= f.label :remember_me %>
  <%= f.submit 'Sign in' %>
  <%= link_to "Forgot your password?", new_password_path(:user) %>
<% end %>



---



Warning for client_side_validations
-----------------------------------

form_for(resource, :as => resource_name ... )



---



application_helper.rb
---------------------

def resource_name
  :user
send

def resource
  @resource ||= User.new
end

def resource_class
  User
end

def devise_mapping
  @devise_mapping ||= Devise.mappings[:user]
end



---



Devise registrations_controller.rb
----------------------------------


https://github.com/heartcombo/devise/blob/master/app/controllers/devise/registrations_controller.rb#L99
https://github.com/heartcombo/devise/wiki/How-To%3A-Display-a-custom-sign_in-form-anywhere-in-your-app




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Standart navbar with twitter-bootstrap
--------------------------------------


_nav.html.erb
-------------

---1---

$ touch views/layouts/_nav.html.erb



---2---

---v1--- (bootstrap_4.6)

<div class="d-flex flex-column flex-md-row align-items-center p-3 px-md-4 bg-white border-bottom shadow-sm">
  <h5 class="my-0 mr-md-auto font-weight-normal"><%= link_to 'Send on Click', root_path, class: 'text-dark text-decoration-none' %></h5>

  <nav class="my-2 my-md-0 mr-md-3">
    <%= link_to 'Home', root_path, class: "text-dark mr-3 text-decoration-none" %>
  </nav>
</div>



---v2--- (bootstrap_4.6)

<div class="d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm">
  <h5 class="my-0 mr-md-auto font-weight-normal"><%= link_to 'Actionbox', root_path, class: 'text-dark text-decoration-none' %></h5>

  <nav class="my-2 my-md-0 mr-md-3">
    <%= link_to 'Home', root_path, class: "text-dark mr-3 text-decoration-none" %>
  </nav>

  <% if user_signed_in? %>
    <span class="badge badge-success float-right mr-5">
      <%= current_user.username %>
    </span>

    <nav class="my-2 my-md-0 mr-md-3">
      <%= link_to 'Settings', edit_user_registration_path, class: "text-dark mr-3 text-decoration-none" %>
    </nav>

    <%= link_to 'Sign out', destroy_user_session_path, method: :delete, class: "btn btn-outline-danger" %>
  <% else %>
    <%= link_to 'Sign in', new_user_session_path, class: "btn btn-success me-3" %>
    <%= link_to 'Sign up', new_user_registration_path, class: "btn btn-secondary" %>
  <% end %>
</div>



---v3--- (bootstrap_5)

<header class="p-3 mb-3 border-bottom">
  <div class="container">
    <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">
      <h5 class="d-flex align-items-center mb-2 mb-lg-0 me-5">
        <%= link_to 'Devise Bootstrap', root_path, class: 'bi me-2 text-dark text-decoration-none' %>
      </h5>

      <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0">
        <li><%= link_to 'Home', root_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Terms', terms_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Contacts', contacts_path, class: "nav-link px-2 link-dark" %></li>
      </ul>

      <% if user_signed_in? %>
        <ul class="nav col-12 col-lg-auto me-lg-right mb-2 justify-content-center mb-md-0 me-3">
          <li><span class="badge bg-success"><%= current_user.username %></span></li>
        </ul>

        <div class="dropdown text-end">
          <a href="#" class="d-block link-dark text-decoration-none dropdown-toggle" id="dropdownUser1" data-bs-toggle="dropdown" aria-expanded="false">
            <img src="https://github.com/mdo.png" alt="mdo" width="32" height="32" class="rounded-circle">
          </a>

          <ul class="dropdown-menu text-small" aria-labelledby="dropdownUser1" style="">
            <li><a class="dropdown-item" href="#">New project</a></li>
            <li><a class="dropdown-item" href="#">Profile</a></li>
            <li><%= link_to 'Settings', edit_user_registration_path, class: "dropdown-item" %></li>
            <li><hr class="dropdown-divider"></li>
            <li><%= link_to 'Sign out', destroy_user_session_path, method: :delete, class: "dropdown-item text-danger" %></li>
          </ul>
        <% else %>
          <ul class="nav">
            <li class="nav-item"><%= link_to 'Sign in', new_user_session_path, class: "nav-link link-dark px-2" %></li>
            <li class="nav-item"><%= link_to 'Sign up', new_user_registration_path, class: "nav-link link-dark px-2" %></li>
          </ul>
        <% end %>
      </div>
    </div>
  </div>
</header>



---v5---

<header class="p-3 border-bottom shadow-sm">
  <div class="container">
    <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">

      <h5 class="d-flex align-items-center mb-2 mb-lg-0 me-5">
        <%= link_to 'Devise Bootstrap', root_path, class: 'bi me-2 text-dark text-decoration-none' %>
      </h5>

      <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0">
        <li><%= link_to 'iPhones', phones_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'iPhone defects', defects_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'iPhone repair', repairs_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Home', root_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Terms', terms_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Contacts', contacts_path, class: "nav-link px-2 link-dark" %></li>
      </ul>

      <% if user_signed_in? %>
        <ul class="nav col-12 col-lg-auto me-lg-right mb-2 justify-content-center mb-md-0 me-3">
          <li><span class="badge bg-success"><%= current_user.username %></span></li>
        </ul>
        <div class="dropdown text-end">
          <a
            href="#"
            class="d-block link-dark text-decoration-none dropdown-toggle"
            id="dropdownUser1"
            data-bs-toggle="dropdown"
            aria-expanded="false"
          >
            <%= user_avatar(current_user, 40) %>
          </a>
          <ul class="dropdown-menu text-small" aria-labelledby="dropdownUser1" style="">
            <li><%= link_to 'Articles', articles_path, class: 'dropdown-item' %></li>
            <li><%= link_to 'New article', new_article_path, class: 'dropdown-item' %></li>
            <li><%= link_to 'Settings', edit_user_registration_path, class: "dropdown-item" %></li>
            <li><hr class="dropdown-divider"></li>
            <li><%= link_to 'Sign out', destroy_user_session_path, method: :delete, class: "dropdown-item text-danger" %></li>
          </ul>
        <% else %>
          <ul class="nav">
            <li class="nav-item"><%= link_to 'Sign in', new_user_session_path, class: "nav-link link-dark px-2" %></li>
            <li class="nav-item"><%= link_to 'Sign up', new_user_registration_path, class: "nav-link link-dark px-2" %></li>
          </ul>
        <% end %>
      </div>
    </div>
  </div>
</header>



---3---

<%= render 'layouts/nav' %>



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Mailcatcher
-----------


gem 'mailcatcher'



---



environments/development.rb
---------------------------

config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = { :address => '127.0.0.1', :port => 1025 }
config.action_mailer.raise_delivery_errors = false



---



https://mailcatcher.me/





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Action mailbox for Rails app
----------------------------


$ rails action_mailbox:install
$ rails g mailbox Replies



---


Rails email conductor path
--------------------------

http://localhost:3000/rails/conductor/action_mailbox/inbound_emails/new



---



https://guides.rubyonrails.org/action_mailer_basics.html
http://rusrails.ru/action-mailer-basics
https://github.com/mikel/mail





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Emails
------


---1---

config/environments/development.rb
----------------------------------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
config.action_mailer.perform_caching = false
config.action_mailer.perform_deliveries = true
config.action_mailer.raise_delivery_errors = true
config.action_mailer.delivery_method = :smtp

config.action_mailer.smtp_settings = {
  user_name:      Rails.application.secrets.mail_username,
  password:       Rails.application.secrets.mail_password,
  domain:         'gmail.com',
  address:       'smtp.gmail.com',
  port:          '587',
  authentication: :plain,
  enable_starttls_auto: true
}



---2---


Next, we add mail_username and mail_password to config/secrets.yml
------------------------------------------------------------------

development:
  secret_key_base: 1d7...fc1
  mail_username: test@example.com
  mail_password: Password123



---3---

config/initializers/devise.rb
-----------------------------

config.mailer_sender = 'test@example.com'



---4---

Open in web browser: /users/password/new . And try to send reset password instructions.
---------------------------------------------------------------------------------------


Alternative is changing
-----------------------

config.action_mailer.smtp_settings.port to 465

may help.



Welcome email
-------------

---1---

app/models/user.rb
------------------

after_create :send_admin_mail

def send_admin_mail
  UserMailer.send_welcome_email(self).deliver_later
end



---2---

Generate UserMailer
-------------------

$ rails generate mailer UserMailer



---3---

app/mailers/application_mailer.rb
---------------------------------

default from: 'test@example.com'

def send_welcome_email(user)

  @user = user
  mail(:to => @user.email, :subject => "Welcome!")
end



---4---

$ mkdir views/user_mailer && touch send_welcome_mail.html.erb



---5---

<!DOCTYPE html>
<html>
  <head>
    <meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />
  </head>

  <body>
    <h1>Welcome, <%= @user.email %></h1>
    <p>
      Access to app under following URL: <%= @url %>.
    </p>
    <p>Thanks for joining and have a great day!</p>
  </body>
</html>



---6---

$ touch send_welcome_mail.text.erb



---7---

Welcome, <%= @user.email %>


Access to app under following URL
---------------------------------

<%= @url %>



Thanks for joining and have a great day
---------------------------------------


Mailtrap
--------

https://ru.hexlet.io/blog/posts/chto-takoe-mailtrap-ili-kak-testirovat-pisma-na-stadiyah-razrabotki-i-predprodakshena
https://mailtrap.io/



Action Mailer basics
--------------------

https://guides.rubyonrails.org/action_mailer_basics.html



---



config/environments/development.rb
----------------------------------

config.action_mailer.perform_caching = false
config.action_mailer.delivery_method = :file
config.action_mailer.default_url_options = { host: 'http://localhost:3000' }



---




Production email configs
------------------------



config/environments/production.rb
---------------------------------

config.action_mailer.default_url_options = { host: ENV['APP_HOST'] }
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  user_name: ENV['MAIL_USERNAME'],
  password: ENV['MAIL_PASSWORD'],
  address: ENV['MAIL_HOST'],
  domain: ENV['MAIL_HOST'],
  port: ENV['SMTP_PORT'] || '25',
  authentication: :cram_md5
}





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Action Mailer configure examples
--------------------------------


Google
------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  address:              'smtp.gmail.com',
  port:                 587,
  domain:               '7495500@gmail.com',
  user_name:            'Gor',
  password:             'ktotI1987',
  authentication:       'plain',
  enable_starttls_auto: true
}



---



Yandex
------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  :tls => true,
  address: 'smtp.yandex.ru',
  port: 465,
  domain: 'yandex.ru',
  authentication: 'plain',
  user_name: 'name@yandex.ru',
  password: 'пароль'
}





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Wellcome with Action Mailer
---------------------------


---1---

$ rails g mailer welcome



---2---

environment/development.rb
--------------------------

config.action_mailer.raise_delivery_errors = true
config.action_mailer.perform_deliveries = true
config.action_mailer.default_url_options = { host: 'localhost:3000' }
config.action_mailer.delivery_method = :smtp

config.action_mailer.smtp_settings = {
  address:        smtp.gmail.com,
  port:           587,
  username:       '7495500@gmail.com',
  password:       '',
  authentication: 'plain'
}



---3---

$ rails g controller welcome



Configuration for gmail (mailer)
--------------------------------

https://guides.rubyonrails.org/action_mailer_basics.html#action-mailer-configuration-for-gmail



Generate mailer cmd example
---------------------------

$ rails g mailer CommentMailer new_comment



---



About mail send
---------------

https://github.com/mikel/mail





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add postmark to Rails app
-------------------------


---1---

Add the Postmark Rails Gem to your Gemfile
------------------------------------------

gem 'postmark-rails'



---2---

$ rails secret


$ EDITOR=vim rails credentials:edit

postmark_api_token: "12f38d1a-ec13-43f2-b5b1-962878ef257e"



---3---

Then set Postmark as your preferred mail delivery method via config/application.rb
----------------------------------------------------------------------------------

config.action_mailer.delivery_method = :postmark

config.action_mailer.postmark_settings = {
  api_token: Rails.application.credentials.postmark_api_token
}



---4---

Generate a mailer, views, and preview
-------------------------------------

$ rails generate mailer test hello



---5---

Set up your mailer
------------------

class TestMailer < ApplicationMailer
  default from: 'sender@example.org'

  def hello
    mail(
      subject:        'Hello from Postmark',
      to:             'sender@example.org',
      from:           'sender@example.org',
      html_body:      '<strong>Hello</strong> dear Postmark user.',
      track_opens:    'true',
      message_stream: 'outbound')
  end
end



---6---

Send an email from the console by calling deliver_now
-----------------------------------------------------

$ rails console
$ TestMailer.hello.deliver_now



---7---

https://github.com/wildbit/postmark-rails
https://postmarkapp.com/
https://postmarkapp.com/developer/integration/official-libraries#rails-gem




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Basic rails application gems
----------------------------


Gemfile
-------

gem 'pg'
gem 'devise', github: 'heartcombo/devise', branch: 'ca-omniauth-2'
gem 'omniauth-facebook'
gem 'omniauth-github', github: 'omniauth/omniauth-github', branch: 'master'
gem 'omniauth-google-oauth2'
gem "omniauth-rails_csrf_protection"
gem 'mini_magick'
gem 'carrierwave'
gem 'cancancan'
gem 'rails_admin', git: 'https://github.com/sferik/rails_admin.git'
gem 'activerecord-session_store'
gem 'gmaps4rails'
gem 'geocoder'
gem 'sidekiq'
gem 'image_processing', '~> 1.2'
gem 'mailcatcher'
gem 'mail'
gem "actiontext"

group :test do
  gem 'capybara', '>= 3.26'
  gem 'selenium-webdriver'
  gem 'webdrivers'
  gem 'rspec-rails'
  gem 'factory_bot'
end

group :development, :test do
  gem 'shoulda-matchers'
  gem 'database_cleaner-active_record'
  gem "factory_bot_rails"
  gem "pry-rails"
  gem "email_spec"
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Actiontext
----------


Actiontext guides
-----------------


---1---

Add to Gemfile
--------------

gem 'actiontext'
gem 'image_processing'



---2---

$ rails g scaffold acticle name



---3---

$ brew install image_magick vips



---4---

$ rails action_text:install
$ rails db:migrate



---5---

article.rb
----------

has_rich_text :content



---6---

Add to strong params in articles_controller.rb
----------------------------------------------

def article_params
  params.require(:article).permit(:name, :content)
end



---7---

Add fields to form
------------------

articles/_form.html.erb
-----------------------

<%= form.label :content %>
<%= form.rich_text_area :content %>



---8---

application.js
--------------

import "trix"
import "@rails/actiontext"



---9---

actiontext.scss
---------------

@import "trix/dist/trix";



---10---

application.scss
----------------

@import "./actiontext.scss"



---



Action Text generation command
------------------------------

$ rails action_text:install && rails db:migrate



---



action text atext.scss
----------------------

$ cd '/home/gor/Рабочий стол/ruby files/styles'



---



https://edgeguides.rubyonrails.org/action_text_overview.html
https://github.com/rails/actiontext/tree/archive
https://dennishellweg.com/custom-attachments-in-action-text




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

action_text styles
------------------


attachments.scss
----------------

@import "./icons";
@import "./selection";

trix-editor {
  [data-trix-mutable],
  [data-trix-cursor-target] {
    @extend %invisible-selection;
  }

  [data-trix-mutable] {
    * {
      @extend %invisible-selection;
    }

    &:not(.attachment__caption-editor) {
      @extend %disable-selection;
    }

    &.attachment__caption-editor:focus {
      @extend %visible-selection;
    }

    &.attachment {
      &.attachment--file {
        box-shadow: 0 0 0 2px highlight;
        border-color: transparent;
      }

      img {
        box-shadow: 0 0 0 2px highlight;
      }
    }
  }

  .attachment {
    position: relative;

    &:hover {
      cursor: default;
    }
  }

  .attachment--preview {
    .attachment__caption:hover {
      cursor: text;
    }
  }

  .attachment__progress {
    position: absolute;
    z-index: 1;
    height: 20px;
    top: calc(50% - 10px);
    left: 5%;
    width: 90%;
    opacity: 0.9;
    transition: opacity 200ms ease-in;

    &[value="100"] {
      opacity: 0;
    }
  }

  .attachment__caption-editor {
    display: inline-block;
    width: 100%;
    margin: 0;
    padding: 0;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit;
    color: inherit;
    text-align: center;
    vertical-align: top;
    border: none;
    outline: none;
    -webkit-appearance: none;
    -moz-appearance: none;
  }

  .attachment__toolbar {
    position: absolute;
    z-index: 1;
    top: -0.9em;
    left: 0;
    width: 100%;
    text-align: center;
  }

  .trix-button-group {
    display: inline-flex;
  }

  .trix-button {
    position: relative;
    float: left; // Collapse whitespace between elements
    color: #666;
    white-space: nowrap;
    font-size: 80%;
    padding: 0 0.8em;
    margin: 0;
    outline: none;
    border: none;
    border-radius: 0;
    background: transparent;

    &:not(:first-child) {
      border-left: 1px solid #ccc;
    }

    &.trix-active {
      background: #cbeefa;
    }

    &:not(:disabled) {
      cursor: pointer;
    }
  }

  .trix-button--remove {
    text-indent: -9999px;
    display: inline-block;
    padding: 0;
    outline: none;
    width: 1.8em;
    height: 1.8em;
    line-height: 1.8em;
    border-radius: 50%;
    background-color: #fff;
    border: 2px solid highlight;
    box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.25);

    &::before {
      display: inline-block;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      opacity: 0.7;
      content: "";
      background-image: $icon-remove;
      background-position: center;
      background-repeat: no-repeat;
      background-size: 90%;
    }

    &:hover {
      border-color: #333;

      &::before {
        opacity: 1;
      }
    }
  }

  .attachment__metadata-container {
    position: relative;
  }

  .attachment__metadata {
    position: absolute;
    left: 50%;
    top: 2em;
    transform: translate(-50%, 0);
    max-width: 90%;
    padding: 0.1em 0.6em;
    font-size: 0.8em;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.7);
    border-radius: 3px;

    .attachment__name {
      display: inline-block;
      max-width: 100%;
      vertical-align: bottom;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .attachment__size {
      margin-left: 0.2em;
      white-space: nowrap;
    }
  }
}





---





content.scss
------------

$quote-border-width: 0.3em;
$quote-margin-start: 0.3em;
$quote-padding-start: 0.6em;

.trix-content {
  line-height: 1.5;
  overflow-wrap: break-word;
  word-break: break-word;

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  h1 {
    font-size: 1.2em;
    line-height: 1.2;
  }

  blockquote {
    border: 0 solid #ccc;
    border-left-width: $quote-border-width;
    margin-left: $quote-margin-start;
    padding-left: $quote-padding-start;
  }

  [dir=rtl] blockquote,
  blockquote[dir=rtl] {
    border-width: 0;
    border-right-width: $quote-border-width;
    margin-right: $quote-margin-start;
    padding-right: $quote-padding-start;
  }

  li {
    margin-left: 1em;
  }

  [dir=rtl] li {
    margin-right: 1em;
  }

  pre {
    display: inline-block;
    width: 100%;
    vertical-align: top;
    font-family: monospace;
    font-size: 0.9em;
    padding: 0.5em;
    white-space: pre;
    background-color: #eee;
    overflow-x: auto;
  }

  img {
    max-width: 100%;
    height: auto;
  }

  .attachment {
    display: inline-block;
    position: relative;
    max-width: 100%;

    a {
      color: inherit;
      text-decoration: none;

      &:hover,
      &:visited:hover {
        color: inherit;
      }
    }
  }

  .attachment__caption {
    text-align: center;

    .attachment__name + .attachment__size {
      &::before {
        content: ' \2022 ';
      }
    }
  }

  .attachment--preview {
    width: 100%;
    text-align: center;

    .attachment__caption {
      color: #666;
      font-size: 0.9em;
      line-height: 1.2;
    }
  }

  .attachment--file {
    color: #333;
    line-height: 1;
    margin: 0 2px 2px 2px;
    padding: 0.4em 1em;
    border: 1px solid #bbb;
    border-radius: 5px;
  }

  .attachment-gallery {
    display: flex;
    flex-wrap: wrap;
    position: relative;

    .attachment {
      flex: 1 0 33%;
      padding: 0 0.5em;
      max-width: 33%;
    }

    &.attachment-gallery--2,
    &.attachment-gallery--4 {
      .attachment {
        flex-basis: 50%;
        max-width: 50%;
      }
    }
  }
}





---





editor.scss
-----------

trix-editor {
  border: 1px solid #bbb;
  border-radius: 3px;
  margin: 0;
  padding: 0.4em 0.6em;
  min-height: 5em;
  outline: none;
}





---





icons.scss
----------

$icon-attach: svg('trix/images/attach.svg');
$icon-bold: svg('trix/images/bold.svg');
$icon-bullets: svg('trix/images/bullets.svg');
$icon-code: svg('trix/images/code.svg');
$icon-heading-1: svg('trix/images/heading_1.svg');
$icon-italic: svg('trix/images/italic.svg');
$icon-link: svg('trix/images/link.svg');
$icon-nesting-level-decrease: svg('trix/images/nesting_level_decrease.svg');
$icon-nesting-level-increase: svg('trix/images/nesting_level_increase.svg');
$icon-numbers: svg('trix/images/numbers.svg');
$icon-quote: svg('trix/images/quote.svg');
$icon-redo: svg('trix/images/redo.svg');
$icon-remove: svg('trix/images/remove.svg');
$icon-strike: svg('trix/images/strike.svg');
$icon-undo: svg('trix/images/undo.svg');





---





media-queries.scss
------------------

$phone-width: 768px;

@mixin phone {
  @media (max-width: #{$phone-width}) {
    @content;
  }
}





---





selection.scss
--------------

%disable-selection {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

%invisible-selection {
  &::-moz-selection { background: none; }
  &::selection { background: none; }
}

%visible-selection {
  &::-moz-selection { background: highlight; }
  &::selection { background: highlight; }
}





---





toolbar.scss
------------

@import "./media-queries";
@import "./icons";

$font-size-normal: 0.75em;
$opacity-normal: 0.6;
$opacity-disabled: 0.125;
$opacity-active: 1;

trix-toolbar {
  * {
    box-sizing: border-box;
  }

  .trix-button-row {
    display: flex;
    flex-wrap: nowrap;
    justify-content: space-between;
    overflow-x: auto;
  }

  .trix-button-group {
    display: flex;
    margin-bottom: 10px;
    border: 1px solid #bbb;
    border-top-color: #ccc;
    border-bottom-color: #888;
    border-radius: 3px;

    &:not(:first-child) {
      margin-left: 1.5vw;

      @include phone {
        margin-left: 0;
      }
    }
  }

  .trix-button-group-spacer {
    flex-grow: 1;

    @include phone {
      display: none;
    }
  }

  .trix-button {
    position: relative;
    float: left; // Collapse whitespace between elements
    color: rgba(0,0,0, $opacity-normal);
    font-size: $font-size-normal;
    font-weight: 600;
    white-space: nowrap;
    padding: 0 0.5em;
    margin: 0;
    outline: none;
    border: none;
    border-bottom: 1px solid #ddd;
    border-radius: 0;
    background: transparent;

    &:not(:first-child) {
      border-left: 1px solid #ccc;
    }

    &.trix-active {
      background: #cbeefa;
      color: rgba(0,0,0, $opacity-active);
    }

    &:not(:disabled) {
      cursor: pointer;
    }

    &:disabled {
      color: rgba(0,0,0, $opacity-disabled);
    }

    @include phone {
      letter-spacing: -0.01em;
      padding: 0 0.3em;
    }
  }

  .trix-button--icon {
    font-size: inherit;
    width: 2.6em;
    height: 1.6em;
    max-width: calc(0.8em + 4vw);
    text-indent: -9999px;

    @include phone {
      height: 2em;
      max-width: calc(0.8em + 3.5vw);
    }

    &::before {
      display: inline-block;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      opacity: $opacity-normal;
      content: "";
      background-position: center;
      background-repeat: no-repeat;
      background-size: contain;

      @include phone {
        right: 6%;
        left: 6%;
      }
    }

    &.trix-active::before {
      opacity: $opacity-active;
    }

    &:disabled::before {
      opacity: $opacity-disabled;
    }
  }

  .trix-button--icon-attach::before { background-image: $icon-attach; top: 8%; bottom: 4%; }
  .trix-button--icon-bold::before { background-image: $icon-bold; }
  .trix-button--icon-italic::before { background-image: $icon-italic; }
  .trix-button--icon-link::before { background-image: $icon-link; }
  .trix-button--icon-strike::before { background-image: $icon-strike; }
  .trix-button--icon-quote::before { background-image: $icon-quote; }
  .trix-button--icon-heading-1::before { background-image: $icon-heading-1; }
  .trix-button--icon-code::before { background-image: $icon-code; }
  .trix-button--icon-bullet-list::before { background-image: $icon-bullets; }
  .trix-button--icon-number-list::before { background-image: $icon-numbers; }
  .trix-button--icon-undo::before { background-image: $icon-undo; }
  .trix-button--icon-redo::before { background-image: $icon-redo; }
  .trix-button--icon-decrease-nesting-level::before { background-image: $icon-nesting-level-decrease; }
  .trix-button--icon-increase-nesting-level::before { background-image: $icon-nesting-level-increase; }

  .trix-dialogs {
    position: relative;
  }

  .trix-dialog {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    font-size: $font-size-normal;
    padding: 15px 10px;
    background: #fff;
    box-shadow: 0 0.3em 1em #ccc;
    border-top: 2px solid #888;
    border-radius: 5px;
    z-index: 5;
  }

  .trix-input--dialog {
    font-size: inherit;
    font-weight: normal;
    padding: 0.5em 0.8em;
    margin: 0 10px 0 0;
    border-radius: 3px;
    border: 1px solid #bbb;
    background-color: #fff;
    box-shadow: none;
    outline: none;
    -webkit-appearance: none;
    -moz-appearance: none;

    &.validate:invalid {
      box-shadow: #F00 0px 0px 1.5px 1px;
    }
  }

  .trix-button--dialog {
    font-size: inherit;
    padding: 0.5em;
    border-bottom: none;
  }

  .trix-dialog--link {
    max-width: 600px;
  }

  .trix-dialog__link-fields {
    display: flex;
    align-items: baseline;

    .trix-input {
      flex: 1;
    }

    .trix-button-group {
      flex: 0 0 content;
      margin: 0;
    }
  }
}




---




trix.css
--------

trix-editor {
  border: 1px solid #bbb;
  border-radius: 20px;
  margin: 0;
  padding: 0.4em 0.6em;
  min-height: 5em;
  outline: none;
}

trix-toolbar * {
  box-sizing: border-box;
}

trix-toolbar .trix-button-row {
  display: flex;
  flex-wrap: nowrap;
  justify-content: space-between;
  overflow-x: auto;
}

trix-toolbar .trix-button-group {
  display: flex;
  margin-bottom: 20px;
  border: 1px solid #bbb;
  // border-top-color: #ccc;
  // border-bottom-color: #888;
  border-radius: 5px;
}

trix-toolbar .trix-button-group:not(:first-child) {
  margin-left: 1.5vw;
}

@media (max-device-width: 768px) {
  trix-toolbar .trix-button-group:not(:first-child) {
    margin-left: 0;
  }
}

trix-toolbar .trix-button-group-spacer {
  flex-grow: 1;
}

@media (max-device-width: 768px) {
  trix-toolbar .trix-button-group-spacer {
    display: none;
  }
}

trix-toolbar .trix-button {
  position: relative;
  float: left;
  color: rgba(0, 0, 0, 0.6);
  font-size: 0.75em;
  font-weight: 600;
  white-space: nowrap;
  padding: 0 0.5em;
  margin: 0;
  outline: none;
  border: none;
  border-bottom: 1px solid #ddd;
  border-radius: 0;
  background: transparent;
}

trix-toolbar .trix-button:not(:first-child) {
  border-left: 1px solid #ccc;
}

trix-toolbar .trix-button.trix-active {
  background: #cbeefa;
  color: black;
}

trix-toolbar .trix-button:hover {
  background: #DDDDDD;
  color: black;
  transition: 0.3s;
}

trix-toolbar .trix-button:not(:disabled) {
  cursor: pointer;
}

trix-toolbar .trix-button:disabled {
  color: rgba(0, 0, 0, 0.125);
}

@media (max-device-width: 768px) {
  trix-toolbar .trix-button {
    letter-spacing: -0.01em;
    padding: 0 0.3em;
  }
}

trix-toolbar .trix-button--icon {
  font-size: inherit;
  width: 2.6em;
  height: 1.6em;
  max-width: calc(0.8em + 4vw);
  text-indent: -9999px;
}

@media (max-device-width: 768px) {
  trix-toolbar .trix-button--icon {
    height: 2em;
    max-width: calc(0.8em + 3.5vw);
  }
}

trix-toolbar .trix-button--icon::before {
  display: inline-block;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  opacity: 0.5;
  content: "";
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
}

@media (max-device-width: 768px) {
  trix-toolbar .trix-button--icon::before {
    right: 6%;
    left: 6%;
  }
}

trix-toolbar .trix-button--icon.trix-active::before {
  opacity: 1;
}

trix-toolbar .trix-button--icon:disabled::before {
  opacity: 0.125;
}

trix-toolbar .trix-button--icon-attach::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M16.5%206v11.5a4%204%200%201%201-8%200V5a2.5%202.5%200%200%201%205%200v10.5a1%201%200%201%201-2%200V6H10v9.5a2.5%202.5%200%200%200%205%200V5a4%204%200%201%200-8%200v12.5a5.5%205.5%200%200%200%2011%200V6h-1.5z%22%2F%3E%3C%2Fsvg%3E);
  top: 8%;
  bottom: 4%;
}

trix-toolbar .trix-button--icon-bold::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M15.6%2011.8c1-.7%201.6-1.8%201.6-2.8a4%204%200%200%200-4-4H7v14h7c2.1%200%203.7-1.7%203.7-3.8%200-1.5-.8-2.8-2.1-3.4zM10%207.5h3a1.5%201.5%200%201%201%200%203h-3v-3zm3.5%209H10v-3h3.5a1.5%201.5%200%201%201%200%203z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-italic::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M10%205v3h2.2l-3.4%208H6v3h8v-3h-2.2l3.4-8H18V5h-8z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-link::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M9.88%2013.7a4.3%204.3%200%200%201%200-6.07l3.37-3.37a4.26%204.26%200%200%201%206.07%200%204.3%204.3%200%200%201%200%206.06l-1.96%201.72a.91.91%200%201%201-1.3-1.3l1.97-1.71a2.46%202.46%200%200%200-3.48-3.48l-3.38%203.37a2.46%202.46%200%200%200%200%203.48.91.91%200%201%201-1.3%201.3z%22%2F%3E%3Cpath%20d%3D%22M4.25%2019.46a4.3%204.3%200%200%201%200-6.07l1.93-1.9a.91.91%200%201%201%201.3%201.3l-1.93%201.9a2.46%202.46%200%200%200%203.48%203.48l3.37-3.38c.96-.96.96-2.52%200-3.48a.91.91%200%201%201%201.3-1.3%204.3%204.3%200%200%201%200%206.07l-3.38%203.38a4.26%204.26%200%200%201-6.07%200z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-strike::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M12.73%2014l.28.14c.26.15.45.3.57.44.12.14.18.3.18.5%200%20.3-.15.56-.44.75-.3.2-.76.3-1.39.3A13.52%2013.52%200%200%201%207%2014.95v3.37a10.64%2010.64%200%200%200%204.84.88c1.26%200%202.35-.19%203.28-.56.93-.37%201.64-.9%202.14-1.57s.74-1.45.74-2.32c0-.26-.02-.51-.06-.75h-5.21zm-5.5-4c-.08-.34-.12-.7-.12-1.1%200-1.29.52-2.3%201.58-3.02%201.05-.72%202.5-1.08%204.34-1.08%201.62%200%203.28.34%204.97%201l-1.3%202.93c-1.47-.6-2.73-.9-3.8-.9-.55%200-.96.08-1.2.26-.26.17-.38.38-.38.64%200%20.27.16.52.48.74.17.12.53.3%201.05.53H7.23zM3%2013h18v-2H3v2z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-quote::before {
  background-image: url(data:image/svg+xml,%3Csvg%20version%3D%221%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M6%2017h3l2-4V7H5v6h3zm8%200h3l2-4V7h-6v6h3z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-heading-1::before {
  background-image: url(data:image/svg+xml,%3Csvg%20version%3D%221%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M12%209v3H9v7H6v-7H3V9h9zM8%204h14v3h-6v12h-3V7H8V4z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-code::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M18.2%2012L15%2015.2l1.4%201.4L21%2012l-4.6-4.6L15%208.8l3.2%203.2zM5.8%2012L9%208.8%207.6%207.4%203%2012l4.6%204.6L9%2015.2%205.8%2012z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-bullet-list::before {
  background-image: url(data:image/svg+xml,%3Csvg%20version%3D%221%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M4%204a2%202%200%201%200%200%204%202%202%200%200%200%200-4zm0%206a2%202%200%201%200%200%204%202%202%200%200%200%200-4zm0%206a2%202%200%201%200%200%204%202%202%200%200%200%200-4zm4%203h14v-2H8v2zm0-6h14v-2H8v2zm0-8v2h14V5H8z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-number-list::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M2%2017h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1%203h1.8L2%2013.1v.9h3v-1H3.2L5%2010.9V10H2v1zm5-6v2h14V5H7zm0%2014h14v-2H7v2zm0-6h14v-2H7v2z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-undo::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M12.5%208c-2.6%200-5%201-6.9%202.6L2%207v9h9l-3.6-3.6A8%208%200%200%201%2020%2016l2.4-.8a10.5%2010.5%200%200%200-10-7.2z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-redo::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M18.4%2010.6a10.5%2010.5%200%200%200-16.9%204.6L4%2016a8%208%200%200%201%2012.7-3.6L13%2016h9V7l-3.6%203.6z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-decrease-nesting-level::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M3%2019h19v-2H3v2zm7-6h12v-2H10v2zm-8.3-.3l2.8%202.9L6%2014.2%204%2012l2-2-1.4-1.5L1%2012l.7.7zM3%205v2h19V5H3z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-button--icon-increase-nesting-level::before {
  background-image: url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%3E%3Cpath%20d%3D%22M3%2019h19v-2H3v2zm7-6h12v-2H10v2zm-6.9-1L1%2014.2l1.4%201.4L6%2012l-.7-.7-2.8-2.8L1%209.9%203.1%2012zM3%205v2h19V5H3z%22%2F%3E%3C%2Fsvg%3E);
}

trix-toolbar .trix-dialogs {
  position: relative;
}

trix-toolbar .trix-dialog {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  font-size: 0.75em;
  padding: 15px 10px;
  background: #fff;
  box-shadow: 0 0.3em 1em #ccc;
  border-top: 2px solid #888;
  border-radius: 5px;
  z-index: 5;
}

trix-toolbar .trix-input--dialog {
  font-size: inherit;
  font-weight: normal;
  padding: 0.5em 0.8em;
  margin: 0 10px 0 0;
  border-radius: 3px;
  border: 1px solid #bbb;
  background-color: #fff;
  box-shadow: none;
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}

trix-toolbar .trix-input--dialog.validate:invalid {
  box-shadow: #F00 0px 0px 1.5px 1px;
}

trix-toolbar .trix-button--dialog {
  font-size: inherit;
  padding: 0.5em;
  border-bottom: none;
}

trix-toolbar .trix-dialog--link {
  max-width: 600px;
}

trix-toolbar .trix-dialog__link-fields {
  display: flex;
  align-items: baseline;
}

trix-toolbar .trix-dialog__link-fields .trix-input {
  flex: 1;
}

trix-toolbar .trix-dialog__link-fields .trix-button-group {
  flex: 0 0 content;
  margin: 0;
}

trix-editor [data-trix-mutable]:not(.attachment__caption-editor) {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

trix-editor [data-trix-mutable]::-moz-selection,
trix-editor [data-trix-cursor-target]::-moz-selection, trix-editor [data-trix-mutable] ::-moz-selection {
  background: none;
}

trix-editor [data-trix-mutable]::selection,
trix-editor [data-trix-cursor-target]::selection, trix-editor [data-trix-mutable] ::selection {
  background: none;
}

trix-editor [data-trix-mutable].attachment__caption-editor:focus::-moz-selection {
  background: highlight;
}

trix-editor [data-trix-mutable].attachment__caption-editor:focus::selection {
  background: highlight;
}

trix-editor [data-trix-mutable].attachment.attachment--file {
  box-shadow: 0 0 0 2px highlight;
  border-color: transparent;
}

trix-editor [data-trix-mutable].attachment img {
  box-shadow: 0 0 0 2px highlight;
}

trix-editor .attachment {
  position: relative;
}

trix-editor .attachment:hover {
  cursor: default;
}

trix-editor .attachment--preview .attachment__caption:hover {
  cursor: text;
}

trix-editor .attachment__progress {
  position: absolute;
  z-index: 1;
  height: 20px;
  top: calc(50% - 10px);
  left: 5%;
  width: 90%;
  opacity: 0.9;
  transition: opacity 200ms ease-in;
}

trix-editor .attachment__progress[value="100"] {
  opacity: 0;
}

trix-editor .attachment__caption-editor {
  display: inline-block;
  width: 100%;
  margin: 0;
  padding: 0;
  font-size: inherit;
  font-family: inherit;
  line-height: inherit;
  color: inherit;
  text-align: center;
  vertical-align: top;
  border: none;
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}

trix-editor .attachment__toolbar {
  position: absolute;
  z-index: 1;
  top: -0.9em;
  left: 0;
  width: 100%;
  text-align: center;
}

trix-editor .trix-button-group {
  display: inline-flex;
}

trix-editor .trix-button {
  position: relative;
  float: left;
  color: #666;
  white-space: nowrap;
  font-size: 80%;
  padding: 0 0.8em;
  margin: 0;
  outline: none;
  border: none;
  border-radius: 0;
  background: transparent;
}

trix-editor .trix-button:not(:first-child) {
  border-left: 1px solid #ccc;
}

trix-editor .trix-button.trix-active {
  background: #cbeefa;
}

trix-editor .trix-button:not(:disabled) {
  cursor: pointer;
}

trix-editor .trix-button--remove {
  text-indent: -9999px;
  display: inline-block;
  padding: 0;
  outline: none;
  width: 1.8em;
  height: 1.8em;
  line-height: 1.8em;
  border-radius: 50%;
  background-color: #fff;
  border: 2px solid highlight;
  box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.25);
}

trix-editor .trix-button--remove::before {
  display: inline-block;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  opacity: 0.7;
  content: "";
  background-image: url(data:image/svg+xml,%3Csvg%20height%3D%2224%22%20width%3D%2224%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M19%206.4L17.6%205%2012%2010.6%206.4%205%205%206.4l5.6%205.6L5%2017.6%206.4%2019l5.6-5.6%205.6%205.6%201.4-1.4-5.6-5.6z%22%2F%3E%3Cpath%20d%3D%22M0%200h24v24H0z%22%20fill%3D%22none%22%2F%3E%3C%2Fsvg%3E);
  background-position: center;
  background-repeat: no-repeat;
  background-size: 90%;
}

trix-editor .trix-button--remove:hover {
  border-color: #333;
}

trix-editor .trix-button--remove:hover::before {
  opacity: 1;
}

trix-editor .attachment__metadata-container {
  position: relative;
}

trix-editor .attachment__metadata {
  position: absolute;
  left: 50%;
  top: 2em;
  transform: translate(-50%, 0);
  max-width: 90%;
  padding: 0.1em 0.6em;
  font-size: 0.8em;
  color: #fff;
  background-color: rgba(0, 0, 0, 0.7);
  border-radius: 3px;
}

trix-editor .attachment__metadata .attachment__name {
  display: inline-block;
  max-width: 100%;
  vertical-align: bottom;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

trix-editor .attachment__metadata .attachment__size {
  margin-left: 0.2em;
  white-space: nowrap;
}

@charset "UTF-8";
.trix-content {
  line-height: 1.5;
}

.trix-content * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.trix-content h1 {
  font-size: 1.2em;
  line-height: 1.2;
}

.trix-content blockquote {
  border: 0 solid #ccc;
  border-left-width: 0.3em;
  margin-left: 0.3em;
  padding-left: 0.6em;
}

.trix-content [dir=rtl] blockquote,
.trix-content blockquote[dir=rtl] {
  border-width: 0;
  border-right-width: 0.3em;
  margin-right: 0.3em;
  padding-right: 0.6em;
}

.trix-content li {
  margin-left: 1em;
}

.trix-content [dir=rtl] li {
  margin-right: 1em;
}

.trix-content pre {
  display: inline-block;
  width: 100%;
  vertical-align: top;
  font-family: monospace;
  font-size: 0.9em;
  padding: 0.5em;
  white-space: pre;
  background-color: #eee;
  overflow-x: auto;
}

.trix-content img {
  max-width: 100%;
  height: auto;
}

.trix-content .attachment {
  display: inline-block;
  position: relative;
  max-width: 100%;
}

.trix-content .attachment a {
  color: inherit;
  text-decoration: none;
}

.trix-content .attachment a:hover, .trix-content .attachment a:visited:hover {
  color: inherit;
}

.trix-content .attachment__caption {
  text-align: center;
}

.trix-content .attachment__caption .attachment__name + .attachment__size::before {
  content: ' · ';
}

.trix-content .attachment--preview {
  width: 100%;
  text-align: center;
}

.trix-content .attachment--preview .attachment__caption {
  color: #666;
  font-size: 0.9em;
  line-height: 1.2;
}

.trix-content .attachment--file {
  color: #333;
  line-height: 1;
  margin: 0 2px 2px 2px;
  padding: 0.4em 1em;
  border: 1px solid #bbb;
  border-radius: 5px;
}

.trix-content .attachment-gallery {
  display: flex;
  flex-wrap: wrap;
  position: relative;
}

.trix-content .attachment-gallery .attachment {
  flex: 1 0 33%;
  padding: 0 0.5em;
  max-width: 33%;
}

.trix-content .attachment-gallery.attachment-gallery--2 .attachment, .trix-content .attachment-gallery.attachment-gallery--4 .attachment {
  flex-basis: 50%;
  max-width: 50%;
}






--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add avatar with carrierwave gem
-------------------------------


---1---

---v1---

Gemfile
-------

gem 'carrierwave', '~> 2.0'
gem 'mini_magick'



---v2---

application path
----------------

$ gem install carrierwave


$ bundle
$ bundle update



---3---

$ rails generate uploader Avatar


should give you a file in
-------------------------

!!! app/uploaders/avatar_uploader.rb



---4---

app/uploaders/avatar_uploader.rb
--------------------------------

class AvatarUploader < CarrierWave::Uploader::Base
  storage :file
end


class MyUploader < CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick

  process resize_to_fit: [800, 800]

  version :thumb do
    process resize_to_fill: [200,200]
  end
end


uploader = AvatarUploader.new
uploader.store!(my_file)                              # size: 1024x768

uploader.url # => '/url/to/my_file.png'               # size: 800x800
uploader.thumb.url # => '/url/to/thumb_my_file.png'   # size: 200x200



---



You can use your uploader class to store and retrieve files like this
---------------------------------------------------------------------

uploader = AvatarUploader.new
uploader.store!(my_file)
uploader.retrieve_from_store!('my_file.png')



---5---

Add a string column to the model
--------------------------------

$ rails g migration add_avatar_to_users avatar:string && rails db:migrate



---6---

Open your model file and mount the uploader
-------------------------------------------

class User < ApplicationRecord
  mount_uploader :avatar, AvatarUploader
end


mount_uploader :avatar, AvatarUploader



---7---

Cache files by assigning them to the attribute
----------------------------------------------

u = User.new
u.avatar = params[:file] # Assign a file like this, or



like this
---------

File.open('somewhere') do |f|
  u.avatar = f
end

u.save!
u.avatar.url # => '/url/to/file.png'
u.avatar.current_path # => 'path/to/file.png'
u.avatar_identifier # => 'file.png'



---8---

Methods
-------

u = User.new
u.avatar.file.nil?



---9---

Add _form to template.html.erb
------------------------------

<%= form.file_field :avatar %>



Upload controller permits
-------------------------

params.require(:user).permit(:email, :first_name, :last_name, :avatar, :avatar_cache)



application_controller.rb
-------------------------

before_action :configure_permitted_parameters, if: :devise_controller?

protected

def configure_permitted_parameters
  added_attrs = [:username, :email, :password, :password_confirmation, :remember_me, :avatar]

  devise_parameter_sanitizer.permit :sign_up, keys: added_attrs
  devise_parameter_sanitizer.permit :sign_in, keys: [:login, :password]
  devise_parameter_sanitizer.permit :account_update, keys: added_attrs
end



---10---

Add avatar_cache it to the attr_accessible
------------------------------------------

_form.html.erb
--------------

<%= form_for @user, html: { multipart: true } do |f| %>
  <%= f.label :avatar %>
  <%= f.file_field :avatar %>
  <%= f.hidden_field :avatar_cache %>
<% end %>


<%= f.hidden_field :avatar_cache %>



Add input field to _form.html.erb
---------------------------------

---v1---

<div class="form-group">
  <%= form.label 'Product Image' %>

  <div class="custom-file">
    <%= form.label 'Choose file', class: 'custom-file-label' %>
    <%= form.file_field :image, type: 'file', class: 'custom-file-input' %>
    <%= form.hidden_field :image_cache %>
  </div>
</div>



---11---

Removing uploaded files
-----------------------

_form.html.erb
--------------

---v1---

<%= form_for @user, html: { multipart: true } do |f| %>
  <%= f.label :avatar %>
  <%= image_tag(@user.avatar_url) if @user.avatar? %>
  <%= f.file_field :avatar %>

  <%= f.check_box :remove_avatar %>
  <%= f.label 'Remove avatar' %>

<% end %>



---v2---

<div class="form-group">
  <%= f.label 'Profile avatar' %>
  <div class="custom-file">
    <%= f.label :avatar, class: 'custom-file-label' %>
    <%= f.file_field :avatar, type: 'file', class: 'custom-file-input' %>
    <%= f.hidden_field :avatar_cache %>
  </div>
</div>



Remove the file manually
------------------------

@user.remove_avatar!
@user.save



---12---

Uploading files from a remote location (from internet)
------------------------------------------------------

_form.html.erb
--------------

<%= form_for @user, html: { multipart: true } do |f| %>
  <%= f.label :avatar %>
  <%= image_tag(@user.avatar_url) if @user.avatar? %>
  <%= f.text_field :remote_avatar_url %>
<% end %>



---13---

Providing a default URL
-----------------------

Uploader.rb
-----------

---v1---

class MyUploader < CarrierWave::Uploader::Base
  def default_url(*args)
    "/images/fallback/" + [version_name, "default.png"].compact.join('_')
  end
end



---v2---

If using the Rails asset pipeline
---------------------------------

class MyUploader < CarrierWave::Uploader::Base
  def default_url(*args)
    ActionController::Base.helpers.asset_path("fallback/" + [version_name, "default.png"].compact.join('_'))
  end
end



---14---

Recreating versions
-------------------

model.rb
--------

---v1---

instance = MyUploader.new
instance.recreate_versions!(:thumb, :large)



---v2---

On a mounted uploader
---------------------

User.find_each do |user|
  user.avatar.recreate_versions! if user.avatar?
end



---15---

Configuring CarrierWave
-----------------------

---v1---

Create in initializer for this
------------------------------

$ config/initializers/carrierwave.rb


CarrierWave.configure do |config|
  config.permissions = 0666
  config.directory_permissions = 0777
  config.storage = :file
end



---v2---

class AvatarUploader < CarrierWave::Uploader::Base
  permissions 0777
end


If you want CarrierWave to fail noisily in development, you can change these configs in your environment file
-------------------------------------------------------------------------------------------------------------

CarrierWave.configure do |config|
  config.ignore_integrity_errors = false
  config.ignore_processing_errors = false
  config.ignore_download_errors = false
end



---16---

Carrierwave helper snippents
----------------------------

application_helper.rb
---------------------

---v1---

def profile_picture account, width
  image_path = account.avatar.present? ? account.avatar.url : 'profile.jpg'
  image_tag(image_path, width: width, height: width, class: 'rounded')
end


<%= profile_picture current_account, 40 %>

<%= link_to profile_picture(current_account, 40), edit_account_registration_path(current_account) %>



---v2---

def product_image product, width, height
  image_path = product.image.present? ? product.image.url : 'product.png'
  image_tag(image_path, width: width, height: height, class: 'rounded')
end


display snippet in template.html.erb
------------------------------------

<%= product_image(@product, 300, 200) %>


<% @products.each do |product| %>
  <%= product_image(product, 60, 45) %>
<% end %>


<%= image_tag(@category.products.first.image.url, class: 'rounded')



---v3---

def profile_picture account, width = 100
  image_path = account.image.present? ? account.image.url : 'default_profile.jpg'
  image_tag(image_path, width: width, class: 'img-circle m-r-10')
end


<%= profile_picture(account, 40) %>
<%= link_to profile_picture(account, 40), profile_path(account.username) %>
<%= image_tag post.image.url, class: 'img img-fluid' %>
<%= profile_picture @account, 200 %>



---v4---

def product_image product
  image_path = product.image.present? ? product.image.url : 'product.jpg'
  image_tag(image_path, class: 'img-fluid')
end

<% if cat.products.first.present? %>
  <%= product_image @category.products.first %>
<% end %>


<%= @product.image.identifier %>





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Multiple file uploads with carrierwave
--------------------------------------


---1---

---v1---

Gemfile
-------

gem 'carrierwave', '~> 2.0'
gem 'mini_magick'



---v2---

application path
----------------

$ gem install carrierwave


$ bundle
$ bundle update



---3---

$ rails generate uploader Image


should give you a file in
-------------------------

!!! app/uploaders/image_uploader.rb



---4---

app/uploaders/avatar_uploader.rb
--------------------------------

class AvatarUploader < CarrierWave::Uploader::Base
  storage :file
end


class MyUploader < CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick

  process resize_to_fit: [800, 800]

  version :thumb do
    process resize_to_fill: [200,200]
  end
end


uploader = AvatarUploader.new
uploader.store!(my_file)                              # size: 1024x768

uploader.url                                          # => '/url/to/my_file.png'         # size: 800x800
uploader.thumb.url                                    # => '/url/to/thumb_my_file.png'   # size: 200x200



---5---

Open your model file and mount the uploader
-------------------------------------------

class User < ApplicationRecord
  mount_uploaders :avatars, AvatarUploader
end

mount_uploaders :avatars, AvatarUploader



---6---

Add _form to template.html.erb
------------------------------

<%= form.file_field :avatars, multiple: true %>



Upload controller permits
-------------------------

params.require(:user).permit(:email, :first_name, :last_name, { avatars: [] })



application_controller.rb
-------------------------

before_action :configure_permitted_parameters, if: :devise_controller?

protected

def configure_permitted_parameters
  added_attrs = [:username, :email, :password, :password_confirmation, :remember_me, { avatars: [] }]

  devise_parameter_sanitizer.permit :sign_up, keys: added_attrs
  devise_parameter_sanitizer.permit :sign_in, keys: [:login, :password]
  devise_parameter_sanitizer.permit :account_update, keys: added_attrs
end



Select multiple files in the upload dialog
------------------------------------------

u = User.new(params[:user])
u.save!
u.avatars[0].url # => '/url/to/file.png'
u.avatars[0].current_path # => 'path/to/file.png'
u.avatars[0].identifier # => 'file.png'



---7---

Preserve existing files on uploading new one
--------------------------------------------

<% user.avatars.each do |avatar| %>
  <%= hidden_field :user, :avatars, multiple: true, value: avatar.identifier %>
<% end %>

<%= form.file_field :avatars, multiple: true %>



Changing the storage directory
------------------------------

if storage == AWS
-----------------

class MyUploader < CarrierWave::Uploader::Base
  def store_dir
    'public/my/upload/directory'
  end
end



if storage == file
------------------

class MyUploader < CarrierWave::Uploader::Base
  def cache_dir
    '/tmp/projectname-cache'
  end
end



---8---

Securing uploads
----------------

Uploader.rb
-----------

file with the wrong extension
-----------------------------

class MyUploader < CarrierWave::Uploader::Base
  def extension_allowlist
    %w(jpg jpeg gif png)
  end
end



uploader that accepts only images
---------------------------------

class MyUploader < CarrierWave::Uploader::Base
  def content_type_allowlist
    /image\//
  end
end



reject content types
--------------------

class NoJsonUploader < CarrierWave::Uploader::Base
  def content_type_denylist
    ['application/text', 'application/json']
  end
end



Filenames and unicode chars
---------------------------

CarrierWave::SanitizedFile.sanitize_regexp = /[^[:word:]\.\-\+]/



---9---

Processing Methods: mini_magick
-------------------------------

convert
resize_to_limit
resize_to_fit
resize_to_fill
resize_and_pad

!!! See carrierwave/processing/mini_magick.rb for details.



Conditional process
-------------------

uploader.rb
-----------

class MyUploader < CarrierWave::Uploader::Base
  process :scale => [200, 200], :if => :image?

  def image?(carrier_wave_sanitized_file)
    true
  end
end



Nested versions
---------------

Uploader.rb
-----------

class MyUploader < CarrierWave::Uploader::Base
  version :animal do
    version :human
    version :monkey
    version :llama
  end

end



Conditional versions
--------------------

Uploader.rb
-----------

class MyUploader < CarrierWave::Uploader::Base
  version :human, if: :is_human?
  version :monkey, if: :is_monkey?
  version :banner, if: :is_landscape?

  private

  def is_human? picture
    model.can_program?(:ruby)
  end

  def is_monkey? picture
    model.favorite_food == 'banana'
  end

  def is_landscape? picture
    image = MiniMagick::Image.new(picture.path)
    image[:width] > image[:height]
  end
end



Create versions from existing versions
--------------------------------------

Uploader.rb
-----------

class MyUploader < CarrierWave::Uploader::Base
  version :thumb do
    process resize_to_fill: [280, 280]
  end

  version :small_thumb, from_version: :thumb do
    process resize_to_fill: [20, 20]
  end
end



---10---

Add avatar_cache in to the attr_accessible
------------------------------------------

_form.html.erb
--------------

---v1---

<%= form_for @user, html: { multipart: true } do |f| %>
  <%= f.label :avatar %>
  <%= f.file_field :avatar %>
  <%= f.hidden_field :avatar_cache %>
<% end %>


<%= f.hidden_field :avatar_cache %>



Add input field to _form.html.erb
---------------------------------

---v1---

<div class="mb-3">
  <div class="mb-3">
    <%= f.label :avatars, class: 'form-label mb-3' %><br>
    <%= f.file_field :avatars, type: 'file', multiple: true, class: 'form-control' %>
    <%= f.hidden_field :avatars_cache %>
  </div>

  <div class="mt-3 mb-3">
    <%= image_tag(resource.avatars.url, width: '200') if resource.avatars? %>
  </div>
</div>



---v2---

<%= form_for @user, html: { multipart: true } do |f| %>

  <%= f.label :avatar %>
  <%= image_tag(@user.avatar_url) if @user.avatar? %>

  <%= f.file_field :avatar %>
  <%= f.hidden_field :avatar_cache %>
<% end %>



---11---

Removing uploaded files
-----------------------

_form.html.erb
--------------

---v1---

<%= form_for @user, html: { multipart: true } do |f| %>

  <%= f.label :avatar %>
  <%= image_tag(@user.avatar_url) if @user.avatar? %>
  <%= f.file_field :avatar %>

  <%= f.check_box :remove_avatar %>
  <%= f.label 'Remove avatar' %>

<% end %>



---v2---

<div class="form-group">
  <%= f.label 'Profile avatar' %>
  <div class="custom-file">
    <%= f.label :avatar, class: 'custom-file-label' %>
    <%= f.file_field :avatar, type: 'file', class: 'custom-file-input' %>
    <%= f.hidden_field :avatar_cache %>
  </div>
</div>



Remove the file manually
------------------------

@user.remove_avatar!
@user.save



---12---

Uploading files from a remote location (from internet)
------------------------------------------------------

_form.html.erb
--------------

<%= form_for @user, html: { multipart: true } do |f| %>
  <%= f.label :avatar %>
  <%= image_tag(@user.avatar_url) if @user.avatar? %>

  <%= f.text_field :remote_avatar_url %>
<% end %>



---13---

Providing a default URL
-----------------------

Uploader.rb
-----------

---v1---

class MyUploader < CarrierWave::Uploader::Base
  def default_url(*args)
    "/images/fallback/" + [version_name, "default.png"].compact.join('_')
  end
end



---v2---

If using the Rails asset pipeline
---------------------------------

class MyUploader < CarrierWave::Uploader::Base
  def default_url(*args)
    ActionController::Base.helpers.asset_path("fallback/" + [version_name, "default.png"].compact.join('_'))
  end
end



---14---

Recreating versions
-------------------

model.rb
--------

---v1---

instance = MyUploader.new
instance.recreate_versions!(:thumb, :large)



---v2---

On a mounted uploader
---------------------

User.find_each do |user|
  user.avatar.recreate_versions! if user.avatar?
end



---15---

Configuring CarrierWave
-----------------------

---v1---

Create in initializer for this
------------------------------

$ config/initializers/carrierwave.rb


CarrierWave.configure do |config|
  config.permissions = 0666
  config.directory_permissions = 0777
  config.storage = :file
end



---v2---

class AvatarUploader < CarrierWave::Uploader::Base
  permissions 0777
end


If you want CarrierWave to fail noisily in development, you can change these configs in your environment file
-------------------------------------------------------------------------------------------------------------

CarrierWave.configure do |config|
  config.ignore_integrity_errors = false
  config.ignore_processing_errors = false
  config.ignore_download_errors = false
end



---16---

Carrierwave helper snippents
----------------------------

application_helper.rb
---------------------

---v1---

def profile_picture account, width
  image_path = account.avatar.present? ? account.avatar.url : 'profile.jpg'
  image_tag(image_path, width: width, height: width, class: 'rounded')
end


<%= profile_picture current_account, 40 %>

<%= link_to profile_picture(current_account, 40), edit_account_registration_path(current_account) %>



---v2---

def product_image product, width, height
  image_path = product.image.present? ? product.image.url : 'product.png'
  image_tag(image_path, width: width, height: height, class: 'rounded')
end


display snippet in template.html.erb
------------------------------------


<%= product_image(@product, 300, 200) %>


<% @products.each do |product| %>
  <%= product_image(product, 60, 45) %>
<% end %>


<%= image_tag(@category.products.first.image.url, class: 'rounded')



---v3---

def profile_picture account, width = 100
  image_path = account.image.present? ? account.image.url : 'default_profile.jpg'
  image_tag(image_path, width: width, class: 'img-circle m-r-10')
end


<%= profile_picture(account, 40) %>
<%= link_to profile_picture(account, 40), profile_path(account.username) %>
<%= image_tag post.image.url, class: 'img img-fluid' %>
<%= profile_picture @account, 200 %>



---v4---

def product_image product
  image_path = product.image.present? ? product.image.url : 'product.jpg'
  image_tag(image_path, class: 'img-fluid')
end

<% if cat.products.first.present? %>
  <%= product_image @category.products.first %>
<% end %>


<%= @product.image.identifier %>




---



https://gist.github.com/nguyenngoc2505/93494b8fea2224f2fab6





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

HTML5 Datalist using Ruby on Rails form_for
-------------------------------------------


---v1---

<%= form_for @person do |f| %>
  <%= f.label :first_name, "First Name" %>:
  <%= f.text_field :first_name, list: 'first-name' %>

  <datalist id="first-name">
    <% Person.all.each do |person| %>
      <option value="<%= person.first_name %>"></option>
    <% end %>
  </datalist>

  <%= f.submit %>
<% end %>


You may also want to do distinct
--------------------------------

<% Person.select(:first_name).distinct.each do |person| %>



---



modules
-------

<div class="row p-5 shadow bg-white mb-5">
  <%= form.label :manufacturers, for: 'manufacturerDataList', class: 'mb-3' %>
  <%= form.select :manufacturers, mod.manufacturers.collect { |u| [u] }, {}, { class: 'form-control' } %>

  <datalist id="datalistOptions">
    <%= mod.manufacturers.each do |module_manufacturer| %>
      <option value="<% module_manufacturer %>">
    <% end %>
  </datalist>
</div>



---v2---

<%= options_for_select(Person.pluck(:first_name).uniq, @person.first_name) %>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Shopping Cart
-------------------


---1---

Rails generate Model commands
-----------------------------

rails g model Product name:string price:decimal
rails g model Cart
rails g model LineItem quantity:integer product_id:integer cart_id:integer order_id:integer
rails g model Order name:string email:string address:text



---2---

Database schema reference
-------------------------

create_table "products", force: :cascade do |t|
  t.string   "name"
  t.decimal  "price",      default: 0.0
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
end

create_table "carts", force: :cascade do |t|
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
end

create_table "line_items", force: :cascade do |t|
  t.integer  "quantity",   default: 1
  t.integer  "product_id"
  t.integer  "cart_id"
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
  t.integer  "order_id"
end

create_table "orders", force: :cascade do |t|
  t.string   "name"
  t.string   "email"
  t.text     "address"
  t.string   "pay_method"
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
end



---3---

Seed database with initial models
---------------------------------

PRODUCT
-------

Product.destroy_all

product1 = Product.create({:name=>"tomato", :price => 1})
product2 = Product.create({:name=>"milk", :price => 3})
product3 = Product.create({:name=>"bread", :price => 5.50})
product4 = Product.create({:name=>"bacon", :price => 10})
product5 = Product.create({:name=>"cheese", :price => 3.20})

puts "Total number of products: #{Product.all.count}"
puts "Product names: #{Product.all.pluck("name")}"
puts "Product1: #{product1.name} price: #{product1.price.round(2)}"
puts "Product2: #{product2.name} price: #{product2.price.round(2)}"
puts "Product3: #{product3.name} price: #{product3.price.round(2)}"
puts "Product4: #{product4.name} price: #{product4.price.round(2)}"
puts "Product5: #{product5.name} price: #{product5.price.round(2)}"


CART
----

Cart.destroy_all

puts "\nTotal cart count: #{Cart.all.count}"



---4---

Rails generate Controller commands
----------------------------------

$ rails g controller Products index new edit
$ rails g controller LineItems
$ rails g controller Carts show
$ rails g controller Orders index show new



---5---

Routes setup
------------

root 'products#index'

get 'carts/:id' => "carts#show", as: "cart"
delete 'carts/:id' => "carts#destroy"

post 'line_items/:id/add' => "line_items#add_quantity", as: "line_item_add"
post 'line_items/:id/reduce' => "line_items#reduce_quantity", as: "line_item_reduce"
post 'line_items' => "line_items#create"
get 'line_items/:id' => "line_items#show", as: "line_item"
delete 'line_items/:id' => "line_items#destroy"

resources :products
resources :orders



links
-----

Link from the Product index page (erb tags)
-------------------------------------------

button_to "Add to cart", line_items_path(:product_id => product.id)



Link from the Cart show (erb tags)
----------------------------------

link_to "Add (+1)", line_item_add_path(:id => line_item), method: :post
link_to "Reduce (-1)", line_item_reduce_path(:id => line_item), method: :post
link_to "Remove item", line_item_path(line_item), method: :delete



---6---

Products Controller
-------------------

class ProductsController < ApplicationController
  def index
    @products = Product.all
  end

  def new
    @product = Product.new
  end

  def create
    @product = Product.create(product_params)
    redirect_to products_path
  end

  def edit
    @product = Product.find(params[:id])
  end

  def update
    @product = Product.find(params[:id])
    @product.update(product_params)
    redirect_to products_path
  end

  def destroy
    @product = Product.find(params[:id])
    @product.destroy
    redirect_to products_path
  end

  private

  def product_params
    params.require(:product).permit(:name, :price)
  end
end



---7---

Product Views
-------------

Product Index show page
-----------------------

<h2>All Products</h2>

<% @products.each do |product| %>
  <p>Name: <%= product.name %>; unit price of <%= number_to_currency(product.price) %></p>

  <p>
    <%= link_to "Edit", edit_product_path(product) %> |
    <%= link_to "Delete", product_path(product), method: :delete, data: {confirm: "Are you sure?"} %>
    <%= button_to "Add #{product.name} to cart", line_items_path(:product_id => product.id) %>
  </p>
<% end%>

<%= link_to "New product", new_product_path



Product New and Edit form partial
---------------------------------

<%= form_for(@product) do |f| %>
  <p>
    <%= f.label :name %><br>
    <%= f.text_field :name, required: true, autofocus: true, placeholder: "Enter product name" %>
  </p>
  <p>
    <%= f.label :price %><br>
    <%= f.number_field :price, required: true %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>



---8---

Cart
----

Carts Controller
----------------

class ApplicationController < ActionController::Base
  protect_from_forgery with: :exception

  before_action :current_cart

  private

  def current_cart
    if session[:cart_id]
      cart = Cart.find_by(:id => session[:cart_id])

      if cart.present?
        @current_cart = cart
      else
        session[:cart_id] = nil
      end
    end

    if session[:cart_id] == nil
      @current_cart = Cart.create
      session[:cart_id] = @current_cart.id
    end
  end
end


class CartsController < ApplicationController
  def show
    @cart = @current_cart
  end

  def destroy
    @cart = @current_cart
    @cart.destroy
    session[:cart_id] = nil
    redirect_to root_path
  end
end



---9---

Cart View
---------

<h2>Cart show</h2>

<ul>
  <% @cart.line_items.each do |line_item| %>
    <li>Item: <%= line_item.product.name %>/ Price: <%= number_to_currency(line_item.product.price) %>/ Quantity: <%= line_item.quantity %>/ Total Price: <%= number_to_currency(line_item.total_price) %>
    <ul>
      <li>
        <%= link_to "Add one", line_item_add_path(:id => line_item), method: :post %>
        <%= link_to "Reduce one", line_item_reduce_path(:id => line_item), method: :post %>
      </li>
      <li>
        <%= link_to "Remove item", line_item_path(line_item), method: :delete %>
      </li>
    </ul>
  <% end %>
</ul>

<h3>Sub total: <%= number_to_currency(@cart.sub_total) %></h3>


<%= link_to "Proceed to checkout", new_order_path %><br>
<%= link_to "Empty cart", cart_path(@current_cart),method: :delete, data: {confirm: "Are you sure?"}



---10---

Model Helpers
-------------

class LineItem < ActiveRecord::Base
  belongs_to :product
  belongs_to :cart
  belongs_to :order

  def total_price
    self.quantity * self.product.price
  end
end

class Cart < ActiveRecord::Base
  has_many :line_items, dependent: :destroy
  has_many :products, through: :line_items

  def sub_total
    sum = 0

    self.line_items.each do |line_item|
      sum+= line_item.total_price
    end
    return sum
  end
end



---11---

LineItem
--------


def create
  chosen_product = Product.find(params[:product_id])
  current_cart = @current_cart

  if current_cart.products.include?(chosen_product)
    @line_item = current_cart.line_items.find_by(:product_id => chosen_product)
    @line_item.quantity += 1
  else
    @line_item = LineItem.new
    @line_item.cart = current_cart
    @line_item.product = chosen_product
  end

  @line_item.save

  redirect_to cart_path(current_cart)
end

private

def line_item_params
  params.require(:line_item).permit(:quantity,:product_id, :cart_id)
end



View link
---------

button_to "Add #{product.name} to cart", line_items_path(:product_id => product.id)



Routes url
----------

post 'line_items' => "line_items#create"



Destroy LineItem
----------------

Controller logic
----------------

def destroy
  @line_item = LineItem.find(params[:id])
  @line_item.destroy
  redirect_to cart_path(@current_cart)
end



View link
---------

link_to "Remove item", line_item_path(line_item), method: :delete



Routes url
----------

get 'line_items/:id' => "line_items#show", as: "line_item"
delete 'line_items/:id' => "line_items#destroy"



add_quantity and remove_quantity
--------------------------------

Controller logic
----------------

def add_quantity
  @line_item = LineItem.find(params[:id])
  @line_item.quantity += 1
  @line_item.save

  redirect_to cart_path(@current_cart)
end

def reduce_quantity
  @line_item = LineItem.find(params[:id])

  if @line_item.quantity > 1
    @line_item.quantity -= 1
  end

  @line_item.save

  redirect_to cart_path(@current_cart)
end



View link
---------

link_to "Add one", line_item_add_path(:id => line_item), method: :post
link_to "Reduce one", line_item_reduce_path(:id => line_item), method: :post



Routes url
----------

post 'line_items/:id/add' => "line_items#add_quantity", as: "line_item_add"
post 'line_items/:id/reduce' => "line_items#reduce_quantity", as: "line_item_reduce"



---12---

Order
-----

Orders Controller
-----------------

class OrdersController < ApplicationController
  def index
    @orders = Order.all
  end

  def show
    @order = Order.find(params[:id])
  end

  def new
    @order = Order.new
  end
end


def create
  @order = Order.new(order_params)

  @current_cart.line_items.each do |item|
    @order.line_items << item
    item.cart_id = nil
  end

  @order.save
  Cart.destroy(session[:cart_id])
  session[:cart_id] = nil

  redirect_to root_path
end

private

def order_params
  params.require(:order).permit(:name, :email, :address, :pay_method)
end



---13---

Orders View
-----------

New Order page which asks user for payment details:
---------------------------------------------------

<%= form_for(@order) do |f| %>
  <p>
    <%= f.label :name %><br>
    <%= f.text_field :name, required: true, autofocus: true %>
  </p>
  <p>
    <%= f.label :email %><br>
    <%= f.email_field :email %>
  </p>
  <p>
    <%= f.label :address %><br>
    <%= f.text_area :address %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>


Index page listing out all orders
---------------------------------

<h2>All Orders</h2>

<% @orders.each do |order| %>
  <p>Name: <%= order.name %></p>
  <p>Email: <%= order.email %></p>
  <p>Line Items: </p>

  <ul>
    <% order.line_items.each do |item| %>
      <li><%= item.quantity %> x <%= item.product.name %></li>
    <% end %>
  </ul>
<% end %>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Layouts and Rendering in Rails
------------------------------


Rendering an Action's Template from Another Controller
------------------------------------------------------

render "products/show"
render template: "products/show"



---



Syntax for render
-----------------

render :edit
render action: :edit
render "edit"
render action: "edit"
render "books/edit"
render template: "books/edit"



---



Using render with :inline
-------------------------

render inline: "<% products.each do |p| %><p><%= p.name %></p><% end %>"
render inline: "xml.p {'Horrid coding practice!'}", type: :builder



---



Rendering Text
--------------

render plain: "OK"



---



Rendering HTML
--------------

render html: helpers.tag.strong('Not Found')



---



Rendering JSON
--------------

render json: @product



---



Rendering XML
-------------

render xml: @product



---



Rendering Vanilla JavaScript
----------------------------

render js: "alert('Hello Rails');"



---



Rendering raw body
------------------

render body: "raw"



---



Rendering raw file
------------------

render file: "#{Rails.root}/public/404.html", layout: false



---



Rendering objects
-----------------

render MyRenderable.new



---



Options for render
------------------

:content_type
:layout
:location
:status
:formats
:variants



---



The :content_type Option
------------------------

render template: "feed", content_type: "application/rss"




---



The :layout Option
------------------

render layout: "special_layout"
render layout: false



---



The :location Option
--------------------

render xml: photo, location: photo_url(photo)



---



The :status Option
------------------

render status: 500
render status: :forbidden



---



Rails understands this statuses
-------------------------------


----------------------------------------------------------------------------

Response Class	HTTP Status Code	Symbol

----------------------------------------------------------------------------
Informational	100			:continue
		101			:switching_protocols
		102			:processing
----------------------------------------------------------------------------
Success		200			:ok
----------------------------------------------------------------------------
		201			:created
		202			:accepted
		203			:non_authoritative_information
		204			:no_content
		205			:reset_content
		206			:partial_content
		207			:multi_status
		208			:already_reported
		226			:im_used
----------------------------------------------------------------------------
Redirection	300			:multiple_choices
----------------------------------------------------------------------------
		301			:moved_permanently
		302			:found
		303			:see_other
		304			:not_modified
		305			:use_proxy
		307			:temporary_redirect
		308			:permanent_redirect
----------------------------------------------------------------------------
Client Error	400			:bad_request
----------------------------------------------------------------------------
		401			:unauthorized
		402			:payment_required
		403			:forbidden
		404			:not_found
		405			:method_not_allowed
		406			:not_acceptable
		407			:proxy_authentication_required
		408			:request_timeout
		409			:conflict
		410			:gone
		411			:length_required
		412			:precondition_failed
		413			:payload_too_large
		414			:uri_too_long
		415			:unsupported_media_type
		416			:range_not_satisfiable
		417			:expectation_failed
		421			:misdirected_request
		422			:unprocessable_entity
		423			:locked
		424			:failed_dependency
		426			:upgrade_required
		428			:precondition_required
		429			:too_many_requests
		431			:request_header_fields_too_large
		451			:unavailable_for_legal_reasons
----------------------------------------------------------------------------
Server Error	500			:internal_server_error
----------------------------------------------------------------------------
		501			:not_implemented
		502			:bad_gateway
		503			:service_unavailable
		504			:gateway_timeout
		505			:http_version_not_supported
		506			:variant_also_negotiates
		507			:insufficient_storage
		508			:loop_detected
		510			:not_extended
		511			:network_authentication_required
----------------------------------------------------------------------------



---



The :formats Option
-------------------

render formats: :xml
render formats: [:json, :xml]



---



The :variants Option
--------------------

render variants: [:mobile, :desktop]



---



def index
  request.variant = determine_variant
end

private

def determine_variant
  variant = nil
  variant = :mobile if session[:use_mobile]
  variant
end



---



Choosing Layouts at Runtime
---------------------------

class ProductsController < ApplicationController
  layout :products_layout

  def show
    @product = Product.find(params[:id])
  end

  private

  def products_layout
    @current_user.special? ? "special" : "products"
  end
end



class ProductsController < ApplicationController
  layout Proc.new { |controller| controller.request.xhr? ? "popup" : "application" }
end



---



Conditional Layouts
-------------------

class ProductsController < ApplicationController
  layout "product", except: [:index, :rss]
end



---



Using redirect_to
-----------------


redirect_to photos_url
redirect_back(fallback_location: root_path)



Getting a Different Redirect Status Code
----------------------------------------

def index
  @books = Book.all
end

def show
  @book = Book.find_by(id: params[:id])

  if @book.nil?
    redirect_to action: :index
  end
end



---



Using head To Build Header-Only Responses
-----------------------------------------

head :bad_request
head :created, location: photo_path(@photo)



---



Structuring Layouts
-------------------

Asset tags
yield and content_for
Partials



---



Asset Tag Helpers
-----------------

auto_discovery_link_tag
javascript_include_tag
stylesheet_link_tag
image_tag
video_tag
audio_tag



---



Linking to Feeds with the auto_discovery_link_tag
-------------------------------------------------

<%= auto_discovery_link_tag(:rss, {action: "feed"}, {title: "RSS Feed"}) %>



---



Linking to JavaScript Files with the javascript_include_tag
-----------------------------------------------------------

<%= javascript_include_tag "main" %>
<%= javascript_include_tag "main", "columns" %>
<%= javascript_include_tag "main", "/photos/columns" %>
<%= javascript_include_tag "http://example.com/main.js" %>




---



Linking to CSS Files with the stylesheet_link_tag
-------------------------------------------------

<%= stylesheet_link_tag "main" %>
<%= stylesheet_link_tag "main", "columns" %>
<%= stylesheet_link_tag "main", "photos/columns" %>
<%= stylesheet_link_tag "http://example.com/main.css" %>
<%= stylesheet_link_tag "main_print", media: "print" %>



---



Linking to Images with the image_tag
------------------------------------

<%= image_tag "header.png" %>
<%= image_tag "icons/delete.gif" %>
<%= image_tag "icons/delete.gif", {height: 45} %>
<%= image_tag "home.gif" %>
<%= image_tag "home.gif", alt: "Home" %>
<%= image_tag "home.gif", size: "50x20" %>
<%= image_tag "home.gif", alt: "Go Home", id: "HomeImage", class: "nav_bar" %>



---



Linking to Videos with the video_tag
------------------------------------

<%= video_tag "movie.ogg" %>
<%= video_tag ["trailer.ogg", "movie.ogg"] %>




---



Linking to Audio Files with the audio_tag
-----------------------------------------

<%= audio_tag "music.mp3" %>
<%= audio_tag "music/first_song.mp3" %>



---



Using the content_for Method
----------------------------

<% content_for :head do %>
  <title>A simple page</title>
<% end %>

<p>Hello, Rails!</p>


it is
-----


<html>
  <head>
  <title>A simple page</title>
  </head>
  <body>
  <p>Hello, Rails!</p>
  </body>
</html>



---



Using Partials
--------------

<%= render "menu" %>
<%= render "shared/menu" %>
( partial from app/views/shared/_menu.html.erb )



---



Using Partials to Simplify Views
--------------------------------

<%= render "shared/ad_banner" %>

<h1>Products</h1>

<p>Here are a few of our fine products:</p>


<%= render "shared/footer" %>



---



users/index.html.erb
--------------------

<%= render "shared/search_filters", search: @q do |form| %>
  <p>
    Name contains: <%= form.text_field :name_contains %>
  </p>
<% end %>



---



roles/index.html.erb
--------------------

<%= render "shared/search_filters", search: @q do |form| %>
  <p>
    Title contains: <%= form.text_field :title_contains %>
  </p>
<% end %>



---



shared/_search_filters.html.erb
-------------------------------

<%= form_with model: search do |form| %>
  <h1>Search form:</h1>

  <fieldset>
    <%= yield form %>
  </fieldset>

  <p>
    <%= form.submit "Search" %>
  </p>
<% end %>



---



Partial Layouts
---------------

<%= render partial: "link_area", layout: "graybar" %>



---



Passing Local Variables
-----------------------

new.html.erb
------------

<h1>New zone</h1>
<%= render partial: "form", locals: {zone: @zone} %>



---



edit.html.erb
-------------

<h1>Editing zone</h1>
<%= render partial: "form", locals: {zone: @zone} %>



---



_form.html.erb
--------------

<%= form_with model: zone do |form| %>
  <p>
    <b>Zone name</b><br>
    <%= form.text_field :name %>
  </p>
  <p>
    <%= form.submit %>
  </p>
<% end %>



---



Pass a local variable to a partial in only specific cases use the local_assigns
-------------------------------------------------------------------------------


index.html.erb
--------------

<%= render user.articles %>



---



show.html.erb
-------------

<%= render article, full: true %>



---



_article.html.erb
-----------------

<h2><%= article.title %></h2>

<% if local_assigns[:full] %>
  <%= simple_format article.body %>
<% else %>
  <%= truncate article.body %>
<% end %>



<%= render partial: "customer", object: @new_customer %>



---



shorthand syntax
----------------

<%= render @customer %>



---



Rendering Collections
---------------------

index.html.erb
--------------

<h1>Products</h1>
<%= render partial: "product", collection: @products %>



---



_product.html.erb
-----------------

<p>Product Name: <%= product.name %></p>



<h1>Products</h1>
<%= render @products %>



---



index.html.erb
--------------

<h1>Contacts</h1>
<%= render [customer1, employee1, customer2, employee2] %>



---



customers/_customer.html.erb
----------------------------

<p>Customer: <%= customer.name %></p>



---



employees/_employee.html.erb
----------------------------

<p>Employee: <%= employee.name %></p>



<h1>Products</h1>
<%= render(@products) || "There are no products available." %>



---



Local Variables
---------------

<%= render partial: "product", collection: @products, as: :item %>
<%= render partial: "product", collection: @products, as: :item, locals: {title: "Products Page"} %>



---



Spacer Templates
----------------

<%= render partial: @products, spacer_template: "product_ruler" %>



---



Collection Partial Layouts
--------------------------

<%= render partial: "product", collection: @products, layout: "special_layout" %>



---



Using Nested Layouts
--------------------


<html>
  <head>
    <title><%= @page_title or "Page Title" %></title>
    <%= stylesheet_link_tag "layout" %>
    <style><%= yield :stylesheets %></style>
  </head>
  <body>
    <div id="top_menu">Top menu items here</div>
    <div id="menu">Menu items here</div>
    <div id="content"><%= content_for?(:content) ? yield(:content) : yield %></div>
  </body>
</html>



---



<% content_for :stylesheets do %>
  #top_menu {display: none}
  #right_menu {float: right; background-color: yellow; color: black}
<% end %>
<% content_for :content do %>
  <div id="right_menu">Right menu items here</div>
  <%= content_for?(:news_content) ? yield(:news_content) : yield %>
<% end %>
<%= render template: "layouts/application" %>





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Gem creation, Gem structure example
-----------------------------------


---1---

$ gem install bundler && bundle -v



---2---

$ bundle gem test_gem



---3---

$ gem build test_gem



---4---

$ gem install test_gem



---5---

$ gem push test_gem



---6---

$ gem list



---



https://github.com/kaize/configus




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Minitest
--------


---1---

--- Gemfile ---

source "https://rubygems.org"

gem "minitest"



---2---

magic_ball.rb
-------------

require 'minitest/autorun'

class MagicBallTest < Minitest::Test
end



---3---

magic_ball.rb
-------------

require 'minitest/autorun'

class MagicBallTest < Minitest::Test
  def test_ask_returns_an_answer
    magic_ball = MagicBall.new
    assert magic_ball.ask("Whatever") != nil
  end
end




---




Run options: --seed 10646

# Running:

E

Finished in 0.001484s, 674.0230 runs/s, 0.0000 assertions/s.

  1) Error:
MagicBallTest#test_ask_returns_an_answer:
NameError: uninitialized constant MagicBallTest::MagicBall
    magic_ball.rb:5:in `test_ask_returns_an_answer'

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Test Rails Models with Minitest
-------------------------------


$ rails new testing-rails-models



---



$ bin/rails generate model User name:string email:string
$ bin/rake db:migrate



---



Validation Tests
----------------

test/models/user_test.rb
------------------------

require 'test_helper'

class UserTest < ActiveSupport::TestCase
  test 'valid user' do
  end

  test 'invalid without name' do
  end

  test 'invalid without email' do
  end
end


$ bin/rake



---



test/models/user_test.rb
------------------------

require 'test_helper'

class UserTest < ActiveSupport::TestCase
  test 'valid user' do
    user = User.new(name: 'John', email: 'john@example.com')
    assert user.valid?
  end

  test 'invalid without name' do
    user = User.new(email: 'john@example.com')
    refute user.valid?, 'user is valid without a name'
    assert_not_nil user.errors[:name], 'no validation error for name present'
  end

  test 'invalid without email' do
    user = User.new(name: 'John')
    refute user.valid?
    assert_not_nil user.errors[:email]
  end
end


$ bin/rake



---



$ bin/rails test test/models/user_test.rb:9
$ bin/rails test test/models/user_test.rb:15



Adding Validations to Make Tests Pass
-------------------------------------

app/models/user.rb
------------------

class User < ApplicationRecord
  validates :name, :email, presence: true
end


$ bin/rake



---



Refactoring Tests
-----------------

test/models/user_test.rb
------------------------

require 'test_helper'

class UserTest < ActiveSupport::TestCase
  def setup
    @user = User.new(name: 'John', email: 'john@example.com')
  end

  test 'valid user' do
    assert @user.valid?
  end

  test 'invalid without name' do
    @user.name = nil
    refute @user.valid?, 'saved user without a name'
    assert_not_nil @user.errors[:name], 'no validation error for name present'
  end

  test 'invalid without email' do
    @user.email = nil
    refute @user.valid?
    assert_not_nil @user.errors[:email]
  end
end



---



Fixtures
--------

test/fixtures/users.yml
-----------------------

valid:
  name: John
  email: john@example.com





test/models/user_test.rb
------------------------

def setup
  @user = users(:valid)
end



---



Associations
------------

test/models/user_test.rb
------------------------

test '#posts' do
  assert_equal 2, @user.posts.size
end


$ bin/rake


$ bin/rails generate model Post title:string body:text user:belongs_to
$ bin/rake db:migrate


app/models/user.rb
------------------

class User < ApplicationRecord
  has_many :posts
  validates :name, :email, presence: true
end


$ bin/rake



test/fixtures/posts.yml
-----------------------

one:
  title: MyString
  body: MyText
  user: valid

two:
  title: MyString
  body: MyText
  user: valid



$ bin/rake



---



Scopes
------

test/models/user_test.rb
------------------------

test '#recent' do
  assert_includes User.recent, users(:valid)
  refute_includes User.recent, users(:old)
end


test/fixtures/users.yml
-----------------------

old:
  name: Old
  email: old@example.com
  created_at: <%= 2.weeks.ago %>



$ bin/rake



app/models/user.rb
------------------

class User < ApplicationRecord
  scope :recent, -> { where('created_at > ?', 1.week.ago) }
  has_many :posts
  validates :name, :email, presence: true
end



---



Business Logic
--------------

test/models/user_test.rb
------------------------

test '#profile_photo_url' do
  assert_equal(
    'https://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6',
    @user.profile_photo_url
  )
end


$ bin/rake



app/models/user.rb
------------------

def profile_photo_url
  "https://s.gravatar.com/avatar/#{Digest::MD5.hexdigest(email)}"
end



app/models/user.rb
------------------

class User < ApplicationRecord
  scope :recent, -> { where('created_at > ?', 1.week.ago) }

  PROFILE_PHOTO_ROOT_URL = URI 'https://s.gravatar.com/avatar/'

  has_many :posts
  validates :name, :email, presence: true

  def profile_photo_url
    url = PROFILE_PHOTO_ROOT_URL.clone
    url.path << email_md5
    url.to_s
  end

  private

  def email_md5
    Digest::MD5.hexdigest email
  end
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a minitest fixture for a non database model
--------------------------------------------------


plan_loader.rb
--------------

file_path = "config/plans.yml"

if File.exist?(file_path)
  PLANS = YAML.load(File.read(file_path)).with_indifferent_access
end



plan.rb
-------

class Plan
  def self.plans
    @plans ||= PLANS.keys.map { |k| PLANS[k] }
  end

  def self.all
    plans.map { |plan| OpenStruct.new(plan) }
  end

  def self.where(args)
    conditions = args.map do |arg_key, arg_val|
      proc { |plan| plan[arg_key] == arg_val }
    end

    local_plans = plans.select { |plan| conditions.all? { |c| c.call(plan) } }
    local_plans.flatten.map { |plan| OpenStruct.new(plan) }
  end

  def self.find(stripe_id)
    plan = plans.find { |p| p[:stripe_id] == stripe_id }
    OpenStruct.new(plan)
  end
end




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Fixtures in Ruby Unit Tests
---------------------------


require File.dirname(__FILE__) + '/../test_helper'
require 'message'


class MessageTest < Test::Unit::TestCase
  fixtures :message

  def test_initialization
    f = Message.new message(:good)
  end
end



test/fixtures/message.yaml
--------------------------

good: |
  [the body of a good message here]

missing_header: |
  [more text]

bad_checksum: |
  [more text]



---



class Test::Unit::TestCase
  @@fixtures = {}

  def self.fixtures list
    [list].flatten.each do |fixture|
      self.class_eval do
        define_method(fixture) do |item|
          @@fixtures[fixture] ||= YAML::load_file("test/fixtures/#{fixture.to_s}.yaml")
          @@fixtures[fixture][item.to_s]
        end
      end
    end
  end
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add jQuery to rails 7 app
-------------------------


---1---

Terminal
--------

$ yarn add jquery



---2---

app/javascript/application.js
-----------------------------

import “./add_jquery”



---3---

Terminal
--------

$ touch app/javascript/add_jquery.js



---4---

app/javascript/add_jquery.js
----------------------------

import jquery from "jquery";

window.jQuery = jquery;
window.$ = jquery;



---5---

on page
-------

<script type="text/javascript">
  window.onload = function () {
    $(function() {
      # jQuery code here...
    });
  };
</script>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Nested Model Form (revised)
---------------------------


---1---

models/survey.rb
----------------

class Survey < ActiveRecord::Base
  attr_accessible :name, :questions_attributes
  has_many :questions
  accepts_nested_attributes_for :questions, allow_destroy: true
end



---2---

models/question.rb
------------------

class Question < ActiveRecord::Base
  attr_accessible :content, :survey_id, :answers_attributes
  belongs_to :survey
  has_many :answers
  accepts_nested_attributes_for :answers, allow_destroy: true
end



---3---

views/surveys/_form.html.erb
----------------------------

<%= f.fields_for :questions do |builder| %>
  <%= render 'question_fields', f: builder %>
<% end %>
<%= link_to_add_fields "Add Question", f, :questions %>




---4---

views/surveys/_question_fields.html.erb
---------------------------------------

<fieldset>
  <%= f.label :content, "Question" %><br />
  <%= f.text_area :content %><br />
  <%= f.check_box :_destroy %>
  <%= f.label :_destroy, "Remove Question" %>
  <%= f.fields_for :answers do |builder| %>
    <%= render 'answer_fields', f: builder %>
  <% end %>
  <%= link_to_add_fields "Add Answer", f, :answers %>
</fieldset>



---5---

views/surveys/_answer_fields.html.erb
-------------------------------------


<fieldset>
  <%= f.label :content, "Answer" %>
  <%= f.text_field :content %>
  <%= f.hidden_field :_destroy %>
  <%= link_to "remove", '#', class: "remove_fields" %>
</fieldset>



---6---

surveys.js.coffee
-----------------

jQuery ->
  $('form').on 'click', '.remove_fields', (event) ->
    $(this).prev('input[type=hidden]').val('1')
    $(this).closest('fieldset').hide()
    event.preventDefault()

  $('form').on 'click', '.add_fields', (event) ->
    time = new Date().getTime()
    regexp = new RegExp($(this).data('id'), 'g')
    $(this).before($(this).data('fields').replace(regexp, time))
    event.preventDefault()



---7---

application_helper.rb
---------------------

module ApplicationHelper
  def link_to_add_fields(name, f, association)
    new_object = f.object.send(association).klass.new
    id = new_object.object_id
    fields = f.fields_for(association, new_object, child_index: id) do |builder|
      render(association.to_s.singularize + "_fields", f: builder)
    end
    link_to(name, '#', class: "add_fields", data: {id: id, fields: fields.gsub("\n", "")})
  end
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

50. REGEX
---------


Regex (regular expression)
--------------------------


[abc]        Один символ: a, b или c
[^abc]       Любой отдельный символ, кроме: a, b или c
[a-z]        Любой отдельный символ в диапазоне a-z
[a-zA-Z]     Любой отдельный символ в диапазоне a-z или A-Z
^            Начало строки (line)
$            Конец строки (line)
\A           Начало строки (string)
\z           Конец строки (string)
.            Любой отдельный символ
\s           Любой символ пробела
\S           Любой непробельный символ
\d           Любая цифра
\D           Любая не цифра
\w           Любой символ слова (буква, цифра, подчеркивание)
\W           Any non-word character
\b           Граница любого слова
(...)        Захватить все вложенное
(a|b)        a or b
a?           Ноль или один из
a*           Ноль или более
a+           Один или несколько
a{3}         Ровно 3
a{3,}        3 или более
a{3,6}       От 3 до 6



---



\b    - Любая граница слова (cat\b)
\.    - any symbol
\d    - any number
{2}   - count of same elements (\.\d{2}) (\.\d{1,2})
a+    - own or more (\n+)
*     - zero or more (\n *) (\n\s*) (no+!*) (0{6}) (0{6}\b) (0{3,}) (ba{3,}) (^hello) (^http://.+)
\s    - any whitespace
^     - start of line
$     - end of line (bye$) ($index.html) (^\$)
\w    - word character
[abc] - single character of: a, b, or c ([$,])
()    - pattern (something)+ ((\d{1,2})\/(\d{1,2})\/(\d{4}))




---




(?<month>\d{1,2})\/(?<day>\d{1,2})\/(?<year>\d{4})
--------------------------------------------------

Today's date is: 7/1/2020.



---



http://rubular.com
https://www.freeformatter.com/regex-tester.html
https://ruby-doc.org/core-2.5.1/Regexp.html



---




Regular expression
------------------

regex
find & replace




Regex functions
---------------

1. Validation (email)
2. Change (cat -> dog)



---




Work with regex in sublime text
-------------------------------

ctrl + h        - regular expression panel






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Literals
--------


%i - array of Symbols
%q - string
%r - regular Expression
%s - symbol
%w - array of Strings
%x - backtick (capture subshell result)





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rack application start commands
-------------------------------


автоматически ищется файл config.ru
-----------------------------------

$ rackup
$ rackup -s thin
$ thin start
$ puma
$ unicorn
$ passenger start




Запустили сервер
----------------

$ rackup



В другом терминале выполнили запрос
-----------------------------------

$ curl -X GET localhost:9292




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails credentials
-----------------


Create credentials
------------------

$ EDITOR=vim rails credentials:edit
$ EDITOR="subl --wait" rails credentials:edit
$ EDITOR=vim RAILS_ENV=production rails credentials:edit



Create db on production
-----------------------

$ RAILS_ENV=production bundle exec rake db:create db:schema:load



Logs for -e production
----------------------

$ export RAILS_LOG_TO_STDOUT=true



In production.rb you can add this option
----------------------------------------

config.logger = Logger.new(STDOUT)




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Stimulus modals rails 7
-----------------------


---1---

$ rails g stimulus modals



---2---

application.css
---------------

.linkish {
  background-color: transparent!important;
  border: 0 !important;
  color: red !important;
  cursor: pointer !important;
  display: inline !important;
  margin: 0 !important;
  outline: none !important;
  padding: 0 !important;
  text-decoration: none !important;
}

.modal {
  position: fixed;
  z-index: 1;
  padding: 2em;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  overflow: auto;
  background-color: rgb(0,0,0);
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 5px;
  box-shadow: 0 0 10px 0 rgba(0,0,0,0.2), 0 5px 10px 0 rgba(0,0,0,0.19);
}

.cancel {
  background-color: #1530ff;
  font-size: 12px;
  color: white;
  padding: 4px 8px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  float: right;
  text-decoration: none;
}

.cancel:hover {
  background-color: #2640fe;
}



---3---

application.html.erb
--------------------

<body>
  <%= turbo_frame_tag "modal" %>
</body>



new.html.erb
------------

<%= turbo_frame_tag "modal" do %>
  <div class="modal">

    <%= render "form", post: @post %>

    <div>
      <%= link_to "Cancel", "#", data: { controller: "modals", action: "modals#close" }, class: "cancel" %>
    </div>
  </div>
<% end %>



index.html.erb
--------------

<% @posts.each do |post| %>
  <%= render post %>
  <p>
    <%= link_to "Show this post", post %>
  </p>
<% end %>

<%= link_to "New post", new_post_path, data: { turbo_frame: "modal" } %>



show.html.erb
-------------

<%= render @post %>

<div>
  <%= link_to "Edit post", edit_post_path(@post), data: { turbo_frame: "modal" } %>
</div>



edit.html.erb
-------------

<%= turbo_frame_tag "modal" do %>
  <div class="modal">

    <%= render "form", post: @post %>
    <div>
      <%= link_to "Cancel", "#", data: { controller: "modals", action: "modals#close" }, class: "cancel" %>
    </div>
  </div>
<% end %>



---3---

app/javascript/controllers/modals_controller.js
-----------------------------------------------


import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  connect() {
  }

  close(e) {
    e.preventDefault();

    const modal = document.getElementById("modal");
    modal.innerHTML = "";
    modal.removeAttribute("src");
    modal.removeAttribute("complete");
  }
}




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Gem annotate for model info in app
----------------------------------


$ bundle add annotate
$ bin/rails annotate:install
$ annotate --models




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Faker gem
---------


app/controllers/application_controller.rb
-----------------------------------------

class CurrencyInput < SimpleForm::Inputs::Base
  def input(kwargs)
    options = merge_wrapper_options(input_html_options, kwargs)

    "#{@builder.text_field(attribute_name, options)} $".html_safe
  end
end



---



views/something/_form.html.slim
-------------------------------

= simple_form_for article do |f|
  = f.input :title, as: :currency
  = f.input :body
  = f.input :author
  = f.input :published
  = f.input :title
  = f.input :edited_at
  = f.button :submit, class: 'btn-success', id: 'submit'




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails I18n
----------


Default locale
--------------

I18n.default_locale



---



app/controllers/application_controller.rb
-----------------------------------------

class ApplicationController < ActionController::Base
  around_action :set_locale_param

  private

  def default_url_options
    { locale: I18n.locale }
  end

  # http://localhost:3000/users?locale=ru
  # http://localhost:3000/ru/users
  def set_locale_param(&action)
    locale = params[:locale] || I18n.default_locale
    I18n.with_locale(locale, &action)
  end

  def set_locale_param_with_cookie(&action)
    locale = params[:locale] || cookies[:locale] || I18n.default_locale
    I18n.with_locale(locale, &action)
    cookies[:locale] = I18n.locale
  end

  def set_locale_domain(&action)
    # http://en.example.com
    # http://ru.example.com
    locale = request.subdomains.first

    I18n.locale = if I18n.available_locales.include?(locale.to_sym)
      locale
    else
      I18n.default_locale
    end
  end

  def set_locale_headers
    logger.debug(request.env['HTTP_ACCEPT_LANGUAGE'])
    locale = request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first

    logger.debug("LOCALE: #{locale}")

    I18n.locale = if I18n.available_locales.include?(locale.to_sym)
      locale
    else
      I18n.default_locale
    end
  end
end



---



config/routes.rb
----------------

Rails.application.routes.draw do
  scope '/(:locale)', locale: /en|ru/ do
    root 'welcome#index'
    resources :users
  end
end



---



config/application.rb
---------------------

require_relative "boot"
require "rails/all"

Bundler.require(*Rails.groups)

module I18nApp
  class Application < Rails::Application
    config.load_defaults 6.1

    config.I18n.default_locale = :ru
    config.I18n.available_locales = [:en, :ru]
    config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}')]
  end
end



---



https://guides.rubyonrails.org/i18n.html#configure-the-i18n-module



---



helpers
-------

translate(:welcome_title)
translate('welcome_title')
I18n.translate('welcome_title')
I18n.t('welcome_title')
t('welcome_title')



---



en.users.all
------------


t('users.all')
t('all', scope: 'users')
t('all', default: 'All Users')
t('non_exists.all', default: :'fallback.all_users')
t('non_exists.all', default: [:'fallback.all_users', 'Backup users 2'])
t('.all')



---



models translate
----------------


User.model_name.human(count: 100)

ru:
  activerecord:
    models:
      user:
        one: Пользователь
        other: Пользователи



---



t('.created_count', count: User.count)
t('.created_count', count: @count)
l(Time.now, format: :short)

distance_of_time_in_words(Time.now)

number_to_currency(5)
number_to_percentage(5)



---



app/config/locales/something.yml
--------------------------------

ru:
  helpers:
    submit:
      user:
        create: "Создать пользователя"



---



https://github.com/fphilipe/i18n-debug
https://github.com/ruby-i18n/i18n
https://github.com/svenfuchs/rails-i18n
https://github.com/heartcombo/simple_form#i18n
https://github.com/shioyama/mobility
https://guides.rubyonrails.org/i18n.html#action-view-helper-methods
https://guides.rubyonrails.org/i18n.html#adding-date-time-formats
https://guides.rubyonrails.org/i18n.html#pluralization





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails I18n Cheatsheet
---------------------


controller.rb
-------------

class MessagesController < ApplicationController
  def create
    redirect_to root_path, notice: t(".success")
  end
end




locales/some.yml
----------------

en:
  messages:
    create:
      success: true




---





HTML Translations
-----------------

some.yml
--------

en:
  hello_html: <b>hello!</b>
  title:
    html: <b>title!</b>




view.html.erb
-------------

<div><%= t('hello_html') %></div>
<div><%= t('title.html') %></div>




---




Interpolation
-------------

some.yml
--------

en:
  welcome_html: "<b>Welcome %{username}!</b>"




view.html.erb
-------------

<%= t('welcome_html', username: @current_user.username) %>




---




Form Placeholders
-----------------

view.html.erb
-------------

<%= form.text_field :name, placeholder: true %>




somy.yml
--------

en:
  helpers:
    placeholder:
      user:
        name: "Your name"







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails middlewares
-----------------


$ Rails.application
$ Rails.application.root



Start rack server
-----------------

$ rackup
$ rackup --help
$ rackup path/to/config.ru

$ bin/rails middleware



---



app/lib/request_time_logger.rb
------------------------------

class RequestTimeLogger
  attr_reader :app, :logger_indentificator

  def initialize(app, logger_indentificator = '*')
    @app = app
    @logger_indentificator = logger_indentificator
  end

  def call(env)
    dup._call(env)
  end

  def _call(env)
    request_recieved_at = Time.now
    @status, @headers, @response = @app.call(env)
    request_handled_at = Time.now

    beauty_logging(request_handled_at - request_recieved_at)

    [@status, @headers, @response]
  end

  private

  def beauty_logging(time)
    Rails.logger.debug(logger_indentificator * 50)
    Rails.logger.debug("Request time: #{time}")
    Rails.logger.debug(logger_indentificator * 50)
  end
end



---



app/lib/freeze.rb
-----------------

class FreezeServer
  attr_reader :app

  def initialize(app)
    @app = app
  end

  def call(env)
    @status, @headers, @response = @app.call(env)

    sleep 2
    [@status, @headers, @response]
  end
end



---



config/application.rb
---------------------

module MiddlewareApp
  class Application < Rails::Application
    config.load_defaults 6.1

    config.middleware.delete ActionDispatch::Session::CookieStore
    config.middleware.swap ActionDispatch::Flash, ActionDispatch::Cookies
    config.middleware.insert_before ActionDispatch::Flash, ActionDispatch::Cookies
    config.middleware.insert_after ActionDispatch::Flash, ActionDispatch::Cookies
    config.middleware.use ActionDispatch::Flash

    config.middleware.use RequestTimeLogger, '#'
  end
end



---



Rails::Server.new.tap do |server|
  require APP_PATH
  Dir.chdir(Rails.application.root)
  server.start
end



---



class RailsServer < ::Rack::Server
  def initialize
    super
  end

  def start
    super
  end
end



---



https://guides.rubyonrails.org/rails_on_rack.html#internal-middleware-stack





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails models
------------


$ rails new example_app --minimal --api --skip-git
$ cd example_app

$ bin/rails db:create

$ bin/rails g model User first_name last_name role is_active:boolean
$ bin/rails db:migrate
$ bin/rails db:seed


$ bin/rails c
$ bin/rails c --sandbox

$ bin/rails g migration add_attributes_to_user age:integer email:string

$ bin/rails db:migrate
$ bin/rails db:rollback
$ bin/rails db:reset



---



app/db/seeds.rb
---------------

User.create(first_name: 'John', last_name: 'Doe', role: 'admin')
User.create(first_name: 'John', last_name: 'Smith', role: 'customer')



---



100.times do
  User.create(
    first_name: Faker::Name.first_name,
    last_name: Faker::Name.last_name,
    role: %w[customer admin superuser].sample,
    is_active: [true, false].sample
  )
end



---



100.times do
  User.create(
    first_name: Faker::Name.first_name,
    last_name: Faker::Name.last_name,
    email: Faker:: Internet.email,
    age: (18..100).to_a.sample,
    role: %w( customer admin superuser ).sample,
    is_active: [true, false].sample
  )
end



---



bin/rails c
-----------

User.count
User.first
User.last

user = User.find_by(fist_name: 'John')
users = User.where(fist_name: 'John')

user.class
users.class

user.update(first_name: 'Ivan')
user.destroy
User.destroy_all



---



validation
----------

user = User.new

user.valid?
user.errors
user.errors.messages
user.errors.full_messages

user = User.new(first_name: 'John', last_name: 'Doe', role: 'customer', age: 25, email: 'johndoe@email.com')
user = User.new(first_name: 'Ivan', last_name: 'Doe', role: 'customer', age: 25, email: 'johndoe@email.com')

user.update_column(:first_name, 'John')



---



default attributes
------------------

attribute :is_active, :boolean, default: -> { false }



---



scopes
------

scope :customers, -> { where(role: 'customer') }
scope :admins, -> { where(role: 'admin') }
scope :superusers, -> { where(role: 'superuser') }
scope :old_admins, -> { admins.where('age > ?', 60) }
scope :admins_older_than, -> (age) { admins.where('age > ?', age) }

default_scope { admins }



User.all.count
User.unscoped.all.count



---



query
-----

User.where.not(role: :admin)
User.where(role: :admin).or(User.where(role: :superuser))
User.order(:age)
User.order(age: :desc)
User.select(:first_name, :last_name)
User.select(:last_name).distinct
User.limit(15)
User.limit(15).offset(30)
User.group(:age).count
User.none
User.customers.where("age > ?", 45).select(:email)



---



class User < ApplicationRecord
  validates :first_name, presence: true
  validates_inclusion_of :role, in: %w( customer admin superuser )
  validates_length_of :last_name, maximum: 15, message: "less than 15 if you don't mind"
  validates :age, numericality: { only_integer: true, greater_than: 17 }
  validates :email, uniqueness: true
  validates :email, format: { with: /\A[^@\s]+@([^@\s]+\.)+[^@\s]+\z/ }
  validate :custom_validation

  attribute :is_active, :boolean, default: -> { false }

  def custom_validation
    errors.add :first_name, 'You are not welcome here, John'  if first_name == 'John'
  end

  attribute :is_active, :boolean, default: -> { false }

  scope :customers, -> { where(role: 'customer') }
  scope :admins, -> { where(role: 'admin') }
  scope :superusers, -> { where(role: 'superuser') }
  scope :old_admins, -> { admins.where('age > ?', 60) }
  scope :admins_older_than, -> (age) { admins.where('age > ?', age) }
end






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Nested resources Rails
----------------------


GET books/:book_id/pages
GET books/:book_id/pages/new
POST books/:book_id/pages


app/config/routes.rb
--------------------

Rails.application.routes.draw do
  root 'books#index'

  resources :books, except: [:index] do
    resources :pages, only: %i[index new create]
  end

  resources :books, except: [:index], shallow: true do
    resources :pages, only: %i[show edit update destroy]
  end
end



---



app/config/routes.rb
--------------------

Rails.application.routes.draw do
  scope module: :web do
    root 'books#index'

    resources :books, except: [:index] do
      resources :pages, only: %i[index new create]
    end

    resources :books, except: [:index], shallow: true do
      resources :pages, only: %i[show edit update destroy]
    end
  end
end



---



app/config/routes.rb
--------------------

Rails.application.routes.draw do
  scope module: :web do
    root 'books#index'

    resources :books, except: [:index] do
      resources :pages, only: %i[index new create]

      post :publish
    end
  end
end



$ bin/rails routes -g publish

book_publish POST   /books/:book_id/publish(.:format) web/books#publish
-----------------------------------------------------------------------


Rails.application.routes.draw do
  scope module: :web do
    root 'books#index'

    resources :books, except: [:index] do
      collection do
        post :publish
      end
    end
  end
end



$ bin/rails routes -g publish

publish_books POST   /books/publish(.:format)  web/books#publish
----------------------------------------------------------------



Rails.application.routes.draw do
  scope module: :web do
    root 'books#index'

    resources :books, except: [:index] do
      member do
        post :publish
      end
    end
  end
end



$ bin/rails routes -g publish

publish_book POST /books/:id/publish(.:format) web/books#publish
----------------------------------------------------------------



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails rubocop, test, quality
----------------------------


Gemfile
-------

gem 'rubocop', require: false
gem 'rubocop-rails', require: false

group :development do
  gem 'brakeman'
end



---



$ bundle exec rubocop
$ bundle exec rubocop -a
$ bundle exec rubocop -A

$ bundle exec brakeman

$ rails g integration_test notes_flow
$ bin/rails test:integration



---



debugger
--------

class NotesController < ApplicationController
  def index
    @notes = Note.all.order(created_at: :desc)
  end

  def show
    debugger

    @note = Note.find(params[:id])
  end
end



---



test/integration/notes_flow_test.rb
-----------------------------------

require "test_helper"

class NotesFlowTest < ActionDispatch::IntegrationTest
  test 'opens all notes page' do
    get root_url

    assert_response :success
    assert_select 'h1', 'Notes'
  end

  test 'opens one note page' do
    note = Note.create(title: "Title 1", description: "Description 1")

    # debugger

    get note_url(note.id)

    assert_response :success
    assert_select 'h1', 'Note page'
    assert_select 'h4', 'Title 1'
    assert_select 'p', 'Description 1'
  end

  test 'opens one note page with fixture' do
    note = notes(:one)
    get note_url(note)

    assert_response :success
    assert_select 'h1', 'Note page'
    assert_select 'h4', 'Title 1'
    assert_select 'p', 'Description 1'
  end
end



---



fixtures
--------

notes_list = notes()
note = notes(:one)



---



https://github.com/rubocop/rubocop
https://docs.rubocop.org/rubocop/index.html
https://github.com/rubocop/rubocop-rails
https://github.com/faker-ruby/faker
https://github.com/presidentbeef/brakeman



---



Rubocop examples
----------------

.rubocop.yml
------------

# require: rubocop-rails

AllCops:
  NewCops: enable
  Exclude:
    - 'bin/**'
    - 'db/schema.rb'
    - 'db/migrate/**'
    - 'examples/**'

Style/Documentation:
  Enabled: false

Gemspec/RequiredRubyVersion:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

Style/FrozenStringLiteralComment:
  Exclude:
    - 'examples/app/controllers/notes_controller.rb'
    - 'examples/config/routes.rb'
    - 'examples/test/integration/notes_flow_test.rb'




---



AllCops:
  TargetRubyVersion: 2.6

Style/StringLiterals:
  Enabled: true
  EnforcedStyle: double_quotes

Style/StringLiteralsInInterpolation:
  Enabled: true
  EnforcedStyle: double_quotes

Layout/LineLength:
  Max: 120



---



AllCops:
  NewCops: enable
  Exclude:
    - bin/**
    - db/schema.rb
    - db/migrate/**
    - examples/**
    - examples/db/schema.rb
    - examples/db/seeds.rb

Style/Documentation:
  Enabled: false

Style/FrozenStringLiteralComment:
  Enabled: false

Metrics/BlockLength:
  Exclude:
    - db/schema.rb



---



AllCops:
  NewCops: enable

Style/Documentation:
  Enabled: false

Gemspec/RequiredRubyVersion:
  Enabled: false

Metrics/MethodLength:
  Enabled: false




---



AllCops:
  TargetRubyVersion: 3.1.0

Style/StringLiterals:
  Enabled: true
  EnforcedStyle: double_quotes

Style/StringLiteralsInInterpolation:
  Enabled: true
  EnforcedStyle: double_quotes

Layout/LineLength:
  Max: 120

Layout/EndOfLine:
   Enabled: False

Metrics/MethodLength:
  Max: 20

Metrics/AbcSize:
  Enabled: false

Style/IdenticalConditionalBranches:
  Enabled: false

Metrics/ClassLength:
  Max: 150





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rack
----


require 'rack'

class MyApp
  def call(env)
    [200, {'Content-Type' => 'text/html'}, ["Hello"]]
  end
end

Rack::Handler::Thin.run MyApp.new, :Port => 3000



$ ruby app.rb



---



config.ru
---------

class MyApp
  def call(env)
    [200, {'Content-Type' => 'text/html'}, ["Hello"]]
  end
end

run MyApp.new



$ rackup
$ rackup -s thin
$ thin start
$ puma
$ unicorn
$ passenger start



---



class MyMiddleware
  def initialize(app1)
    @app1 = app1
  end

  def call(env)
    status, headers, body = @app1.call(env)

    request = Rack::Request.new(env)

    if request.path == '/'
      case request.request_method
      when 'GET'
        [status, headers, body]
      when 'POST'
        [201, headers.merge({'x-created' => 'True'}), ['Item was successfully created']]
      end
    else
      [404, {}, ["Not Found"]]
    end
  end
end

class App
  def call(env)
    [200, {}, ["success"]]
  end
end

use MyMiddleware
run App.new



---



require 'json'

class MyMiddleware
  def initialize(app1)
    @app1 = app1
  end

  def call(env)
    status, headers, body = @app1.call(env)
    request = Rack::Request.new(env)

    body = {
      path: request.path,
      verb: request.request_method,
      ip: request.ip,
      cookies: request.cookies,
      params: request.params,
      body: JSON.parse(request.body.read)
    }

    [200, {}, [body.to_json]]
  end
end

class App
  def call(env)
  end
end

use MyMiddleware
run App.new



$ rackup
$ curl -x POST localhost:9292/users?sort=desc -d "{\"login\":\"admin\",\"password\":\"password\"}"



---



use Rack::Auth::Basic do |username, password|
  username == 'admin' && password == 'password'
end

class App
  def call(env)
    puts env["HTTP_AUTHORIZATION"]
    [200, {'Content-Type' => 'text/html'}, ["You are loggined successfully"]]
  end
end


run App.new



$ rackup
$ curl -u admin:password -i http://localhost:9292



---



rack testing
------------

require 'minitest/autorun'
require 'rack/test'

class MyApp
  def call(env)
    [200, {'X-success' => true}, ["Success response"]]
  end
end

describe "MyApp" do
  include Rack::Test::Methods

  def app
    MyApp.new
  end

  it 'check response status' do
    get '/'

    assert last_response.ok?
  end

  it 'check response headers' do
    get '/'

    assert_equal last_response.headers, {'X-success' => true}
  end

  it 'check response body' do
    get '/'

    assert_equal last_response.body, "Success response"
  end
end



$ ruby test.rb



---



https://www.rubydoc.info/github/brynary/rack-test/master/Rack/Test/Methods
https://devhints.io/rack-test





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails relations
---------------


$ bin/rails g migration remove_author_from_articles
$ bin/rails db:migrate
$ bin/rails g model author name
$ bin/rails db:migrate
$ bin/rails g migration add_author_to_books author:references

$ bin/rails d migration add_author_to_books author:references


$ bin/rails g migration add_author_to_articles author:references

$ bin/rails g model doctor name
$ bin/rails g model patient name

$ bin/rails g migration create_articles_authors



---



view list
---------


Article.order(created_at: :desc)
Article.order(created_at: :desc)
Article.where(published: true).order(created_at: :desc)



---



article = Article.find(1)

article.author

Article.delete_all

article = Article.new
article.author

author = article.build_author



---



def author_params
  params.require(:article).require(:author).permit(:name)
end



---



author = Author.create(author_params)
@article = Article.create(article_params)



---



@article.author = author
@article.author_id = author.id
@article = Article.create(article_params.merge(author_id: author.id))
@article.create_author(author_params)



Article.count
Author.count
Author.delete(1)
Author.last



article = Article.last
article.author
author = Author.last



---



one-to-one
----------

author.article



one-to-many
-----------

author.articles

author.articles.pluck(:title)
author.articles.pluck(:title, :id)



one to one
----------

class Author < ApplicationRecord
  has_one :article
end



one to many
-----------

class Author < ApplicationRecord
  has_many :articles
end



many to many
------------

class Author < ApplicationRecord
  has_and_belongs_to_many :articles
end



doctor = Doctor.create(name: 'Fred')
patient = Patient.create(name: 'Alice')
appointment = Appointment.create(doctor: doctor, patient: patient, appointment_date: Time.now.tomorrow)

appointment.doctor # Doctor name: 'Fred'
appointment.patient # Doctor name: 'Alice'

doctor.patients.pluck(:name) # ["Alice"]



---



article = Article.new
author = article.build_author(name: 'Bob')

author = Author.find(1)
article = author.articles.build(title: 'Article 1', body: 'Article body') # аналог Article.new
author.save


class CreateArticlesAuthors < ActiveRecord::Migration[6.1]
  def change
    create_table :articles_authors, id: false do |t|
      t.belongs_to :articles
      t.belongs_to :authors
      t.timestamps
    end
  end
end



---



app/views/articles/_form.html.slim
-----------------------------------

= simple_form_for article do |f|
  = f.input :title
  = f.input :body
  = f.input :published

  = f.association :author
  = f.button :submit



---



= simple_form_for article do |f|
  = f.input :title
  = f.input :body
  = f.input :published
  = f.association :author, as: :radio_buttons
  = f.button :submit



---



= simple_form_for article do |f|
  = f.input :title
  = f.input :body
  = f.input :published

  = f.association :author do |a|
    = a.input :name
  = f.button :submit



---



models
------

doctor.rb
---------

class Doctor < ApplicationRecord
  has_many :appointments
  has_many :patients, through: :appointments
end


patient.rb
----------

class Patient < ApplicationRecord
  has_many :appointments
  has_many :doctors, through: :appointments
end


appointment.rb
--------------

class Appointment < ApplicationRecord
  belongs_to :doctor
  belongs_to :patient
end



---



models
------

article.rb
----------

class Article < ApplicationRecord
  validates :title, :body, :author, presence: true

  belongs_to :author

  scope :published, -> { where(published: true) }

  def self.published
    where(published: true)
  end

  scope :by_creation_date_desc, -> { order(created_at: :desc) }
  scope :by_creation_date_asc, -> { order(created_at: :asc) }
end



author.rb
---------

class Author < ApplicationRecord
  # has_and_belongs_to_many :articles

  has_many :articles
end



---



app/controllers/articles_controller.rb
--------------------------------------

class ArticlesController < ApplicationController
  def create
    author = Author.create(author_params)
    @article = Article.new(article_params)
    @article.author = author

    if @article.save
      redirect_to article_path(@article)
    else
      render :new, status: :unprocessable_entity
    end
  end


  private

  def article_params
    params.require(:article).permit(:title, :body, :published, :edited_at)
  end

  def author_params
    params.require(:article).require(:author).permit(:name)
  end
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails static pages
------------------


$ bin/rails g controller pages index --skip-routes
$ bin/rails routes -g pages



---



helpers
-------

<p><%= link_to "About", page_path(:about) %></p>
<p><%= link_to "Term of service", page_path(:term_of_service) %></p>



params for partials
-------------------

<%= render partial: "pages/partial/links", locals: {} %>




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Views
-----


app/views/pages/home.html.erb
-----------------------------

<div class="main">
 <div class="container">
   <h1>Hello my name is __</h1>
   <p>I make Rails apps.</p>
 </div>
</div>



app/assets/stylesheets/pages.css.scss
-------------------------------------


http://localhost:8000/welcome





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Show page: (/terms /about)
--------------------------


$ rails g controller Name



---



app/controllers/page_controller.rb
----------------------------------

def some
end



---



app/views/page_dir/touch page_name.html.erb
-------------------------------------------


config/routes.rb
----------------

get '/some' => 'page_name#some'









SINATRA
-------


app.rb
------

route
-----

get '/some' do
  erb 'some'
end



---



view
----

views/some.html.erb



---



model
-----

Article



---



model
-----

$ rake db:create_some
$ rake db:migrate




---



route
-----

config/routes.rb
----------------

resource
resources




---



$ rake g controller Name



---



app/controllers/name_controller.rb
----------------------------------

actions: (index, new create, edit update, destroy (DELETE HTTP method))

def new
end


views
-----

app/views/.../...html.erb



---




$ rails server (localhost:3000)



---



http://github.com/ro31337/sample-blog



---



app/controllers/articles_controller.rb
--------------------------------------

$ rails console

Article.all
(SELECT * FROM articles;)

Article.find(1)
(SELECT * FROM articles
WHERE id = 1;)

@article = Article.find(1)
(SELECT * FROM articles
WHERE id = ?
LIMIT 1 [["id", 1]])

@article.destroy
(DELETE FROM articles
WHERE id = ? [["id", 1]])

Article.all
(SELECT * FROM articles;)



---



def destroy
  @article = Article.find(params[:id])
  @article.destroy
end



---



class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)
    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  def edit
    @article = Article.find(params[:id])
  end

  def update
    @article = Article.find(params[:id])

    if @article.update(article_params)
      redirect_to @article
    else
      render action: 'edit'
    end
  end

  def destroy
    @article = Article.find(params[:id])
    @article.destroy
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end


3.

app/controllers/articles_controller.rb
--------------------------------------

redirect_to articles_path



---



def destroy
  @article = Article.find(params[:id])
  @article.destroy

  redirect_to articles_path
end



---



app/views/articles/index.html.erb
---------------------------------

<%= link_to 'Destroy', article_path(article), method: :delete %>



---



<h1>List of articles:</h1>

<% @article.each do |article| %>
  <h2>
    <%= article.title %>
  </h2>
  <p>
    <%= article.text %>
  </p>
  <p>
    <%= link_to 'Show', artcle_path(article) %> |
    <%= link_to 'Edit', edit_article_path(article) %> |
    <%= link_to 'Destroy', article_path(article), method: :delete %>
  </p>
  <hr>
<% end %>



---



https://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to



---



<%= link_to "Romove", article, method: :delete, data: { confirm: "Are you sure?" } %>



---



http://railsguides.net/advaced-rails-model-generators/



---



one-to-many
-----------

Article1    *Comment



---



$ rails g model Comment autor:string body:text article:references



---



app/models/comment.rb
---------------------

class Comment < ActiveRecord::Base
  belongs_to :article
end



---



app/db/migrate/333_create_comments.rb
-------------------------------------

class CreateComments < ActiveRecord::Migration
  def change
    create_table :comments do |t|
      t.string :autor
      t.text :body
      t.references :article, index: true

      t.timestamps
    end
  end
end



---



$ rake db:migrate
$ sqlite3 developer.sqlite

SELECT * FROM articles;

.tables

=>

articles  comments  contacts  schema_migrations



---



.mode columns
.header on

SELECT * FROM articles;
SELECT * FROM comments;

pragma table_info(articles);
pragma table_info(comments); (article_id)



---



- every comment => article
- every article << many comments



---



app/models/article.rb
---------------------

has_many :comments



---



class Article < ActiveRecord::Base
  has_many :comments
end



---



config/routes.rb
----------------

resources :articles do
  resources :comment
end



---



Rails.application.routes.draw do
  get 'home/index'

  get '/terms' => 'pages#terms'
  get '/about' => 'pages#about'

  resource :contacts, only: [:new, :create], path_names: {:new => ''}

  resources :articles do
    resources :comment
  end
end



---



$ rake routes



---



https://sql.ru



---



$ rails g controller Comments



---



app/controllers/comments_controller.rb
--------------------------------------

class CommmentsController < ApplicationController
  def create
  end
end



---



$ rails console

Comment.all
Article.comments
@article = Article.find(3)
@article.comments
@article.comments.create({ autor: 'Mike', bodi: 'Hello' })
(INSERT INTO comments (autor, body)
VALUES (?, ?), ['Mike', 'Hello'])



---



app/controllers/comments_controller.rb
--------------------------------------

@article = Article.find(params[:article_id])
@article.comments.create({ autor: 'Mike', body: 'Hello' })



---



class CommmentsController < ApplicationController
  def create
    @article = Article.find(params[:article_id])
    @article.comments.create({ autor: 'Mike', body: 'Hello' })
  end
end



---



app/controllers/comments_controller.rb
--------------------------------------

private

def comment_params
  params.require(:comment).permit(:autor, :body)
end



---



class CommmentsController < ApplicationController
  def create
    @article = Article.find(params[:article_id])
    @article.comments.create(comment_params)
  end

  private

  def comment_params
    params.require(:comment).permit(:autor, :body)
  end
end



---



redirect_to article_path(@article)



---



class CommmentsController < ApplicationController
  def create
    @article = Article.find(params[:article_id])
    @article.comments.create(comment_params)

    redirect_to article_path(@article)
  end

  private

  def comment_params
    params.require(:comment).permit(:autor, :body)
  end
end



---



app/views/articles/show.html.erb
--------------------------------

POST /articles/:article_id/comments comments#create
/articles/3/comments      comments@create



---



https://github.com/rails/rails/blob/7a085dac2a2820856cde6c2ca8c69779ac766a97/actionview/lib/action_view/helpers/form_helper.rb



---



<%= form_for([@document, @comment]) do |f| %>



---



api.rubyonrails.org/classes/ActiveRecord/Associations/Class/Methods.html



---



@article.comments - collection

collection.build(attributes = {})

Returns a new object of the collection type that has been instantiated with 
attributes and linked to this object through the join table, but has not yet been saved.



---



@article.comments.build
@comment = @article.comments.build
<%= form_for([@article, @article.comments.build]) do |f| %>



---



<h1><%= @article.title %></h1>
<p>
  <%= @article.text %>
</p>
<%= form_for([@article, @article.comments.build]) do |f| %>
  <p>
    <%= f.label :autor %>
    <%= f.text_field :autor %>
  </p>
  <p>
    <%= f.label :body %>
    <%= f.text_area :body %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>



---



$ rails console

@article = Article.find(3)
@article.comments
Comment.all





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails templates, Slim
---------------------


gem 'slim-rails'


$ erb2slim app/views
$ erb2slim app/views -d



---



-------------------------------------------------------------------------------------------------------------------------------------------

code                                                                                                result

-------------------------------------------------------------------------------------------------------------------------------------------
/!                                                                                                  comment

-------------------------------------------------------------------------------------------------------------------------------------------
h1 Text                                                                                             text

-------------------------------------------------------------------------------------------------------------------------------------------
h1                                                                                                  text
  | Articles#index

-------------------------------------------------------------------------------------------------------------------------------------------
= link_to 'New Article', new_article_path                                                           parse ruby code and show it

-------------------------------------------------------------------------------------------------------------------------------------------
- @articles.each do |article|                                                                       parse ruby code without show it
  h2 = link_to article.title, article_path(article)
  p = article.body
  small
    / John Doe, 16:12 14.12.21}

-------------------------------------------------------------------------------------------------------------------------------------------
    i #{article.author}, #{article.created_at.in_time_zone('Moscow').strftime("%H:%m %d.%m.%y")}    interpolation
  hr

-------------------------------------------------------------------------------------------------------------------------------------------
- danger_code = "<script>alert('boom!')</script>"                                                   interpolation

-------------------------------------------------------------------------------------------------------------------------------------------
== danger_code                                                                                      as HTML

-------------------------------------------------------------------------------------------------------------------------------------------
= danger_code                                                                                       ecraning code

-------------------------------------------------------------------------------------------------------------------------------------------
/[if IE]                                                                                            show only in Internet Explorer
  p Display text

small
  | Author: #{@article.author}

-------------------------------------------------------------------------------------------------------------------------------------------
  i< = @article.created_at.in_time_zone('Moscow').strftime("%H:%m %d.%m.%y")                        whitespace

-------------------------------------------------------------------------------------------------------------------------------------------
ul                                                                                                  inline tags
  li: span Link 1
  li: span Link 2

-------------------------------------------------------------------------------------------------------------------------------------------
p.card.d-flex                                                                                       add classes

-------------------------------------------------------------------------------------------------------------------------------------------
.card                                                                                               add div

-------------------------------------------------------------------------------------------------------------------------------------------
.card#items                                                                                         add id

-------------------------------------------------------------------------------------------------------------------------------------------



---



app/views/layouts/application.html.slim
--------------------------------------

doctype html
html
  head
    title CrudExample
    meta[name="viewport" content="width=device-width,initial-scale=1"]
    = csrf_meta_tags
    = csp_meta_tag

    = stylesheet_link_tag 'application', 'data-turbo-track': 'reload'
    = javascript_include_tag 'application', 'data-turbo-track': 'reload', defer: true

  body
    - if flash.any?
      - flash.each do |key, value|
        |  <div class="
        = key
        | ">
        = value
    = yield



---



app/views/something/_form.html.slim
-----------------------------------


= form_with model: article do |form|
  = form.label :title
  br
  = article.errors.full_messages_for(:title).join(' ') if article.errors.present?
  = form.text_field :title
  br
  = form.label :body
  br
  = article.errors.full_messages_for(:body).join(' ') if article.errors.present?
  = form.text_area :body
  br
  = form.label :author
  br
  = article.errors.full_messages_for(:author).join(" ") if article.errors.present?
  = form.text_field :author
  br
  br
  = form.submit



---



https://guides.rubyonrails.org/form_helpers.html
https://apidock.com/rails/ActiveModel/Errors/full_messages_for
https://api.rubyonrails.org/classes/ActionDispatch/Flash.html





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

rack
----



$ curl --head https://ru.hexlet.io



---



HTTP/2 200
server: nginx/1.21.1
date: Wed, 01 Dec 2021 12:50:51 GMT
content-type: text/html; charset=utf-8
vary: Accept-Encoding
vary: Accept
x-xss-protection: 1; mode=block
x-content-type-options: nosniff
x-download-options: noopen
x-permitted-cross-domain-policies: none
referrer-policy: strict-origin-when-cross-origin


$ curl -X GET https://ru.hexlet.io



---



Rackup::Handler::WEBrick



---



require 'rackup'

class MyApp
  def call(_env)
    [200, {'Content-Type' => 'text/html'}, ["Hello"]]
  end
end

Rackup::Handler::WEBrick.run MyApp.new, :Port => 3000



---



class MyApp
  def call(_env)
    [200, {'Content-Type' => 'text/html'}, ["Hello"]]
  end
end

run MyApp.new



---



$ rackup
$ rackup -s thin
$ thin start
$ puma
$ unicorn
$ passenger start



---



config.ru
---------

class MyMiddleware
  def initialize(app1)
    @app1 = app1
  end

  def call(env)
    puts 'middleware_before'
    # env содержит запрос
    status, headers, body = @app1.call(env)
    puts 'middleware_after'
    request = Rack::Request.new(env)
    if request.path == '/'
      case request.request_method
      when 'GET'
        [status, headers, body]
      when 'POST'
        [201, headers.merge({'x-created' => 'True'}), ['Item was successfully created']]
      end
    else
      [404, {}, ["Not Found"]]
    end
  end
end


class App
  def call(env)
    puts 'app_run'
    [200, {}, ["success"]]
  end
end

use MyMiddleware
run App.new



---



require 'json'

class MyMiddleware
  def initialize(app1)
    @app1 = app1
  end

  def call(env)
    status, headers, body = @app1.call(env)
    request = Rack::Request.new(env)

    body = {
      path: request.path,
      verb: request.request_method,
      ip: request.ip,
      cookies: request.cookies,
      params: request.params,
      body: JSON.parse(request.body.read)
    }

    [200, {}, [body.to_json]]
  end
end

class App
  def call(env)
  end
end

use MyMiddleware
run App.new



---



$ rackup
$ curl -x POST localhost:9292/users?sort=desc -d "{\"login\":\"admin\",\"password\":\"password\"}"



---



use Rack::Auth::Basic do |username, password|
  username == 'admin' && password == 'password'
end

class App
  def call(env)
    puts env["HTTP_AUTHORIZATION"]
    [200, {'Content-Type' => 'text/html'}, ["You are loggined successfully"]]
  end
end
run App.new



---



$ rackup
$ curl -u admin:password -i http://localhost:9292



---



rack test

test.rb
-------

require 'minitest/autorun'
require 'rack/test'

class MyApp
  def call(env)
    [200, {'X-success' => true}, ["Success response"]]
  end
end

describe "MyApp" do
  include Rack::Test::Methods

  def app
    MyApp.new
  end

  it 'check response status' do
    get '/'
    assert last_response.ok?
  end

  it 'check response headers' do
    get '/'

    assert_equal last_response.headers, {'X-success' => true}
  end

  it 'check response body' do
    get '/'
    assert_equal last_response.body, "Success response"
  end
end



---



Rack Gem

Rack Middlewares

  Rack::Files
  Rack::Events
  Rack::Head
  Rack::Lock
  Rack::Reloader
  Rack::Runtime
  Rack::ShowException

Rack Helpers

  Rack::Request
  Rack::Response
  Rack::MockRequest, Rack::MockResponse
  Rack::MediaType
  Rack::Mime
  Rack::RewindableInput






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

overview
--------



$ gem install rails



---



$ rails -v
$ rails new example_app
$ cd example_app
$ bin/setup
$ bin/rails server

$ bin/rails --help
$ bin/rails help



---



$ bin/rails generate
$ bin/rails g



---



$ bin/rails generate model --help
$ bin/rails generate model user login:string age:integer

$ bin/rails destroy model user login:string age:integer
$ bin/rails d model user login:string age:integer



---



$ bin/rails generate controller --help
$ bin/rails generate controller user login:string age:integer



---



$ bin/rails generate scaffold User name:string age:integer



---



$ bin/rails db:create
$ bin/rails db:drop
$ bin/rails db:setup
$ bin/rails db:migrate
$ bin/rails db:seed



---



$ bin/rails console
$ bin/rails test
$ bin/rails dbconsole





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static pages
------------



$ bin/rails g controller pages index
$ bin/rails d controller pages index



---



Rails.application.routes.draw do
  get 'pages/index'
end



---



Rails.application.routes.draw do
  root 'pages#index'

  # get 'pages/about', to: 'pages#about'
  # get 'pages/term_of_service', to: 'pages#term_of_service'
  # page_path   GET /pages/:id(.:format) pages#show

  resources :pages, only: :show
end



---



class ApplicationController < ActionController::Base
end



---



class PagesController < ApplicationController
end



---



class PagesController < ApplicationController
  def index; end
end



---



<%= params[:id] %>

<% 10.times do %>
<% end %>



---



<%= link_to "Term of service", page_path(:term_of_service) %>



---



<!DOCTYPE html>
<html>
  <head>
    <title>ExampleApp</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <%= yield %>
  </body>
</html>



---



<%= render 'about' >



---



<%= render partial: "pages/partial/links", locals: {} %>



---



class PagesController < ApplicationController
  def about; end
  def term_of_service; end

  def index; end
end




---



class PagesController < ApplicationController
  def show; end

  def index; end
end




---



Rails.application.routes.draw do
  root 'pages#index'

  # page_path   GET /pages/:id(.:format) pages#show

  resources :pages, only: :show
end




---



<%= render params[:id] %>





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Model
-----


$ rails generate model Message 



---



db/migrate
----------

t.text :content 



---



class CreateMessages < ActiveRecord::Migration
  def change
    create_table :messages do |t|
      t.text :content
      t.timestamps
    end
  end
end



---



$ bundle exec rake db:migrate
$ bundle exec rake db:seed




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

models
------



class User < ApplicationRecord
  validates :first_name, presence: true
  validates_inclusion_of :role, in: %w{ customer admin superuser }
  validates_length_of :last_name, maximum: 30, message: "less than 30 if you don't mind"

  attribute :is_active, :boolean, default: -> { false }

  scope :admins, -> {where(role: 'admin') }
  has_many :orders
  belongs_to :city
end



---



------------------------
Class       Table name
------------------------
Article     articles
LineItem    line_items
Deer        deers
Mouse       mice
Person      people



---



$ bin/rails g model User first_name last_name is_active:boolean



---



class User < ApplicationRecord
end




---



$ bin/rails g migration create_users first_name last_name is_admin:boolean is_active:boolean




---



class CreateUsers < ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      t.string :first_name
      t.string :last_name
      t.boolean :is_active
      t.timestamps
    end
  end
end



---



$ bin/rails db:migrate



---


ActiveRecord::Schema.define(version: 2021_12_02_144414) do
  create_table "users", force: :cascade do |t|
    t.string "first_name"
    t.string "last_name"
    t.boolean "is_active"
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
  end
end



---



$ bin/rails db:create
$ bin/rails db:drop
$ bin/rails db:migrate
$ bin/rails db:prepare
$ bin/rails db:reset
$ bin/rails db:rollback STEP=3
$ bin/rails db:schema:dump
$ bin/rails db:schema:load
$ bin/rails db:seed
$ bin/rails db:setup



---



$ bin/rails -T 'db'



---



admin = User.create(first_name: 'John', last_name: 'Doe', role: 'admin')

user = User.new(first_name: 'Tom', last_name: 'Smith', role: 'customer')
user.save



---



user = User.new(last_name: 'Smith', role: 'customer')

user.save

user.validate!                                                # => ["cannot be nil"]
user.valid?                                                   # false
user.invalid?                                                 # true
user.errors                                                   # Error object
user.errors.messages                                          # {"first_name" => "cannot be nil"}
user.errors.full_messages                                     # ["first_name cannot be nil"]



---



users = User.all
user = User.first
user = User.find(1)
user = User.find_by(id: 1)
user = User.last
users = User.where(name: 'John', is_admin: true).order(created_at: :desc)



---



user = User.find_by(name: 'John')
user.destroy

User.destroy_all



---



User.create(first_name: 'John', last_name: 'Doe', role: 'admin')
User.create(first_name: 'John', last_name: 'Smith', role: 'customer')

100.times do
  User.create(
    first_name: Faker::Name.first_name,
    last_name: Faker::Name.last_name,
    role: %w[customer admin superuser].sample,
    is_active: [true, false].sample
  )
end




---



$ bin/rails db:seed



---



default: &default
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000

development:
  <<: *default
  database: db/development.sqlite3

test:
  <<: *default
  database: db/test.sqlite3

production:
  <<: *default
  database: db/production.sqlite3



---



User.where.not(role: :admin)
User.where(role: :admin).or(User.where(role: :superuser))
User.order(:age)
User.order(age: :desc)
User.select(:first_name, :last_name)
User.select(:last_name).distinct
User.limit(15)
User.limit(15).offset(30)
User.group(:age).count
User.none


---


class User < ApplicationRecord
  validates :first_name, presence: true
  validates_inclusion_of :role, in: %w( customer admin superuser )
  validates_length_of :last_name, maximum: 15, message: "less than 15 if you don't mind"
  validates :age, numericality: { only_integer: true, greater_than: 17 }
  validates :email, uniqueness: true
  validates :email, format: { with: /\A[^@\s]+@([^@\s]+\.)+[^@\s]+\z/ }
  validate :custom_validation

  attribute :is_active, :boolean, default: -> { false }

  def custom_validation
    errors.add :first_name, 'You are not welcome here, John'  if first_name == 'John'
  end

  # scope :admins, -> {where(role: 'admin') }
  # has_many :orders
  # belongs_to :city

  attribute :is_active, :boolean, default: -> { false }

  scope :customers, -> { where(role: 'customer') }
  scope :admins, -> { where(role: 'admin') }
  scope :superusers, -> { where(role: 'superuser') }
  scope :old_admins, -> { admins.where('age > ?', 60) }
  scope :admins_older_than, -> (age) { admins.where('age > ?', age) }

  # default_scope { admins }
end



---



User.customers.where("age > ?", 45).select(:email)



---



class User < ApplicationRecord
  scope :admins, -> { where(role: 'admin') }
  default_scope { admins }
end



---



User.all.count                                    # 32
User.unscoped.all.count                           # 100





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

quality
-------



$ rails new rails-quality
$ bundle install
$ bundle exec rubocop
$ bundle exec rubocop -a
$ bundle exec rubocop -A

$ rails g controller notes index show
$ rails g model Note title:string description:text
$ rails db:migrate
$ rails s

$ rails db:fixtures load
$ rails c

# Note.delete_all

$ bundle exec brakeman
$ rails g integration_test notes_flow
$ bin/rails test:integration



---



Gemfile
-------


source 'https://rubygems.org'

git_source(:github) { |repo| "https://github.com/#{repo}.git" }

group :development, :test do
  gem 'byebug', platforms: %i[mri mingw x64_mingw]
end

group :development do
  gem 'brakeman'
end

gem 'rubocop', require: false
gem 'rubocop-rails', require: false



---



class NotesController < ApplicationController
  def index
    @notes = Note.all.order(created_at: :desc)
  end

  def show
    # debugger
    @note = Note.find(params[:id])
  end
end



---



@notes = Note.all.order(created_at: :desc)



---



<h1>Notes</h1>

<% @notes.each do |note| %>
  <h4><%= link_to note.title, note_path(note) %></h4>
  <p><%= note.description %></p>
<% end %>



---



<h1>Note page</h1>
<h4><%= @note.title %></h4>
<p><%= @note.description %></p>

<%= link_to "Back", notes_path %>



---



Rails.application.routes.draw do
  root 'notes#index'

  # get 'notes', to: 'notes#index'
  # get 'notes/show'

  resources :notes, only: [:index, :show]
end



---



require "test_helper"

class NotesFlowTest < ActionDispatch::IntegrationTest
  test 'opens all notes page' do
    get root_url
    assert_response :success
    assert_select 'h1', 'Notes'
  end

  test 'opens one note page' do
    note = Note.create(title: "Title 1", description: "Description 1")

    # debugger

    get note_url(note.id)
    assert_response :success
    assert_select 'h1', 'Note page'
    assert_select 'h4', 'Title 1'
    assert_select 'p', 'Description 1'
  end

  test 'opens one note page with fixture' do
    note = notes(:one)
    get note_url(note)
    assert_response :success
    assert_select 'h1', 'Note page'
    assert_select 'h4', 'Title 1'
    assert_select 'p', 'Description 1'
  end
end



---



notes_list = notes()
note = notes(:one)




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

configuration
-------------



development
test
production



---



staging_unmerged:
  <<: *default
  database: db/test.sqlite3



---



$ bin/rails s -e test



---



$ RAILS_ENV=staging_unmerged bin/rails c



---



Rails.application.config.before_initialize do
  # initialization code goes here
end

Aws.config.update(
  region: 'us-west-2',
  credentials: Aws::Credentials.new('akid', 'secret')
)



---



$ EDITOR=vim bin/rails credentials:edit



---



$ bundle exec spring binstub --all
$ bin/spring binstub --remove --all

$ bin/rails restart



---



class PagesController < ApplicationController
  def index
    logger.debug('Debug logs')
  end
end



---



Rails.application.configure do

  # https://guides.hexlet.io/ru/logging
  # https://guides.rubyonrails.org/debugging_rails_applications.html

  config.log_level = :info
end



---



module RailsConfiguration
  class Application < Rails::Application
    # config.logger = Logger.new(STDOUT)
    config.logger = Log4r::Logger.new('Application logs')
  end
end



---



worker_timeout 3600 if ENV.fetch("RAILS_ENV", "staging_unmerged") == "staging_unmerged"
port ENV.fetch("PORT") { 5000 }
environment ENV.fetch("RAILS_ENV") { "staging_unmerged" }
pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }



---



$ rails new test_rollbar_app
$ cd test_rollbar_app



---



$ bin/rails generate rollbar



---



require_relative "application"

Rails.application.initialize!

require_relative 'rollbar'

notify = lambda do |e|
  Rollbar.with_config(use_async: false) do
    Rollbar.error(e)
  end
rescue StandardError
  Rails.logger.error 'Synchronous Rollbar notification failed.  Sending async to preserve info'
  Rollbar.error(e)
end

begin
  Rails.application.initialize!
rescue Exception => e
  notify.call(e)
  raise
end



---



$ export ROLLBAR_ACCESS_TOKEN=<ваш токен>



---



Application has been already initialized. (RuntimeError)




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CRUD
----



$ bin/rails g controller articles index



---



$ bin/rails g model articles title:string body:text author
$ bin/rails db:migrate



---



$ bundle
$ bin/rails g annotate:install
$ bundle exec annotate



# == Schema Information
#
# Table name: articles
#
#  id         :integer          not null, primary key
#  author     :string
#  body       :text
#  title      :string
#  created_at :datetime         not null
#  updated_at :datetime         not null



class Article < ApplicationRecord
end



---



10.times do |i|
  article_index = i + 1

  Article.create(
    title: Faker::Lorem.sentence,
    body: Faker::Lorem.paragraphs.join("\n\n"),
    author: Faker::Name.unique.name
  )
end



---



$ bin/rails db:seed
$ bin/rails c
$ pp Article.all



---



$ bin/rails routes -g article



---



class ArticlesController < ApplicationController
  def index
    @articles = Article.order(created_at: :desc)
  end

  def show
    @article = Article.find(params[:id])
  end

  def new
    @article = Article.new
  end

  def create
    @article = Article.new(article_params)

    if @article.save
      flash[:success] = 'New article was successfully created'
      redirect_to article_path(@article)
    else
      flash[:failure] = 'Article cannot be created'
      render :new, status: :unprocessable_entity
    end
  end

  def edit
    @article = Article.find(params[:id])
  end

  def update
    @article = Article.find(params[:id])

    if @article.update(article_params)
      flash[:success] = 'Article was successfully updated'
      redirect_to article_path(@article)
    else
      flash[:failure] = 'Article cannot be updated'
      render :edit
    end
  end

  def destroy
    @article = Article.find(params[:id])

    if @article.destroy
      flash[:success] = 'article was successfully deleted'
      redirect_to root_path
    else
      flash[:failure] = 'Article cannot be deleted'
      redirect_to article_path(@article)
    end
  end

  private

  def article_params
    params.required(:article).permit(:title, :body, :author)
  end
end



---



class ErrorsController < ApplicationController
  def not_found
    render status: :not_found
  end

  def internal_server_error
    render status: :server_error
  end
end



---



Rails.application.routes.draw do
  get '/404', to: 'errors#not_found'
  get "/500", to: "errors#server_error"

  root 'articles#index'
  resources :articles, only: [:show, :new, :create, :edit, :update, :destroy]
end



---



module CrudExample
  class Application < Rails::Application
    config.load_defaults 6.1
    config.exceptions_app = self.routes
  end
end



---



Rails.application.configure do
  config.consider_all_requests_local = false
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

RUBY ON RAILS, BLOG, REST
-------------------------


REST
----

resource
resources



---




routes.rb (app/config)


discard all


---------------------------------------------------------------------------

resource      resources

---------------------------------------------------------------------------
6 methods     7 methods
profile       articles
---------------------------------------------------------------------------

        list:
        (actions: index)  get
---------------------------------------------------------------------------

show:       show:
(actions: show)     (actions: show)   get
---------------------------------------------------------------------------

create:       create:
(actions: new, create)    (actions: new, create)  post
---------------------------------------------------------------------------

edit:       edit:
(actions: edit, update)   (actions: edit, update) get, put(patch)
---------------------------------------------------------------------------

delete:       delete:
(action: destroy)   (action: destroy) delete
---------------------------------------------------------------------------



---




http://github.com/ro31337/sample-blog


---




Rails
-----

cmd
---

$ rails console

Article.attribute_names
Article.all



---




Pattern
-------

PRG Post Redirect Get



---




warkaround for PUT



---




class ArticlesController < ApplicationController
  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
    else
      render action: 'new'
    end
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---




irb(main):004:0> Article.all

=> #<ActiveRecord::Relation [#<Article id: 1, title: "1231123", text: "xxx",



---



<h2>Thank you</h2>
<p>Article has been created</p>
<a href="/articles">Show all articles</a>



---




<h2>Thank you</h2>
<p>Article has been created</p>
<%= link_to 'Show all articles', articles_path %>



---




redirect_to @article


http://localhost:3000/articles/5


class ArticlesController < ApplicationController
  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  private
  def article_params
    params.require(:article).permit(:title, :text)
  end
end


article GET    /articles/:id(.:format)
articles#show

def show
  @article = Article.find(params[:id])
end



---




Output list of Articles
-----------------------

def index
  @articles = Article.all
end



---




class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  private
  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---




anchor + edit
-------------

<h2>List of articles</h2>

<% @articles.each do |article| %>
  <h3><%= article.title %></h3>
  <p><%= article.text %></p>
  <p>
    <%= link_to 'Show', article_path(article) %>
    <%= link_to 'Edit', edit_article_path(article) %>
  </p>
  <hr>
<% end %>

article_path(article)
edit_article_path(article)



---




def edit
  @article = Article.find(params[:id])
end



---




class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  def edit
    @article = Article.find(params[:id])
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---




article_path(@article)
method: :put

<h1>Edit article</h1>

<%= form_for :article, url: article_path(@article), method: :put do |f| %>
  <p>
    <%= f.label :title %><br>
    <%= f.text_field :title %>
  </p>
  <p>
    <%= f.label :text %><br>
    <%= f.text_area :text %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>


Unknown action
The action 'update' could not be found for ArticlesController


if @article.save

  redirect_to @article
else
  render action: new
end



---




action update
-------------

def update
  @article = Article.find(params[:id])

  if @article.update(article_params)
    redirect_to @article
  else
    render action: 'edit'
  end
end



---




class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  def edit
    @article = Article.find(params[:id])
  end

  def update
    @article = Article.find(params[:id])

    if @article.update(article_params)
      redirect_to @article
    else
      render action: 'edit'
    end
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---




Static pages
------------

$ rails g controller Pages

  create  app/controllers/pages_controller.rb
  invoke  erb
  create    app/views/pages
  invoke  test_unit
  create    test/controllers/pages_controller_test.rb
  invoke  helper
  create    app/helpers/pages_helper.rb
  invoke    test_unit
  invoke  assets
  invoke    scss
  create      app/assets/stylesheets/pages.scss



---




pages_controller.rb
-------------------

class PagesController < ApplicationController
  def terms
  end

  def about
  end
end



---




routes.rb
---------

get'terms' => 'pages#terms'
get 'about' => 'pages#about'



---




Rails.application.routes.draw do
  get 'home/index'
  get'terms' => 'pages#terms'
  get 'about' => 'pages#about'

  resource :contacts, only: [:new, :create], path_names: { :new => '' }
  resources :articles
end







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

REST
----


resource
resources


app/config/router.rb
--------------------


resource    resources
--------    ---------
profile     articles



---



resource list
-------------


index




resource show
-------------

show




resources show
--------------

show




resource create: (6 methods)
----------------------------

new   create
---   ------
GET form  POST form



---



resources create: (7 methods)
-----------------------------

new   create
---   ------
GET form  POST form



---



resource edit
-------------

edit    update




resources edit
--------------

edit    update




---



resource delete
---------------

destroy



resources delete
----------------

destroy




---



$ rails console

Article.attribute_names
Article.all



---



$ sqlite3 development.sqlite

DELETE FROM atrticles;



---



app/controllers/articles_controller.rb
--------------------------------------

@article = Article.new(article_params)

if @article.valid?
  @article.save
else
  render action: 'new'
end



---



class ArticlesController < ApplicationController
  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
    else
      render action: 'new'
    end
  end
end



---



private

def article_params
  params.require(:article).permit(:title, :text)
end



---



class ArticlesController < ApplicationController
  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
    else
      render action: 'new'
    end
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---



=> ! Template missing



---



app/views/articles/create.html.erb
----------------------------------

=> Thank you!



---



app/views/articles/create.html.erb
----------------------------------

<a href="/articles">Show all articles</a>



---



<h1>Thank you!</h1>
<p>Article has been created!</p>
<a href="/articles">Show all articles</a>



---



localhost:3000/articles/new



---



! Unknown action (GET only)



---



Pattern PRG
-----------

POST Redirect Get



---



<%= link_to 'Show all articles', articles_path %>



---



<h1>Thank you!</h1>
<p>Article has been created!</p>
<%= link_to 'Show all articles', articles_path %>



---



app/controllers/articles_controller.rb
--------------------------------------

redirect_to @article



---



class ArticlesController < ApplicationController
  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---



=> ! Unknown action (show)



---



app/controllers/articles_controller.rb
--------------------------------------

def show
  @article = Article.find(params[:id])
end



---



class ArticlesController < ApplicationController
  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---



app/views/articles/show.html.erb
--------------------------------

<h1><%= @article.title %></h1>
<p>
  <%= @article.text %>
</p>



---



=> Hello ...



---



edit   - GET
update - PUT/PATCH



---



app/controllers/articles_controller.rb
--------------------------------------

def index
  @articles = Article.all
end



---



class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---



app/views/articles/index.html.erb
---------------------------------

<h1>List of articles:</h1>

<% @article.each do |article| %>
  <h2>
    <%= @article.title %>
  </h2>
  <p>
    <%= @article.text %>
  </p>
  <hr>
<% end %>



---



app/views/articles/index.html.erb
---------------------------------

<p>
  <%= link_to 'Show', artcle_path(article) %>
</p>



---



<h1>List of articles:</h1>

<% @article.each do |article| %>
  <h2>
    <%= @article.title %>
  </h2>
  <p>
    <%= @article.text %>
  </p>
  <p>
    <%= link_to 'Show', artcle_path(article) %>
  </p>
  <hr>
<% end %>




---



app/views/articles/index.html.erb
---------------------------------

<%= link_to 'Edit', edit_article_path(article) %>



---



<h1>List of articles:</h1>

<% @article.each do |article| %>
  <h2>
    <%= article.title %>
  </h2>
  <p>
    <%= article.text %>
  </p>
  <p>
    <%= link_to 'Show', artcle_path(article) %>
    <%= link_to 'Edit', edit_article_path(article) %>
  </p>
  <hr>
<% end %>



---



Edit => ! Unknown action



---



app/controllers/articles_controller.rb
--------------------------------------

def edit
  @article = Article.find(params[:id])
end



---



class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  def edit
    @article = Article.find(params[:id])
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---



app/views/articles/edit.html.erb
--------------------------------

<h1>Edit article</h1>

<%= from_for :article, url: articles_path do |f| %>
  <p>
    <%= f.label :title %>
    <%= f.text_field :title %>
  </p>
  <p>
    <%= f.label :text %>
    <%= f.text_area :text %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>



---



localhost:3000/aticles/edit
---------------------------

=> Hello ...



---



warkaround for PUT/PATCH



---



app/views/articles/edit.html.erb
--------------------------------

article_path(@article)



---



<h1>Edit article</h1>

<%= from_for :article, url: article_path(@article) do |f| %>
  <p>
    <%= f.label :title %>
    <%= f.text_field :title %>
  </p>
  <p>
    <%= f.label :text %>
    <%= f.text_area :text %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>



---



=> /article/6



---



method: :put



---



<h1>Edit article</h1>

<%= from_for :article, url: article_path(@article), method: :put do |f| %>
  <p>
    <%= f.label :title %>
    <%= f.text_field :title %>
  </p>
  <p>
    <%= f.label :text %>
    <%= f.text_area :text %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>



---



=> ! Unknown acion (update)



---



app/controllers/articles_controller.rb
--------------------------------------

def update
  @article = Article.find(params[:id])

  if @article.update(article_params)
    redirect_to @article
  else
    render action: 'edit'
  end
end



---



class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show
    @article = Article.find(params[:id])
  end

  def new
  end

  def create
    @article = Article.new(article_params)

    if @article.valid?
      @article.save
      redirect_to @article
    else
      render action: 'new'
    end
  end

  def edit
    @article = Article.find(params[:id])
  end

  def update
    @article = Article.find(params[:id])

    if @article.update(article_params)
      redirect_to @article
    else
      render action: 'edit'
    end
  end

  private

  def article_params
    params.require(:article).permit(:title, :text)
  end
end



---



Create static pages
-------------------

$ rails g controller Pages



---



app/controllers/pages_controller.rb
-----------------------------------

class PagesController < ApplicationController
end



---



def terms
end

def about 
end



---



class PagesController < ApplicationController
  def terms
  end

  def about
  end
end



---



app/config/routes.rb
--------------------

get '/terms' => 'pages#terms'
get '/about' => 'pages#about'



---



Rails.application.routes.draw do
  get 'home/index'

  get '/terms' => 'pages#terms'
  get '/about' => 'pages#about'

  resource :contacts, only: [:new, :create], path_names: {:new => ''}
  resources :articles
end



---



localhost:3000/terms
--------------------

=> ! Template missing



---



app/views/pages/about.html.erb
------------------------------

<h1>About us</h1>
<p>Some text</p>



---



localhost:3000/about
--------------------

=> About us






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

deploy
------



$ rails new simple-blog --api
$ cd ./simple-blog
$ bin/rails g scaffold post title body
$ bin/rails db:create
$ bin/rails db:migrate
$ bin/rails db:seed

$ curl http://127.0.0.1:3000/posts                              # JSON ответ с постами


$ git remote add origin https://github.com/username/simple-blog.git
$ git add *
$ git commit -m "initial commit"
$ git push --set-upstream origin main



---



$ ssh root@<server_ip>

$ git clone https://github.com/username/simple-blog.git
$ bundle
$ bin/rails db:create
$ bin/rails db:migrate
$ bin/rails db:seed

$ rails s -p 80 -b 0.0.0.0                                      # В браузере заходим по адресу http://<server_ip>/posts
$ logout                                                        # exit



---



$ cap -T
$ cap install
$ scp config/master.key root@<server_ip>://var/www/simple-blog/shared/config
$ cap staging deploy
$ cap staging deploy:seed
$ cap staging deploy:run

$ lsof -wni tcp:3000



---



$ docker -v
$ docker build -t <username>/simple-blog .
$ docker login -u <username>
$ docker push <username>/simple-blog


$ ssh root@<server_ip>
$ docker pull <username>/simple-blog
$ docker images
$ docker run --rm -p 3001:3001 <username>/simple-blog
$ docker stop <hash>
$ docker rm <hash>



---



Dockerfile
----------


FROM ruby:3.0.1

WORKDIR /home/app

COPY Gemfile Gemfile.lock ./
RUN bundle install

COPY . .

RUN chmod +x scripts/start.sh

CMD ["./scripts/start.sh"]



---



start.sh
--------


if [ -e /home/app ]; then
  SEEDED_FILE=/home/app/.already_seeded
  pushd /home/app

  if [ -e $SEEDED_FILE ]; then
    rake db:migrate || { echo "Can't migrate database"; exit 1; }
  else
    bin/rails db:create
    bin/rails db:migrate || { echo "Can't migrate database"; exit 1; }
    bin/rails db:seed || { echo "Can't seed database"; exit 1; }
    echo 1 > $SEEDED_FILE
  fi

  rake tmp:clear || { echo "Can't clear cache"; }
  popd
fi



---



$ bin/rails server -p 3001 -b 0.0.0.0



---



Gemfile
-------


ruby '3.0.2'

group :development, :test do
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
  gem 'sqlite3', '~> 1.4'
end

group :production do
  gem 'pg'
end



---



$ curl -fsSL https://railway.app/install.sh | sh

$ railway login

$ railway init

$ railway link
$ railway up
$ railway add
$ railway vars





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

template engines
----------------



index.html.slim
---------------



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

forms
-----



gem 'simple_form'



---



$ bin/rails g simple_form:install

$ bin/rails g migration add_fields_to_articles published:boolean edited_at:datetime
$ bin/rails db:migrate

$ rails generate simple_form:install --bootstrap



---



= simple_form_for article do |f|
  = f.input :title
  = f.input :body
  = f.input :author
  = f.button :submit



---



f.input :title

f.input :title, placeholder: 'Title', required: false
f.input :body, label_html: { class: 'input-group' }, hint_html: { id: 'hint '}, input_html: {class: 'text-input'}, wrapper_html: {class: 'wrapper-class'}

f.input :title, disabled: true

f.input :title, placeholder: 'Title', required: false, error: false, hint: false
f.error :title
f.hint 'No special characters, please!'

f.error :title

f.full_error :title

f.input_field :title

f.error :title

f.hint 'No special characters, please!'

f.input :published
f.input :edited_at
f.input :published, as: :radio_buttons
f.input :published, as: :radio_buttons, checked: true
f.input :published, input_html: { checked: true }
f.input :title, collection: ['Title 1', 'Title 2']
f.input :title, collection: [['Title 1', 1], ['Title 2', 2]]
f.input :gender, as: :radio_buttons, collection: [['0', 'female'], ['1', 'male']], label_method: :second, value_method: :first
f.input :title, collection: [['Title 1', 1], ['Title 2', 2]], prompt: 'Select please'
f.input :title, collection: [['Title 1', 1], ['Title 2', 2]], selected: 2

f.button :submit, 'Submit'
f.button :submit, class: 'btn-success', id: 'submit'



---



f.input :title, as: :currency




---



app/inputs/currency_input.rb
----------------------------


class CurrencyInput < SimpleForm::Inputs::Base
  def input(kwargs)
    options = merge_wrapper_options(input_html_options, kwargs)

    "#{@builder.text_field(attribute_name, options)} $".html_safe
  end
end




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

associations
------------



Article.where(published: true).order(created_at: :desc)



---



scope :published, -> { where(published: true) }

# def self.published
#   where(published: true)
# end

scope :by_creation_date_desc, -> { order(created_at: :desc) }
scope :by_creation_date_asc, -> { order(created_at: :asc) }



---



Article.published.by_creation_date_desc



---



$ bin/rails g migration remove_author_from_articles
$ bin/rails db:migrate



---



class RemoveAuthorFromArticles < ActiveRecord::Migration[6.1]
  def change
    remove_column :articles, :author
  end
end



---



$ bin/rails g model author name
$ bin/rails db:migrate



---



class Article < ApplicationRecord
  belongs_to :author
end



---



$ bin/rails g migration add_author_to_articles author:references



---



article.author
Article.delete_all
article = Article.new
article.author                                                          # nil
author = article.build_author



---



= simple_form_for article do |f|
  = f.input :title
  = f.input :body
  = f.input :published

  = f.association :author do |a|
    = a.input :name

  # = f.association :author, as: :radio_buttons
  # = f.association :author

  = f.button :submit



---



def create
  author = Author.create(author_params)
  @article = Article.new(article_params)
  @article.author = author
end

def author_params
  params.require(:article).require(:author).permit(:name)
end



---



class Author < ApplicationRecord
  # has_one: article
  # has_and_belongs_to_many :articles

  has_many :articles
end



---



author.articles                                                     # Article::ActiveRecord_Associations_CollectionProxy

author.articles.pluck(:title)
author.articles.pluck(:title, :id)



---



class Doctor < ApplicationRecord
  has_many :appointments
  has_many :patients, through: :appointments
end

class Patient < ApplicationRecord
  has_many :appointments
  has_many :doctors, through: :appointments
end

class Appointment < ApplicationRecord
  belongs_to :doctor
  belongs_to :patient
end

doctor = Doctor.create(name: 'Fred')
patient = Patient.create(name: 'Alice')
appointment = Appointment.create(doctor: doctor, patient: patient, appointment_date: Time.now.tomorrow)

appointment.doctor                                                # Doctor name: 'Fred'
appointment.patient                                               # Doctor name: 'Alice'

doctor.patients.pluck(:name)                                      # ["Alice"]



---



article = Article.new
author = article.build_author(name: 'Bob')

author = Author.find(1)

article = author.articles.build(title: 'Article 1', body: "Article body") # аналог Article.new

class CreateArticlesAuthors < ActiveRecord::Migration[6.1]
  def change
    create_table :articles_authors, id: false do |t|
      t.belongs_to :articles
      t.belongs_to :authors
      t.timestamps
    end
  end
end




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ASSOCIATIONS
------------

Models
------

Tag, Destination
----------------


class Tag < ActiveRecord::Base
  has_many :destinations
end

class Destination < ActiveRecord::Base
  belongs_to :tag
end



---



has_many :destinations  - обозначает, что один Tag может иметь несколько Destinations
belongs_to :tag         - обозначает, что каждый Destination принадлежит одному Tag
has_many / belongs_to   - часто используется для определения отношений один-ко-многим



---



t.references :some_table          - добавляет внешний ключ, указывающий на таблицу
@destinations = @tag.destinations - извлекает все пункты назначения, принадлежащие тегу, и сохраняет их в файле @destinations





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

nested resources
----------------



$ bin/rails g scaffold book title:string
$ bin/rails g scaffold page body:text book:references
$ bin/rails db:migrate



---



class Book < ApplicationRecord
  has_many :pages
end



---



class Page < ApplicationRecord
  belongs_to :book
end



---



ails.application.routes.draw do
  root 'books#index'

  resources :books, except: [:index] do
    resources :pages, only: [:index, :new, :create]
  end

  resources :books, except: [:index], shallow: true do
    resources :pages, only: [:show, :edit, :update, :destroy]
  end
end



---



class PagesController < ApplicationController
  before_action :set_book, only: %i[ index new create ]
  before_action :set_page, only: %i[ show edit update destroy ]

  def index
    @pages = @book.pages
  end

  def show
  end

  def new
    @page = @book.pages.build
  end

  def edit
  end

  def create
    @page = @book.pages.build(page_params)

    if @page.save
      redirect_to book_path(@book), notice: "Page was successfully created."
    else
      render :new, status: :unprocessable_entity
    end
  end

  def update
    if @page.update(page_params)
      redirect_to book_path(@page.book), notice: "Page was successfully updated."
    else
      render :edit, status: :unprocessable_entity
    end
  end

  def destroy
    @page.destroy
    format.html { redirect_to pages_url, notice: "Page was successfully destroyed." }
  end

  private

  def set_book
    @book = Book.find(params[:book_id])
  end

  def set_page
    @page = Page.find(params[:id])
  end

  def page_params
    params.require(:page).permit(:body, :book_id)
  end
end



---



<p id="notice"><%= notice %></p>

<p>
  <strong>Title:</strong>
  <%= @book.title %>
</p>

<%= link_to 'Add new page', new_book_page_path(@book) %> |
<%= link_to 'Edit', edit_book_path(@book) %> |
<%= link_to 'Back', root_path %>


<h1>Pages</h1>

<table>
  <thead>
    <tr>
      <th>Body</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @book.pages.each do |page| %>
      <tr>
        <td><%= page.body %></td>
        <td><%= link_to 'Edit', edit_page_path(page) %></td>
        <td><%= link_to 'Destroy', page, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>



---



class Web::ApplicationController < ApplicationController
end




---



class Web::BooksController < Web::ApplicationController
end



---



class Web::PagesController < Web::ApplicationController
end



---



Rails.application.routes.draw do
  scope module: :web do
    root 'books#index'
    resources :books, except: [:index] do
      resources :pages, only: [:index, :new, :create]
    end

    resources :books, except: [:index], shallow: true do
      resources :pages, only: [:show, :edit, :update, :destroy]
    end
  end
end



---



Rails.application.routes.draw do
  scope module: :web do
    root 'books#index'
    resources :books, except: [:index] do
      resources :pages, only: [:index, :new, :create]
      post :publish
    end
  end
end



---



Rails.application.routes.draw do
  scope module: :web do
    root 'books#index'
    resources :books, except: [:index] do
      collection do
        post :publish
      end
    end
  end
end



---



Rails.application.routes.draw do
  scope module: :web do
    root 'books#index'
    resources :books, except: [:index] do
      member do
        post :publish
      end
    end
  end
end




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

I18n
----



I18n.default_locale



---



class ApplicationController < ActionController::Base
  around_action :set_locale_param

  private

  def default_url_options
    { locale: I18n.locale }
  end

  def set_locale_param(&action)
    locale = params[:locale] || I18n.default_locale
    I18n.with_locale(locale, &action)
  end

  def set_locale_param_with_cookie(&action)
    locale = params[:locale] || cookies[:locale] || I18n.default_locale
    I18n.with_locale(locale, &action)
    cookies[:locale] = I18n.locale
  end

  def set_locale_domain(&action)
    locale = request.subdomains.first

    I18n.locale = if I18n.available_locales.include?(locale.to_sym)
      locale
    else
      I18n.default_locale
    end
  end

  def set_locale_headers
    logger.debug(request.env['HTTP_ACCEPT_LANGUAGE'])
    locale = request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first

    logger.debug("LOCALE: #{locale}")

    I18n.locale = if I18n.available_locales.include?(locale.to_sym)
      locale
    else
      I18n.default_locale
    end
  end
end



---



config/routes.rb
----------------


Rails.application.routes.draw do
  scope '/(:locale)', locale: /en|ru/ do
    root 'welcome#index'
    resources :users
  end
end



---



config/application.rb
---------------------


require_relative "boot"
require "rails/all"

Bundler.require(*Rails.groups)

module I18nApp
  class Application < Rails::Application
    config.load_defaults 6.1

    config.I18n.default_locale = :ru # :en

    config.I18n.available_locales = [:en, :ru]
    config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}')]
  end
end



---



translate(:welcome_title)
translate('welcome_title')
I18n.translate('welcome_title')
I18n.t('welcome_title')
t('welcome_title')

# en.users.all

t('users.all')
t('all', scope: 'users')


t('all', default: 'All Users')
t('non_exists.all', default: :'fallback.all_users')
t('non_exists.all', default: [:'fallback.all_users', 'Backup users 2'])

t('.all')

User.model_name.human(count: 100)



---



t('.created_count', count: User.count)
t('.created_count', count: @count)

l(Time.now, format: :short)

distance_of_time_in_words(Time.now)

number_to_currency(5)
number_to_percentage(5)



---



ru:
  activerecord:
    attributes:
      user:
        first_name: Имя

    models:
      user:
        one: Пользователь
        other: Пользователи

    errors:
      models:
        user:
          attributes:
            first_name:
              blank: не может быть пустым



---



ru:
  time:
    formats:
      default:  '%d-%m-%Y'
      short: '%d %b'
      long: '%d %B %Y'



---



ru:
  some_html_string: <b>Этот текст содержит html</b>
  safe_string_html: <b> Эта строка по умолчанию не экранируется _html</b>
  welcome_title: Добро пожаловать в CRM для пользователей
  users:
    index:
      all: Все пользователи
      created_count:
        one: Создан %{count} пользователь
        other: Создано %{count} пользователя
    all: Все пользователи
    first_name: Имя
    last_name: Фамилия
    new_user: Новый пользователь

  actions:
    confirm: Вы уверены?
    show: Показать
    edit: Изменить
    destroy: Удалить

  fallback:
    all_users: Все пользователи запасной



---



Переводы кнопок simple_form
---------------------------

helpers:
  submit:
    user:
      create: "Создать пользователя"





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

middlewares
-----------



$ Rails.application
$ Rails.application.root



---



$ racup
$ rackup --help

$ rackup config.ru



---



Rails::Server.new.tap do |server|
  require APP_PATH
  Dir.chdir(Rails.application.root)
  server.start
end

class RailsServer < ::Rack::Server
  def initialize
    # ...
    super
  end

  def start
    # ...
    super
  end
end



---



$ bin/rails middleware




---



module MiddlewareApp
  class Application < Rails::Application
    config.load_defaults 6.1

    config.middleware.delete ActionDispatch::Session::CookieStore
    config.middleware.swap ActionDispatch::Flash, ActionDispatch::Cookies
    config.middleware.insert_before ActionDispatch::Flash, ActionDispatch::Cookies
    config.middleware.insert_after ActionDispatch::Flash, ActionDispatch::Cookies
    config.middleware.use ActionDispatch::Flash

    config.middleware.use RequestTimeLogger, '#'
  end
end



---



lib/request_time_logger.rb
--------------------------


class RequestTimeLogger
  attr_reader :app, :logger_indentificator

  def initialize(app, logger_indentificator = '*')
    @app = app
    @logger_indentificator = logger_indentificator
  end

  def call(env)
    dup._call(env)
  end

  def _call(env)
    request_recieved_at = Time.now
    @status, @headers, @response = @app.call(env)
    request_handled_at = Time.now

    beauty_logging(request_handled_at - request_recieved_at)

    [@status, @headers, @response]
  end

  private

  def beauty_logging(time)
    Rails.logger.debug(logger_indentificator * 50)
    Rails.logger.debug("Request time: #{time}")
    Rails.logger.debug(logger_indentificator * 50)
  end
end



---



lib/request_time_logger.rb
--------------------------


class FreezeServer
  attr_reader :app
  def initialize(app)
    @app = app
  end

  def call(env)
    @status, @headers, @response = @app.call(env)

    sleep 2
    [@status, @headers, @response]
  end
end



---



config/environments/development.rb
----------------------------------


require "active_support/core_ext/integer/time"

require_relative '../../lib/request_time_logger'
require_relative '../../lib/freeze_server'

Rails.application.configure do
  config.middleware.use RequestTimeLogger, '#'
  config.middleware.use FreezeServer
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

rake
----



$ bin/rails console                                                       # запуск консоли
$ bin/rails server                                                        # запуск сервере
$ bin/rails generate
$ bin/rails generate scaffold
$ bin/rails destroy
$ bin/rails dbconsole                                                     # запуск консоли БД
$ bin/rails runner 'pp User.all'                                          # запуск команды


$ bin/rails g scaffold User name
$ bin/rails db:migrate
$ bin/rails db:seed

$ bin/rails runner 'pp User.first'
$ bin/rails runner lib/user.rb

$ bin/rails about
$ bin/rake about

$ bin/rake dbconsole


$ bin/rake assets:precompile
$ bin/rake assets:clobber
$ bin/rake assets:clean
$ bin/rails notes                                                         # вывод всех пометок "TODO" и др. в проекте
$ bin/rake stats                                                          # статистика проекта, количество строк кода, классов и т.д.
$ bin/rake timezones

$ bin/rake time:zones:all

$ bin/rails users:create



---



namespace :users do
  desc 'Creates 5 users'
  task :create => :environment do
    print "Task started...\n"

    5.times do |i|
      User.create(name: "Alice #{i + 1}")
      print '.'
    end

    print "\n...done\n"
  end

  # bin/rails users:update name=vasya
  desc 'Updates user name'
  task update: :environment do
    print "Task started...\n"

    User.find(1).update(name: ENV['name'])

    print "\n...done\n"
  end
end

namespace :users do
  # bin/rails 'users:update[vasya]'
  desc 'Updates user name'
  task :update, [:name] => :environment do |t, args|
    name = args[:name]
    print "Change user name to #{name}"

    User.find(1).update(name: name)

    print "\n...done\n"
  end
end

namespace :manipulate_files do
  desc "Creates file in tmp folder"
  task :create do
    touch "tmp/rake_test.file.rb"
  end

  desc "Show files list"
  task :show do
    # FileList - хелпер Rake
    # https://docs.ruby-lang.org/en/2.2.0/Rake/FileList.html
    FileList.new('config/environments/*.rb') do |file|
      pp file.exclude(/dev/)
    end
  end
end



---



$ bin/rails g task
$ bin/rails g task manipulate_files create

$ bin/rails users:update name=vasya
$ bin/rails 'users:update[vasya]'





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails sequrity
--------------


require 'open-uri'
require 'nokogiri'
require 'net/http'
require 'net/https'

uri = URI('https://httpbin.org')
get_path = 'get'
post_path = 'post'

Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https', verify_mode: OpenSSL::SSL::VERIFY_NONE) do |http|
  request  = Net::HTTP::Get.new uri.request_uri + get_path
  response = http.request request

  puts response.body

  # cookie = response.response['set-cookie'].split('; ')[0]

  params = {
    test: true,
    hello: 'world'
  }

  request = Net::HTTP::Post.new uri.request_uri + post_path
  request.body = URI.encode_www_form(params)
  # request['Cookie'] = cookie

  response = http.request request

  puts response.body

  response.code == '200'
end



---



Пример с получением страницы
----------------------------

hostname = 'https://example.com'

uri = URI(hostname)
http = Net::HTTP.new(uri.host, uri.port)
http.use_ssl = uri.scheme == 'https'
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new uri

response = http.request request



---




Если нам нужно получить куки со страницы
----------------------------------------

cookie = response.response['set-cookie'].split('; ')[0]

params = {
  'name': "Jon",
  'email': "jon@example.com"
  'token': token
}

request = Net::HTTP::Post.new URI.join(hostname, '/register')
request.body = URI.encode_www_form(params)



Добавляем куки в запрос
-----------------------

request['Cookie'] = cookie

response = http.request request



---




При успешной отправке формы как правило
---------------------------------------

response.code == '302'



---




Пример скрапинга данных со страницы
-----------------------------------

example_uri = URI('https://example.com/')
response = Net::HTTP.get_response(example_uri)

html = Nokogiri::HTML(response.body)




Поиск нужного тега с помощью селекторов
---------------------------------------

token_tag = html.at('input[@name="token"]')
puts token_tag['value']







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails System Tests
------------------


gem 'capybara'


$ bin/rails test:system



---



book_test.rb
------------

# frozen_string_literal: true

test/system/books_test.rb
-------------------------


require 'application_system_test_case'

class BooksTest < ApplicationSystemTestCase
  setup do
    @book = books(:one)
  end

  test 'visiting the index' do
    visit books_url
    assert_selector 'h1', text: 'Books'
  end

  test 'creating a Book' do
    visit books_url
    click_on 'New Book'

    click_on 'Create Book'

    assert_text 'Book was successfully created'
  end

  test 'updating a Book' do
    visit books_url
    click_on 'Edit', match: :first

    click_on 'Update Book'

    assert_text 'Book was successfully updated'
  end

  test 'destroying a Book' do
    visit books_url
    page.accept_confirm do
      click_on 'Destroy', match: :first
    end

    assert_text 'Book was successfully destroyed'
  end
end




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails FSM, AASM
---------------


Gemfile
-------

gem 'aasm'



---



AASM class example
------------------

class Job
  include AASM

  aasm do
    state :sleeping, initial: true
    state :running, :cleaning

    event :run do
      transitions from: :sleeping, to: :running
    end

    event :clean do
      transitions from: :running, to: :cleaning
    end

    event :sleep do
      transitions from: [:running, :cleaning], to: :sleeping
    end
  end
end



---



job = Job.new


У модели появляются функции-предикаты, которые позволяют определить состояние
-----------------------------------------------------------------------------

job.sleeping? # => true
job.may_run?  # => true
job.run
job.running?  # => true
job.sleeping? # => false
job.may_run?  # => false
job.run       # => raises AASM::InvalidTransition



---



По дефолту используется имя колонки aasm_state
----------------------------------------------


class CreateExamples < ActiveRecord::Migration[6.1]
  def change
    create_table :examples do |t|
      t.string :aasm_state

      t.timestamps
    end
  end
end



---



job = Job.new
job.run                         # not saved



События с ! сохраняют модель
----------------------------

job.run!                        # saved



or
--



Запрос на изменение состояния выполняется с глаголом PATCH
----------------------------------------------------------


job.aasm.fire(:run) # not saved
job.aasm.fire!(:run) # saved

resources :vacancies do
  member do
    patch :run
  end
end



---



AASM
----

https://github.com/aasm/aasm
https://www.restapitutorial.com/lessons/httpmethods.html





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ransack
-------


require_relative 'boot'

В config/application.rb добавляем работу с SimpleForm
-----------------------------------------------------

ENV['RANSACK_FORM_BUILDER'] = '::SimpleForm::FormBuilder'



---



require 'rails/all'

class PeopleController < ApplicationController
  def index
    @q = Person.ransack(params[:q])
    @people = @q.result
  end
end



---



Можем использовать хелпер формы. Однако этот хелпер не может подтягивать стили Bootstrap, поэтому классы и лейблы нужно писать самим
------------------------------------------------------------------------------------------------------------------------------------

Если в конфиге подключен Simpleform для ransack, используем его
---------------------------------------------------------------

Можем отключить показ лейблов
Ransack ищет по полям в БД
Для фильтров необходимо использовать определенные имена. Например, Если поле "содержит" текст, то имя инпута формы - column_cont
--------------------------------------------------------------------------------------------------------------------------------

= search_form_for @q do |f|
  .row.my-2
    .col-5
      = f.input :name_cont, label: false
    .col-4

      # Для вывода списка состояний можно выполнить map() на списке состояний

      = f.input :aasm_state_eq, as: :select, collection: Post.aasm.states.map(&:name), label: false
    .col-3
      = f.submit 'Search', class: 'btn btn-primary me-2'
      = link_to 'Reset', url_for, class: 'btn btn-outline-primary'



---



class User < ApplicationRecord
  include AASM

  validates :name, presence: true

  def self.ransackable_attributes(_auth_object = nil)
    %w[name]
  end
end



---



https://github.com/activerecord-hackery/ransack#search-matchers




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Nested Forms, and nested attributes, with activerecord and cocoon
-----------------------------------------------------------------


вложенная форма
---------------

form_for @user do |f|
  = f.simple_fields_for :posts do |posts_form|
    = posts_form.input :title
  end
end



---



вложенная форма
---------------

form_for @user do |f|
  = f.simple_fields_for :posts do |posts_form|
  = render 'posts_field', posts_form: posts_form
  end
end



---



class Project < ActiveRecord::Base
  has_many :tasks, inverse_of: :project, dependent: :destroy
  accepts_nested_attributes_for :tasks, reject_if: :all_blank, allow_destroy: true
end

class Task < ActiveRecord::Base
  belongs_to :project
end



---



Нажатие по ссылке будет подгружать на страницу новые поля
---------------------------------------------------------



= simple_form_for @project do |f|
  = f.input :name
  = f.input :description
  %h3 Tasks
    = f.simple_fields_for :tasks do |task|
      = render 'task_fields', f: task
    .links
      = link_to_add_association t('.add_task'), f, :tasks
  = f.submit



---



_task_fields.slim
-----------------

Нажатие по ссылке будет удалять поля
------------------------------------

.nested-fields
  = f.input :description
  = f.input :done, as: :boolean

  = link_to_remove_association t('.remove_task'), f



---



exercises/nested-forms/app/javascript/packs/application.js
----------------------------------------------------------

require("jquery")
require("@nathanvda/cocoon")





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add cocoon to rails 7 app
-------------------------


Gemfile
-------

gem 'jquery-rails'
gem 'cocoon'



---



assets.rb
---------

Rails.application.config.assets.precompile += %w( jquery.js )



---



application.html.erb
--------------------


<%= javascript_include_tag "jquery" %>



---



$ importmap pin @nathanvda/cocoon



---



application.js
--------------

import "@nathanvda/cocoon"





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

User authentication and authorization with pundit gem for Rails app
-------------------------------------------------------------------


Gemfile
-------

gem "pundit"



---



$ rails g pundit:install




---




class ApplicationController < ActionController::Base
  include Pundit::Authorization
end

class PostPolicy
  attr_reader :user, :post

  def initialize(user, post)
    @user = user
    @post = post
  end

  def update?
    user.admin? || !post.published?
  end
end




или
---



Вторым параметром можно передать имя привилегии, которое нужно проверить, если имя экшена отличается
----------------------------------------------------------------------------------------------------



class PostPolicy < ApplicationPolicy
  def update?
    user.admin? || !record.published?
  end
end

class PostsController < ActionController
  def update
    @post = Post.find(params[:id])
    authorize @post

    if @post.update(post_params)
      redirect_to @post
    else
      render :edit
    end
  end

  def publish
    @post = Post.find(params[:id])
    authorize @post, :update?
    @post.publish!
    redirect_to @post
  end
end





Если нет конкретного инстанса для которого нужно проверить права, можно проверить права по имени класса
-------------------------------------------------------------------------------------------------------

class PostPolicy < ApplicationPolicy
  def admin_list?
    user.admin?
  end
end

def admin_list
  authorize Post                                                # we don't have a particular post to authorize
end




Использование политики в шаблоне
--------------------------------

<% if policy(@post).update? %>
 <%= link_to "Edit post", edit_post_path(@post) %>
<% end %>

<% if policy(Post).new? %>
 <%= link_to "Create post", new_post_path %>
<% end %>





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Working with files, using active_storage
----------------------------------------


$ bin/rails active_storage:install
$ bin/rails db:migrate



---



class User < ApplicationRecord
  has_one_attached :avatar

  validates :avatar, attached: true, content_type: %i[png jpg jpeg], size: { less_than: 5.megabytes }
end




---



tests
-----


class VehiclesControllerTest < ActionDispatch::IntegrationTest
  setup do
    @vehicle = vehicles(:one)

    @attrs = {
      manufacture: Faker::Vehicle.manufacture,
      model: Faker::Vehicle.model,
      color: Faker::Vehicle.color,
      doors: Faker::Vehicle.doors,
      kilometrage: Faker::Vehicle.kilometrage,
      production_year: Faker::Date.backward,
      image: fixture_file_upload('hexlet.png', 'image/png')
    }
  end

  test 'should get index' do
    get vehicles_url
    assert_response :success
  end

  test 'should get new' do
    get new_vehicle_url
    assert_response :success
  end

  test 'should create vehicle' do
    post vehicles_url, params: { vehicle: @attrs }

    vehicle = Vehicle.find_by(@attrs.except(:image))

    assert { vehicle }
    assert_redirected_to vehicle_url(vehicle)
  end

  test 'should show vehicle' do
    get vehicle_url(@vehicle)
    assert_response :success
  end

  test 'should get edit' do
    get edit_vehicle_url(@vehicle)
    assert_response :success
  end

  test 'should update vehicle' do
    patch vehicle_url(@vehicle), params: { vehicle: @attrs }

    @vehicle.reload

    assert { @vehicle.manufacture == @attrs[:manufacture] }
    assert { @vehicle.model == @attrs[:model] }
    assert_redirected_to vehicle_url(@vehicle)
  end

  test 'should destroy vehicle' do
    delete vehicle_url(@vehicle)

    assert_redirected_to vehicles_url

    assert { !Vehicle.exists? @vehicle.id }
  end
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Controller
----------


$ rails g controller Messages



---



app/config/routes.rb
--------------------

get 'messages' => 'message#index'



---



app/controllers/messages_controller.rb
--------------------------------------

def index 
  @messages = Message.all 
end



---



class MessagesController < ApplicationController
  def index
    @messages = Message.all
  end
end





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Controllers Hierarchy
---------------------------


config/routes.rb
----------------

Rails.application.routes.draw do
  namespace :api do
  end

  scope module: :web do
    namespace :admin do
    end

    root 'home#index'

    shallow do
      resources :books, only: index do
        resources :comments, except: [:edit, :update]
      end

      resources :users do
        resources :books
        resources :comments, only: [:index]
      end
    end
  end
end



---



app/controllers/web/application_controller.rb
---------------------------------------------

Иерархия контроллеров позволяет разделять контекст и удобно создавать вложенные модули
--------------------------------------------------------------------------------------

class Web::ApplicationController < ActionController::Base
end



---



app/controllers/web/books/application_controller.rb
---------------------------------------------------

Каждый модуль содержит свой ApplicationController
-------------------------------------------------

class Web::Books::ApplicationController < Web::ApplicationController
  helper_method :resource_book

  def resource_book
    @resource_book ||= Book.find params[:book_id]
  end
end



---



app/controllers/web/books/comments_controller.rb
------------------------------------------------

class Web::Books::CommentsController < Web::Books::ApplicationController
  def index
    @comments = resource_book.comments.order(id: :desc)
  end
end



---



https://habr.com/ru/articles/136461/





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails API, api versioning, responders
-------------------------------------


Scaffold генерирует в контроллерах методы, которые работают с несколькими форматами
-----------------------------------------------------------------------------------

Также как с шаблонами, ищется во вью файл для показа в нужном формате (html, json)
----------------------------------------------------------------------------------


class BooksController < ApplicationController
  before_action :set_book, only: %i[ show edit update destroy ]

  def index
    @books = Book.all
  end

  def show
  end

  def new
    @book = Book.new
  end

  def edit
  end

  def create
    @book = Book.new(book_params)

    respond_to do |format|
      if @book.save
        format.html { redirect_to @book, notice: "Book was successfully created." }
        format.json { render :show, status: :created, location: @book }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @book.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @book.update(book_params)
        format.html { redirect_to @book, notice: "Book was successfully updated." }
        format.json { render :show, status: :ok, location: @book }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @book.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    @book.destroy
    respond_to do |format|
      format.html { redirect_to books_url, notice: "Book was successfully destroyed." }
      format.json { head :no_content }
    end
  end

  private

  def set_book
    @book = Book.find(params[:id])
  end

  def book_params
    params.require(:book).permit(:title)
  end
end



---




respond_to переопределяет стандартное поведение
-----------------------------------------------

запрос к /books.json выводит { "hi": "books" }
----------------------------------------------



class BooksController < ApplicationController
  before_action :set_book, only: %i[ show edit update destroy ]

  def index
    @books = Book.all

    respond_to do |format|
      format.html do
        redirect_to root_path
      end
      format.json do
        render json: { hi: 'Books' }
      end
    end
  end
end



format приходит в переменную params
-----------------------------------

{ "controller":"books", "action":"index", "format":"json" }



$ bin/rails routes -g books


#    Prefix Verb   URI Pattern               Controller#Action
#     books GET    /books(.:format)          books#index
#           POST   /books(.:format)          books#create
#  new_book GET    /books/new(.:format)      books#new
# edit_book GET    /books/:id/edit(.:format) books#edit
#      book GET    /books/:id(.:format)      books#show
#           PATCH  /books/:id(.:format)      books#update
#           PUT    /books/:id(.:format)      books#update
#           DELETE /books/:id(.:format)      books#destroy



---



метод принимает только запросы вида /books.json и отвечает только в json
------------------------------------------------------------------------



class BooksController < ApplicationController
  before_action :set_book, only: %i[ show edit update destroy ]

  def index
    respond_to :json

    @books = Book.all
  end
end



---




При преобразовании вызывается метод to_json()
---------------------------------------------


class BooksController < ApplicationController
  before_action :set_book, only: %i[ show edit update destroy ]

  def show
    respond_to do |format|
      format.html { redirect_to root_path }
      format.json { render json: @book.to_json, root: true }

      # root: true кладет сущность в под ключем
      # => {"book":{"id":1,"title":"example","created_at":"2021-11-10T11:57:36.381Z","updated_at":"2021-11-10T11:57:36.381Z"}}
    end
  end
end



---




as_json позволяет выводить только определенные поля
---------------------------------------------------



class BooksController < ApplicationController
  def show
    respond_to :json

    render json: @book.as_json(
      root: true,
      only: :title
    )
    # => {"book":{"title":"example"}}
  end
end



---



api логика лежит отдельно
-------------------------

изолируем изменения на каждой версии api
----------------------------------------


Rails.application.routes.draw do
  resources :books

  namespace :api do
    namespace :v1 do
      resources :books
    end
  end
end



#     api_v1_books GET    /api/v1/books(.:format)          api/v1/books#index
#                  POST   /api/v1/books(.:format)          api/v1/books#create
#  new_api_v1_book GET    /api/v1/books/new(.:format)      api/v1/books#new
# edit_api_v1_book GET    /api/v1/books/:id/edit(.:format) api/v1/books#edit
#      api_v1_book GET    /api/v1/books/:id(.:format)      api/v1/books#show
#                  PATCH  /api/v1/books/:id(.:format)      api/v1/books#update
#                  PUT    /api/v1/books/:id(.:format)      api/v1/books#update
#                  DELETE /api/v1/books/:id(.:format)      api/v1/books#destroy



---



app/controllers/api/application_controller.rb
---------------------------------------------

Работает для всех версий
------------------------

Перед этим необходимо подключить гем gem "responders"
-----------------------------------------------------


class Api::ApplicationController < ApplicationController
  respond_to :json
end



app/controllers/api/v1/application_controller.rb
------------------------------------------------

class Api::V1::ApplicationController < Api::ApplicationController
end



app/controllers/api/v1/books_controller.rb
------------------------------------------

class Api::V1::BooksController < Api::V1::ApplicationController
  def index
    @books = Books.all

    respond_with @books.as_json(only: :title)
  end
end


Без гема responders выглядело бы так
------------------------------------

render json: @books.as_json(only: :title)



---



class Api::V1::BooksControllerTest < ActionDispatch::IntegrationTest
  setup do
    @book = books(:one)
  end

  test 'should get api index' do
    get api_books_url(format: :json)
    assert_response :success
  end

  test 'should get api show' do
    get api_book_url(@book, format: :json)
    assert_response :success
  end
end




---



https://apidock.com/rails/ActionController/MimeResponds/InstanceMethods/respond_to
https://apidock.com/rails/ActiveRecord/Serialization/to_json





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

jbuilder for json Rails
-----------------------



app/views/books/index.json.builder
----------------------------------

Jbuilder позволяет использовать синтаксис и все конструкции ruby
----------------------------------------------------------------

.jbuilder похож на шаблоны и позволяет также погружать паршеллы из других файлов
--------------------------------------------------------------------------------


json.array! @books, partials: "books/book", as: book



app/views/books/_book.json.builder
----------------------------------

json.extract! book, :title, :description, :created_at, :updated_at
json.url book_url(book, format: :json)



---



app/views/books/_book.json.builder
----------------------------------

Поле добавляется при выполнении условия
---------------------------------------

unless book.title == 'Example'
  json.title book.title
end




Значение поля устанавливается в зависимости от условия
------------------------------------------------------

json.author book.author == 'Tirion' ? boo.author : nil




Добавляется поле, которое будет в каждом элементе списка или в структуре
------------------------------------------------------------------------

json.set! :category, 'Non-Fiction'

hash = { genre: 'Fantasy' }

json.merge!(hash)




app/views/books/index.json.builder
----------------------------------

# Отдаётся массив с объектами с одним атрибутом

json.array! @books, :id




app/views/books/index.json.builder
----------------------------------

json.partial! 'books/book', books: @books

json.extract! book, :title, :description, :created_at, :updated_at




Передача блока позволяет создавать вложенные структуры (объекты)
----------------------------------------------------------------

json.book_title do
  json.title book.title
end



---



class BooksController < ApplicationController
  def index
    @books = Book.all

    respond_to do |format|
      format.rss { render layout: false }
    end
  end
end



app/views/books/index.rss.jbuilder
----------------------------------

xml.instruct! :xml, :version => "1.0"
xml.rss :version => "2.0" do
  xml.channel do
    xml.title "Books seed"
    xml.description "Describes books title and ID"
    xml.link root_url

    @books.each do |book|
      xml.item do
        xml.title book.title
        xml.description book.description
        xml.book_url book_url(book)
      end
    end
  end
end



---



doctype html
html.h-100
  head
    title = t('.title')
    == csrf_meta_tags
    == csp_meta_tag
    meta name="keywords" content="template language"
    meta name="author" content='author'
    meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"
    = stylesheet_pack_tag 'application', media: 'all'
    = javascript_pack_tag 'application'

    / Ссылка на RSS поток

    = auto_discovery_link_tag :rss, books_url(format: :rss)

  body



---



Serializers generation
----------------------

Gemfile
-------

gem "active_model_serializers"



---



https://github.com/rails-api/active_model_serializers/blob/v0.10.6/docs/general/getting_started.md#creating-a-serializer





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Streaming
---------------




Включение стриминга шаблонов
----------------------------

https://api.rubyonrails.org/classes/ActionController/Streaming.html



---




class BooksController < ApplicationController
  def index
    @books = Book.all

    render stream: true
  end
end



---



при запросе с помощью Curl данные будут отдаваться постепенно
-------------------------------------------------------------

class HelloController < ActionController::Base
  include ActionController::Live

  def stream
    response.headers['Content-Type'] = 'text/event-stream'
    response.headers["Last-Modified"] = Time.current.httpdate
    100.times {
      response.stream.write "hello world\n"
      sleep 1
    }
  ensure
    response.stream.close
  end
end



---



Используется для отправки готового файла
----------------------------------------



https://api.rubyonrails.org/v5.1.7/classes/ActionController/DataStreaming.html
------------------------------------------------------------------------------

class BooksController < ActionController::Base
  include ActionController::Live

  def send_file
    send_file(Rails.root.join('public', '404.html'), filename: 'hello.txt')
  end

  def send_data
    data = 'Hello'
    send_data(data, filename: 'hello.txt')                                      # Отправляется стриминговый файл, которого изначально нет
  end
end



---



ActionController::Live
----------------------



class MyController < ActionController::Base
  include ActionController::Live

  def stream
    response.headers['Content-Type'] = 'text/event-stream'

    100.times do
      response.stream.write "hello world\n"
      sleep 1
    end
  ensure
    response.stream.close
  end
end



---



send_stream(filename: "subscribers.csv") do |stream|
  stream.write "email_address,updated_at\n"

  @subscribers.find_each do |subscriber|
    stream.write "#{subscriber.email_address},#{subscriber.updated_at}\n"
  end
end



---



$ curl -i -X GET "http://localhost:3001/messaging"






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

JSON testing Rails
------------------


Rails.application.routes.draw do
  namespace :api do
    namespace :v1 do
      get 'names/fetch', to: 'names#fetch', as: :fetch_name
    end
  end
end



---



Простейший способ тестирования API
----------------------------------

class Api::V1::NamesControllerTest < ActionDispatch::IntegrationTest
  test '#fetch' do
    get api_v1_fetch_name_url
    assert_response :success
  end
end

class Api::V1::NamesController < Web::ApplicationController
  def fetch
    render json: {
      country: '',
      possibility: 0.1
    }
  end
end



Проверка содержимого ответа
---------------------------

class Api::V1::NamesControllerTest < ActionDispatch::IntegrationTest
  test '#fetch' do
    get api_v1_fetch_name_url
    json_response = JSON.parse(response.body)

    assert_response :success
    assert_equal 'RU', json_response['country']
    assert_equal 0.1, json_response['possibility']

    refute_nil json_response['country']
    refute_nil json_response['possibility']
  end
end



---



class Api::V1::NamesController < Web::ApplicationController
  def fetch
    result = FetchNameInformationService.new.(name: params[:name])
  end
end



app/services/fetch_name_information_service.rb
----------------------------------------------

Сервис возвращает информацию об имени и верояность его использования в странах
------------------------------------------------------------------------------



class FetchNameInformationService
  FETCH_NAME_BASE_URL = 'http://api.nationalize.io'

  def call(name:)
    uri = URI("#{FETCH_NAME_BASE_URL}?name=#{name}")
    response = Net::HTTP.get(uri)
    JSON.parse(response)
  rescue StandardError
    {
      country: nil,
      possibility: nil
    }
  end
end



test/services/fetch_name_information_service_test.rb
----------------------------------------------------

require 'test_helper'
require_relative 'app/services/fetch_name_information_service.rb'




При каждом запуске тестов выполняется реальный запрос к API
-----------------------------------------------------------

class FetchNameInformationServiceTest < ActiveSupport::TestCase
  test '#call' do
    result = FetchNameInformationService.new.(name: params[:name])

    assert result['country'].is_a? Array
  end
end



---



http://api.nationalize.io/?name=David





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Webmock testing Rails
---------------------


Gemfile
-------

group :test do
  gem "webmock"
end



---



test/test_helper.rb
-------------------

require 'webmock/minitest'



test/services/fetch_name_information_service_test.rb
----------------------------------------------------

require 'test_helper'
require_relative 'app/services/fetch_name_information_service.rb'



---



app/services/fetch_name_information_service.rb
----------------------------------------------

Сервис возвращает информацию об имени и верояность его использования в странах
------------------------------------------------------------------------------


http://api.nationalize.io/?name=David



---



class FetchNameInformationService
  FETCH_NAME_BASE_URL = 'http://api.nationalize.io'

  def call(name:)
    uri = URI("#{FETCH_NAME_BASE_URL}?name=#{name}")
    response = Net::HTTP.get(uri)

    {
      country: response['country'][0]['country_id'],
      possibility: response['country'][0]['probability']
    }
  rescue StandardError
    {
      country: '',
      possibility: ''
    }
  end
end



---



При каждом запуске тестов выполняется реальный запрос к API
-----------------------------------------------------------

class FetchNameInformationServiceTest < ActiveSupport::TestCase
  test '#call' do
    name = 'John'
    stub_request(:get, "#{FetchNameInformationService::FETCH_NAME_BASE_URL}?name=#{name}")
    result = FetchNameInformationService.new.(name: name)

    assert result[:country].is_a? String
    assert result[:possibility].is_a? String
  end
end



class Api::V1::NamesControllerTest < ActionDispatch::IntegrationTest
  test '#fetch' do
    name = 'David'
    stub_request(:get, "#{FetchNameInformationService::FETCH_NAME_BASE_URL}?name=#{name}")
    get api_v1_fetch_name_url(name: name)

    json_response = JSON.parse(response.body)

    assert_response :success
    assert json_response['country'].is_a?(String)
    assert json_response['possibility'].is_a?(String)
  end
end



---



Webmock может подменять ответы от внешних сервисов
--------------------------------------------------

stub_request(:get, "www.example.com").to_return({body: "abc"}, {body: "def"})

Net::HTTP.get('www.example.com', '/')    # ===> "abc\n"
Net::HTTP.get('www.example.com', '/')    # ===> "def\n"




---



Простейший способ тестирования API
----------------------------------


Rails.application.routes.draw do
  namespace :api do
    namespace :v1 do
      get 'names/fetch', to: 'names#fetch', as: :fetch_name
    end
  end
end



---



class Api::V1::NamesControllerTest < ActionDispatch::IntegrationTest
  test '#fetch' do
    get api_v1_fetch_name_url
    assert_response :success
  end
end

class Api::V1::NamesController < Web::ApplicationController
  def fetch
    render json: {
      country: '',
      possibility: 0.1
    }
  end
end



---



Проверка содержимого ответа
---------------------------


class Api::V1::NamesControllerTest < ActionDispatch::IntegrationTest
  test '#fetch' do
    get api_v1_fetch_name_url
    json_response = JSON.parse(response.body)

    assert_response :success
    assert_equal 'RU', json_response['country']
    assert_equal 0.1, json_response['possibility']

    refute_nil json_response['country']
    refute_nil json_response['possibility']
  end
end

class Api::V1::NamesController < Web::ApplicationController
  def fetch
    result = FetchNameInformationService.new.(name: params[:name])
  end
end



---



app/services/fetch_name_information_service.rb
----------------------------------------------

Сервис возвращает информацию об имени и верояность его использования в странах
------------------------------------------------------------------------------

http://api.nationalize.io/?name=David



---



class FetchNameInformationService
  FETCH_NAME_BASE_URL = 'http://api.nationalize.io'

  def call(name:)
    uri = URI("#{FETCH_NAME_BASE_URL}?name=#{name}")
    response = Net::HTTP.get(uri)
    JSON.parse(response)
  rescue StandardError
    {
      country: nil,
      possibility: nil
    }
  end
end



---



test/services/fetch_name_information_service_test.rb
----------------------------------------------------

require 'test_helper'
require_relative 'app/services/fetch_name_information_service.rb'



---



При каждом запуске тестов выполняется реальный запрос к API
-----------------------------------------------------------

class FetchNameInformationServiceTest < ActiveSupport::TestCase
  test '#call' do
    result = FetchNameInformationService.new.(name: params[:name])

    assert result['country'].is_a? Array
  end
end



---



Gemfile
-------

https://github.com/bblimke/webmock


group :test do
  gem "webmock"
end



---



test/test_helper.rb
-------------------

require 'webmock/minitest'



---



test/services/fetch_name_information_service_test.rb
----------------------------------------------------

require 'test_helper'
require_relative 'app/services/fetch_name_information_service.rb'



---



app/services/fetch_name_information_service.rb
----------------------------------------------

Сервис возвращает информацию об имени и верояность его использования в странах
------------------------------------------------------------------------------

http://api.nationalize.io/?name=David


class FetchNameInformationService
  FETCH_NAME_BASE_URL = 'http://api.nationalize.io'

  def call(name:)
    uri = URI("#{FETCH_NAME_BASE_URL}?name=#{name}")
    response = Net::HTTP.get(uri)

    {
      country: response['country'][0]['country_id'],
      possibility: response['country'][0]['probability']
    }
  rescue StandardError
    {
      country: '',
      possibility: ''
    }
  end
end



---



При каждом запуске тестов выполняется реальный запрос к API
-----------------------------------------------------------

class FetchNameInformationServiceTest < ActiveSupport::TestCase
  test '#call' do
    name = 'John'
    stub_request(:get, "#{FetchNameInformationService::FETCH_NAME_BASE_URL}?name=#{name}")
    result = FetchNameInformationService.new.(name: name)

    assert result[:country].is_a? String
    assert result[:possibility].is_a? String
  end
end

class Api::V1::NamesControllerTest < ActionDispatch::IntegrationTest
  test '#fetch' do
    name = 'David'
    stub_request(:get, "#{FetchNameInformationService::FETCH_NAME_BASE_URL}?name=#{name}")
    get api_v1_fetch_name_url(name: name)

    json_response = JSON.parse(response.body)

    assert_response :success
    assert json_response['country'].is_a?(String)
    assert json_response['possibility'].is_a?(String)
  end
end



---



Webmock может подменять ответы от внешних сервисов
--------------------------------------------------

stub_request(:get, "www.example.com").to_return({body: "abc"}, {body: "def"})

Net::HTTP.get('www.example.com', '/')    # ===> "abc\n"
Net::HTTP.get('www.example.com', '/')    # ===> "def\n"




---



Set Fixture
-----------

https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html



---



Octokit
-------

https://github.com/octokit/octokit.rb
http://octokit.github.io/octokit.rb/Octokit/Repository.html#from_url-class_method


gem 'octokit'



---



Mocks
-----

https://github.com/bblimke/webmock
https://martinfowler.com/articles/mocksArentStubs.html


gem 'webmock'







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Active Job, callbacks, emails, sidekiq
--------------------------------------------


$ bin/rails g job fetch_books_titles

create  test/jobs/fetch_books_titles_job_test.rb
create  app/jobs/fetch_books_titles_job.rb



---



app/jobs/fetch_books_titles_job.rb
----------------------------------

class FetchBooksTitlesJob < ApplicationJob
  queue_as :default

  def perform(*args)
    # Do something later
  end
end





test/jobs/fetch_books_titles_job_test.rb
----------------------------------------

require "test_helper"

class FetchBooksTitlesJobTest < ActiveJob::TestCase
  # test "the truth" do
  #   assert true
  # end
end



---



app/jobs/fetch_books_titles_job.rb
----------------------------------

class FetchBooksTitlesJob < ApplicationJob
  queue_as :default

  def perform
    titles = Book.pluck(:title)
    pp titles
  end
end




$ bin/rails g job fetch_books_titles --queue urgent


app/jobs/fetch_books_titles_job.rb
----------------------------------

--queue задает очередь в которую попадает задача
------------------------------------------------

class FetchBooksTitlesJob < ApplicationJob
  queue_as :urgent

  def perform(*args)
    # Do something later
  end
end



---



Вызов джобы
-----------

FetchBooksTitlesJob.perform_later       --- Джоба выполняется после выполнения основного процесса
FetchBooksTitlesJob.perform_now         --- Джоба запускается непосредственно



Выполнить через 5 секунд
------------------------

FetchBooksTitlesJob.set(wait: 5.seconds).perform_later



Запустить через 10 секунд, в определенное время
-----------------------------------------------

FetchBooksTitlesJob.set(wait_until: Time.now + 10.seconds).perform_later



---



config/application.rb
---------------------

require_relative "boot"

require "rails/all"

Require the gems listed in Gemfile, including any gems you've limited to :test, :development, or :production
------------------------------------------------------------------------------------------------------------

Bundler.require(*Rails.groups)

module Books
  class Application < Rails::Application
    config.load_defaults 6.1

    config.active_job.queue_adapter = :sidekiq
    config.active_job_queue_name_prefix = Rails.new
    config.active_job_queue_name_delimiter = '.'
  end
end



https://api.rubyonrails.org/classes/ActiveJob/QueueAdapters.html




Запуск задачи в заданной очереди
--------------------------------

FetchBooksTitlesJob.set(queue: :low_priority).perform_later




app/jobs/fetch_books_titles_job.rb
----------------------------------

Очередь задается динамически
----------------------------

queue_as { cond ? :default : :high_priority }



class FetchBooksTitlesJob < ApplicationJob
  def perform
    titles = Book.pluck(:title)
    pp titles
  end
end



---



Доступные коллбеки
------------------

before_enqueue
around_enqueue
after_enqueue
before_perform
around_perform
after_perform



https://edgeguides.rubyonrails.org/active_job_basics.html#available-callbacks



---



app/jobs/fetch_books_titles_job.rb
----------------------------------

class FetchBooksTitlesJob < ApplicationJob
  around_perform :improve_output

  def perform
    titles = Book.pluck(:title)
    pp titles
  end

  def improve_output
    pp '*******************************************'
    yield
    pp '*******************************************'
  end
end


$ bin/rails g mailer new_book


create  app/mailers/new_book_mailer.rb
create    app/views/new_book_mailer
create    test/mailers/new_book_mailer_test.rb
create    test/mailers/previews/new_book_mailer_preview.rb



https://guides.rubyonrails.org/action_mailer_basics.html



---



app/mailers/new_book_mailer.rb
------------------------------

class NewBookMailer < ApplicationMailer
  default from: 'book@example.com'

  def new_book
    mail(
      to: 'user@examplle.com',
      subject: 'New book'
    )
  end
end



---



app/views/new_book_mailer/new_book.txt.erb
------------------------------------------

New book has been created



Отправка письма
---------------

NewBookMailer.new_book.deliver_later
NewBookMailer.new_book.deliver_now



https://github.com/mperham/sidekiq


- Для работы sidekiq требуется запущенный redis
- Для выполнения задач требуется запущенный sidekiq
- bundle exec sidekiq



---



Gemfile
-------

gem 'sidekiq'



---



config/application.rb
---------------------

require_relative "boot"

require "rails/all"

Require the gems listed in Gemfile, including any gems you've limited to :test, :development, or :production
------------------------------------------------------------------------------------------------------------

Bundler.require(*Rails.groups)

module Books
  class Application < Rails::Application
    config.load_defaults 6.1

    config.active_job.queue_adapter = :sidekiq
  end
end



https://api.rubyonrails.org/classes/ActiveJob/QueueAdapters.html




config/sidekiq.yml
------------------

В этомф файле хранятся настройки sidekiq
----------------------------------------

:concurrency: 2
:logfile: ./log/sidekiq.log
:queues:
 - default
 - mailers



---



Open http://localhost:3000/sidekiq
----------------------------------

app/jobs/fetch_books_titles_job.rb
----------------------------------

class FetchBooksTitlesJob
  include Sidekiq::Worker

  def perform
    titles = Book.pluck(:title)
    pp titles
  end

  def improve_output
    pp '*******************************************'
    yield
    pp '*******************************************'
  end
end




Для асинхронных джоб с sidekiq изменяется способ их вызова
----------------------------------------------------------

FetchBooksTitlesJob.perform_async
FetchBooksTitlesJob.perform_in(5.seconds)




# ActiveJob perform_now / perform_later
# Sidekiq perform_async / perform_in




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Sidekiq guide
-------------


Gemfile
-------

gem 'sidekiq'



---



Define a Worker
---------------

class SampleWorker
  include Sidekiq::Worker
  include Sidekiq::Schedulable
  
  def perform(args)
    # Logic defining your task
  end 
end



---



Calling Workers Methods
-----------------------

SampleWorker.perform_in(10.days, record_id: 10)
SampleWorker.perform_at(10.days.from_now, record_id: 10)
SampleWorker.perform_now
SampleWorker.perform_later



---



Start SideKiq In Development
----------------------------

$ bundle exec sidekiq



---



Sidekiq On Production
---------------------

RAILS_ENV=production nohup bundle exec sidekiq &



---



Sidekiq Dashboard
-----------------

require 'sidekiq/web'
mount Sidekiq::Web => '/sidekiq'



---



authenticate :user, lambda { |u| u.admin? } do
  mount Sidekiq::Web => '/sidekiq'
end






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails, Sidekiq : full tutorial
------------------------------


$ ruby -v

ruby 3.1.0p0                  // you need at least version 3 here



$ bundle -v

Bundler version 2.2.11



$ npm -v

8.3.0                         // you need at least version 7.1 here



$ yarn -v

1.22.10



$ psql --version

psql (PostgreSQL) 13.1



$ redis-cli ping

PONG



$ foreman -v

0.87.2



---



Create a fresh new Rails app – without Sidekiq first
----------------------------------------------------


$ mkdir sidekiqrails && cd sidekiqrails  
$ echo "source 'https://rubygems.org'" > Gemfile  
$ echo "gem 'rails', '7.0.1'" >> Gemfile  
$ bundle install  
$ bundle exec rails new . --force -d=postgresql --minimal



---




Create a default controller
---------------------------

$ echo "class WelcomeController < ApplicationController" > app/controllers/welcome_controller.rb
$ echo "end" >> app/controllers/welcome_controller.rb



Create a default route
----------------------

$ echo "Rails.application.routes.draw do" > config/routes.rb
$ echo '  get "welcome/index"' >> config/routes.rb
$ echo '  root to: "welcome#index"' >> config/routes.rb
$ echo 'end' >> config/routes.rb



Create a default view
---------------------

$ mkdir app/views/welcome
$ echo '<h1>This is h1 title</h1>' > app/views/welcome/index.html.erb



Create database and schema.rb
-----------------------------

$ bin/rails db:create
$ bin/rails db:migrate



---



config/application.rb
---------------------

require_relative "boot"

require "rails"
require "active_model/railtie"
require "active_job/railtie"



---



app/jobs/application_job.rb
---------------------------

class ApplicationJob < ActiveJob::Base
end



---



Add redis and sidekiq gems to your Rails app
--------------------------------------------


Gemfile
-------

gem 'redis'
gem 'sidekiq'


$ bundle install && bundle update



---



config/application.rb
---------------------

class Application < Rails::Application
  config.active_job.queue_adapter = :sidekiq
end



---



Create a hello world job
------------------------

app/jobs/hello_world_job.rb
---------------------------


class HelloWorldJob < ApplicationJob
  queue_as :default

  def perform(*args)
    sleep 5
    p "hello from HelloWorldJob #{Time.now().strftime('%F - %H:%M:%S.%L')}"
  end
end



---



Call the hello world job from the view
--------------------------------------


config/routes.rb
----------------

Rails.application.routes.draw do
  get "welcome/index"
  post "welcome/trigger_job"
  get "other/job_done"
  root to: "welcome#index"
end



---



app/controllers/other_controller.rb
-----------------------------------

class OtherController < ApplicationController
  def job_done
  end
end



---



app/views/other/job_done.html.erb
---------------------------------

<h1>Job was called</h1>



---



app/views/welcome/index.html.erb
--------------------------------

<h1>This is h1 title</h1>

<%= form_with url: welcome_trigger_job_path do |f| %>
 <%= f.submit 'Launch job' %>
<% end %>



---



app/controllers/welcome_controller.rb
-------------------------------------

class WelcomeController < ApplicationController
  def trigger_job
    HelloWorldJob.perform_later
    redirect_to other_job_done_path
  end
end



---



Add a Procfile.dev
------------------

$ rails s
$ bundle exec sidekiq -C config/sidekiq.yml



---



config/sidekiq.yml
------------------

development:
  :concurrency: 5

production:
  :concurrency: 10

:max_retries: 1

:queues:
  - default




---



config/initializers/sidekiq.rb
------------------------------

Sidekiq.configure_server do |config|
  config.redis = { url: ENV.fetch('REDIS_URL', 'redis://localhost:6379/1') }
end

Sidekiq.configure_client do |config|
  config.redis = { url: ENV.fetch('REDIS_URL', 'redis://localhost:6379/1') }
end



---



Launch local app
----------------

$ foreman start -f Procfile.dev



---



Push Rails and Sidekiq to production
------------------------------------

heroku is connected
-------------------

$ heroku login  
$ heroku create  



This will modify local files
----------------------------

$ echo "web: bundle exec puma -C config/puma.rb" > Procfile  
$ echo "worker: bundle exec sidekiq -e production -C config/sidekiq.yml" >> Procfile  
$ bundle lock --add-platform x86_64-linux  



This will modify you heroku app
-------------------------------

$ heroku addons:create heroku-postgresql:hobby-dev  
$ heroku addons:create heroku-redis:hobby-dev
$ heroku buildpacks:add heroku/ruby  



$ git add . && git commit -m 'ready for prod'  
$ git push heroku main  



app works, but worker (for background jobs) is missing
------------------------------------------------------

$ heroku ps:scale worker=1





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Cashing
-------------


https://guides.rubyonrails.org/caching_with_rails.html
https://github.com/rails/actionpack-page_caching



---



Gemfile
-------

При первом запросе генерируется статический файл, при следующих запросах отдаётся этот файл
-------------------------------------------------------------------------------------------

gem "actionpack-page_caching"



---



config/environments/development.rb
----------------------------------

включить кеширование командой
-----------------------------

$ bin/rails dev:cache



Задаём директорию для хранения статических файлов страниц
---------------------------------------------------------


require "active_support/core_ext/integer/time"

Rails.application.configure do
  if Rails.root.join('tmp', 'caching-dev.txt').exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store
    config.public_file_server.headers = { 'Cache-Control': "public, max-age = #{ 2.days.to_i }" }
    config.action_controller.page_cache_directory = Rails.root.join('public', 'cached_pages')
  else
    config.action_controller.perform_caching = false
    config.cache_store = :null_store
  end
end



---



создает статический файл, например public/books.html
----------------------------------------------------


class BooksController < ApplicationController
  caches_page :index

  def index
    @books = Book.all
  end
end



---



Обновление зависимой сущности приводит к обновлению updated_at у основной, что позволяет инвалидировать кеш
-----------------------------------------------------------------------------------------------------------

class Book < ApplicationRecord
  belongs_to :shop, touch: true
end



---



Low level caching
-----------------

Rails.cache.write('my-cache-key', 123)
Rails.cache.read('my-cache-key')                                  # 123
Rails.cache.read('my-not-written')                                # nil



fetch создаёт ключ в кеше, если его не было ранее и возвращает это значение
---------------------------------------------------------------------------

Rails.cache.fetch('my-cache-key2') { 123 }
Rails.cache.read('my-cache-key2')                                 # 123



---



class Book < ApplicationRecord
  def cached_books
    Rails.cache.fetch("#{ cache_key_with_version }/cached_books", expires_in: 5.seconds) do
      Book.limit(30)
    end
  end
end



Book.last.cached_books



---



Список ключей в кеше
--------------------

Rails.cache.instance_variable_get(:@data).keys



config/environments/development.rb
----------------------------------

Размер кеша
-----------

require "active_support/core_ext/integer/time"

Rails.application.configure do
  if Rails.root.join('tmp', 'caching-dev.txt').exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store, { size: 64.megabytes }
    config.public_file_server.headers = { 'Cache-Control': "public, max-age = #{ 2.days.to_i }" }
    config.action_controller.page_cache_directory = Rails.root.join('public', 'cached_pages')
  else
    config.action_controller.perform_caching = false
    config.cache_store = :null_store
  end
end



---



config/environments/development.rb
----------------------------------

При подключении гема можем добавить новые параметры
---------------------------------------------------

https://github.com/mperham/connection_pool



require "active_support/core_ext/integer/time"

Rails.application.configure do
  if Rails.root.join('tmp', 'caching-dev.txt').exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store, { size: 64.megabytes, pool_size: 5, pool_timeout: 5 }
    config.public_file_server.headers = { 'Cache-Control': "public, max-age = #{ 2.days.to_i }" }
    config.action_controller.page_cache_directory = Rails.root.join('public', 'cached_pages')
  else
    config.action_controller.perform_caching = false
    config.cache_store = :null_store
  end
end



---



Хранилища для кеша описаны в документации
-----------------------------------------

https://guides.rubyonrails.org/caching_with_rails.html#cache-stores



---



Создаются закешированные фрагменты
----------------------------------


app/views/books/index.html.erb
------------------------------

https://apidock.com/rails/v4.0.2/ActionView/Helpers/CacheHelper



<% @books.each do |book| %>
  <% cache book do %>

  # cache_if cond, book do
  # cache_unless cond, book do

  <tr>
    <td><%= book.title %></td>
    <td><%= link_to 'Show', book %></td>
    <td><%= link_to 'Edit', edit_book_path(book) %></td>
    <td><%= link_to 'Destroy', book, data: { turbo_method: :delete, turbo_confirm: 'Are you sure?' } %></td>
  </tr>
  <% end %>
<% end %>



Кеширование паршалла
--------------------

<tbody>
  <%= render partial: 'books/books_list', collection: @books, cached: true %>
</tbody>



---



Caching resources
-----------------

https://guides.rubyonrails.org/caching_with_rails.html
https://guides.rubyonrails.org/caching_with_rails.html#low-level-caching
https://guides.rubyonrails.org/caching_with_rails.html#activesupport-cache-filestore
https://guides.rubyonrails.org/layouts_and_rendering.html#rendering-collections
https://guides.rubyonrails.org/caching_with_rails.html#cache-stores

https://github.com/mperham/connection_pool
https://github.com/rails/actionpack-page_caching
https://github.com/rails/actionpack-action_caching

https://apidock.com/rails/v4.0.2/ActionView/Helpers/CacheHelper




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Engine
------------


https://github.com/thredded/thredded
https://github.com/spree/spree



---



Создаётся изолированный движок
------------------------------

$ rails plugin new authoree --mountable


create
create  README.md
create  Rakefile
create  authoree.gemspec    # Все зависимости для движка указываются в gemspec. Зависимости не указанные в gemspec
create  MIT-LICENSE
create  .gitignore
create  Gemfile
   run  git init from "."
create  app
create  app/controllers/authoree/application_controller.rb
create  app/helpers/authoree/application_helper.rb
create  app/jobs/authoree/application_job.rb
create  app/mailers/authoree/application_mailer.rb
create  app/models/authoree/application_record.rb
create  app/views/layouts/authoree/application.html.erb
create  app/assets/images/authoree
create  app/assets/images/authoree/.keep
create  config/routes.rb
create  lib/authoree.rb
create  lib/tasks/authoree_tasks.rake
create  lib/authoree/version.rb
create  lib/authoree/engine.rb
create  app/assets/config/authoree_manifest.js
create  app/assets/stylesheets/authoree/application.css
create  bin/rails
create  test/test_helper.rb
create  test/authoree_test.rb
append  Rakefile
create  test/integration/navigation_test.rb



---



стаб рельсового приложения через которое мы можем запускать движок как обычное приложение
-----------------------------------------------------------------------------------------

vendor_app  test/dummy
    append  /tmp/books/Gemfile



---



authoree/lib/authoree/engine.rb
-------------------------------

Позволяет изолировать всё внутри движка от основного приложения
---------------------------------------------------------------


module Authoree
  class Engine < ::Rails::Engine
    isolate_namespace Authoree
  end
end



---



authoree/app/controllers/authoree/application_controller.rb
-----------------------------------------------------------

Жёстко задаем зависимость, require_dependency позволяет работать автозагрузке
-----------------------------------------------------------------------------

require_dependency 'autoree/application_controller'

class Web::ApplicationController < ApplicationController
end



---



authoree/authoree.gemspec
-------------------------

Перед работой с движком необходимо поправить Gemspec (убрать todo)
------------------------------------------------------------------


require_relative "lib/authoree/version"

Gem::Specification.new do |spec|
  spec.name        = "authoree"
  spec.version     = Authoree::VERSION
  spec.authors     = ["example"]
  spec.email       = ["example@mail.com"]
  spec.homepage    = "http://example.com"
  spec.summary     = "Summary of Authoree."
  spec.description = "Description of Authoree."
  spec.license     = "MIT"

  # Prevent pushing this gem to RubyGems.org. To allow pushes either set the 'allowed_push_host'
  # to allow pushing to a single host or delete this section to allow pushing to any host.
  # spec.metadata["allowed_push_host"] = "TODO: Set to 'http://mygemserver.com'"

  spec.metadata["homepage_uri"] = spec.homepage
  spec.metadata['rubygems_mfa_required'] = true
  # spec.metadata["source_code_uri"] = "TODO: Put your gem's public repo URL here."
  # spec.metadata["changelog_uri"] = "TODO: Put your gem's CHANGELOG.md URL here."

  spec.files = Dir["{app,config,db,lib}/**/*", "MIT-LICENSE", "Rakefile", "README.md"]

  spec.add_dependency "rails", "~> 6.1.4", ">= 6.1.4.1"
end



---



После создания скаффолда внутри движка
--------------------------------------

$ bin/rails g scaffold user name



---



authoree/config/routes.rb#
--------------------------

Authoree::Engine.routes.draw do
  resources :users
end



---



authoree/app/models/authoree/user.rb
------------------------------------

module Authoree
  class User < ApplicationRecord
  end
end



---



authoree/app/controllers/authoree/users_controller.rb
-----------------------------------------------------

require_dependency "authoree/application_controller"

module Authoree
  class UsersController < ApplicationController
end



---



authoree/config/routes.rb#
--------------------------

Authoree::Engine.routes.draw do
  root to: 'users#index'
  resources :users
end



---



config/routes.rb
----------------

Sidekiq это тоже движок
-----------------------

mount Sidekiq::Web => '/sidekiq'



Rails.application.routes.draw do
  resources :books

  mount Authoree::Engine, at: '/users'
end



---



Gemfile
-------

gem 'authoree', path: 'authoree'



---



Установка миграций из движка
----------------------------

$ bin/rails authoree:install:migrations

Copied migration 20211118114102_create_authoree_users.authoree.rb from authoree



Установка миграций из всех движков
----------------------------------

$ bin/rails railties:install:migrations
$ bin/rails db:migrate



---




Позволяет наследоваться от доступного контроллера в основном приложении
-----------------------------------------------------------------------


module Authoree
  class ApplicationController < ::ApplicationController
  end
end



---



Ссылки на страницы движка создаются с помощью префикса
------------------------------------------------------

link_to 'Users', authoree.users_path



---



Пример с динамической настройкой движка
---------------------------------------

authoree/lib/authoree.rb
------------------------


require "authoree/version"
require "authoree/engine"

module Authoree
  mattr_accessor :consumer_class

  def self.consumer_class
    @@consumer_class.constantize
  end
end



---



config/initializers/authoree.rb
-------------------------------

Authoree.consumer_class = 'Book'



authoree/app/models/authoree/user.rb
------------------------------------

module Authoree
  class User < ApplicationRecord
    attr_accessor :book_title

    belongs_to :book, class_name: Authoree.consumer_class
    before_validation :add_book

    private

    def add_book
      self.book = Book.find_or_create_by(title: book_title, shop_id: Shop.last)
    end
  end
end




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Account Activation Rails
------------------------



----------------------------------------------------------------------------------------------------------------------------

Method                find_by                 String                Digest                Authentication

----------------------------------------------------------------------------------------------------------------------------
Login                 email                   password              password_digest       authenticate(password)
----------------------------------------------------------------------------------------------------------------------------
remember me           id                      remember_token        remember_digest       authenticated?(:remember, token)
----------------------------------------------------------------------------------------------------------------------------
account activation    email                   activation_token      activation_digest     authenticated?(:activation, token)
----------------------------------------------------------------------------------------------------------------------------
password reset        email                   reset_token           reset_digest          authenticated?(:reset, token)
----------------------------------------------------------------------------------------------------------------------------



---



topic branch for the new feature
--------------------------------

$ git checkout -b account-activation



---



$ rails generate controller AccountActivations



config/routes.rb
----------------

Rails.application.routes.draw do
  root   "static_pages#home"
  get    "/help",    to: "static_pages#help"
  get    "/about",   to: "static_pages#about"
  get    "/contact", to: "static_pages#contact"
  get    "/signup",  to: "users#new"
  get    "/login",   to: "sessions#new"
  post   "/login",   to: "sessions#create"
  delete "/logout",  to: "sessions#destroy"
  resources :users
  resources :account_activations, only: [:edit]
end



---



$ rails generate migration add_activation_to_users \
> activation_digest:string activated:boolean activated_at:datetime



db/migrate/[timestamp]_add_activation_to_users.rb
-------------------------------------------------

class AddActivationToUsers < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :activation_digest, :string
    add_column :users, :activated, :boolean, default: false
    add_column :users, :activated_at, :datetime
  end
end



$ rails db:migrate



---



before_create :create_activation_digest

private

def create_activation_digest
  # Create the token and digest
end



---



$ rails console

>> User.first.create_activation_digest
NoMethodError: private method `create_activation_digest' called for #<User>



self.activation_token  = User.new_token
self.activation_digest = User.digest(activation_token)



def remember
  self.remember_token = User.new_token
  update_attribute(:remember_digest, User.digest(remember_token))
  remember_digest
end



---



app/models/user.rb
------------------

class User < ApplicationRecord
  attr_accessor :remember_token, :activation_token

  before_save   :downcase_email
  before_create :create_activation_digest

  validates :name,  presence: true, length: { maximum: 50 }

  private

  # Converts email to all lowercase

  def downcase_email
    self.email = email.downcase
  end

  # Creates and assigns the activation token and digest

  def create_activation_digest
    self.activation_token  = User.new_token
    self.activation_digest = User.digest(activation_token)
  end
end



---



db/seeds.rb
-----------

User.create!(
  name:                  "Example User",
  email:                 "example@railstutorial.org",
  password:              "foobar",
  password_confirmation: "foobar",
  admin:                 true,
  activated:             true,
  activated_at:          Time.zone.now
)


99.times do |n|
  name     = Faker::Name.name
  email    = "example-#{n+1}@railstutorial.org"
  password = "password"

  User.create!(
    name:                  name,
    email:                 email,
    password:              password,
    password_confirmation: password,
    activated:             true,
    activated_at:          Time.zone.now
  )
end




---



test/fixtures/users.yml
-----------------------

michael:
  name:            Michael Example
  email:           michael@example.com
  password_digest: <%= User.digest('password') %>
  admin:           true
  activated:       true
  activated_at:    <%= Time.zone.now %>

archer:
  name:            Sterling Archer
  email:           duchess@example.gov
  password_digest: <%= User.digest('password') %>
  activated:       true
  activated_at:    <%= Time.zone.now %>

lana:
  name:            Lana Kane
  email:           hands@example.gov
  password_digest: <%= User.digest('password') %>
  activated:       true
  activated_at:    <%= Time.zone.now %>

malory:
  name:            Malory Archer
  email:           boss@example.gov
  password_digest: <%= User.digest('password') %>
  activated:       true
  activated_at:    <%= Time.zone.now %>

<% 30.times do |n| %>
user_<%= n %>:
  name:            <%= "User #{n}" %>
  email:           <%= "user-#{n}@example.com" %>
  password_digest: <%= User.digest('password') %>
  activated:       true
  activated_at:    <%= Time.zone.now %>
<% end %>



---



$ rails db:migrate:reset
$ rails db:seed



---



Mailer templates
----------------


$ rails generate mailer UserMailer account_activation password_reset



---



app/views/user_mailer/account_activation.text.erb
-------------------------------------------------

User#account_activation

<%= @greeting %>, find me in app/views/user_mailer/account_activation.text.erb



---



app/views/user_mailer/account_activation.html.erb
-------------------------------------------------

<h1>User#account_activation</h1>

<p>
  <%= @greeting %>, find me in app/views/user_mailer/account_activation.html.erb
</p>



---



app/mailers/application_mailer.rb
---------------------------------


class ApplicationMailer < ActionMailer::Base
  default from: "from@example.com"
  layout "mailer"
end



---



app/mailers/user_mailer.rb
--------------------------

class UserMailer < ApplicationMailer
  def account_activation
    @greeting = "Hi"

    mail to: "to@example.org"
  end

  def password_reset
    @greeting = "Hi"

    mail to: "to@example.org"
  end
end



---



app/mailers/application_mailer.rb
---------------------------------

class ApplicationMailer < ActionMailer::Base
  default from: "user@realdomain.com"
  layout "mailer"
end



Mailing the account activation link. red
----------------------------------------

app/mailers/user_mailer.rb
--------------------------

class UserMailer < ApplicationMailer
  def account_activation(user)
    @user = user
    mail to: user.email, subject: "Account activation"
  end

  def password_reset
    @greeting = "Hi"

    mail to: "to@example.org"
  end
end



---



app/views/user_mailer/account_activation.text.erb
-------------------------------------------------

Hi <%= @user.name %>,

Welcome to the Sample App! Click on the link below to activate your account:

<%= edit_account_activation_url(@user.activation_token, email: @user.email) %>




app/views/user_mailer/account_activation.html.erb
-------------------------------------------------


<h1>Sample App</h1>

<p>Hi <%= @user.name %>,</p>

<p>
  Welcome to the Sample App! Click on the link below to activate your account:
</p>

<%= link_to "Activate", edit_account_activation_url(@user.activation_token, email: @user.email) %>



---



Email previews
--------------


config/environments/development.rb
----------------------------------

Rails.application.configure do
  config.action_mailer.raise_delivery_errors = false

  host = 'example.com' # Don't use this literally; use your local host instead.
  config.action_mailer.default_url_options = { host: host, protocol: 'https' }

  # config.action_mailer.default_url_options = { host: host, protocol: 'http' }
end



---



Cloud IDE
---------

host = '<hex string>.vfs.cloud9.us-east-2.amazonaws.com'
config.action_mailer.default_url_options = { host: host, protocol: 'https' }



Local server
------------

host = 'localhost:3000'
config.action_mailer.default_url_options = { host: host, protocol: 'http' }



---



test/mailers/previews/user_mailer_preview.rb
--------------------------------------------

class UserMailerPreview < ActionMailer::Preview
  # Preview this email at
  # http://localhost:3000/rails/mailers/user_mailer/account_activation

  def account_activation
    UserMailer.account_activation
  end

  # Preview this email at
  # http://localhost:3000/rails/mailers/user_mailer/password_reset

  def password_reset
    UserMailer.password_reset
  end
end



---



test/mailers/previews/user_mailer_preview.rb
--------------------------------------------

class UserMailerPreview < ActionMailer::Preview
  # Preview this email at
  # http://localhost:3000/rails/mailers/user_mailer/account_activation

  def account_activation
    user = User.first
    user.activation_token = User.new_token
    UserMailer.account_activation(user)
  end

  # Preview this email at
  # http://localhost:3000/rails/mailers/user_mailer/password_reset

  def password_reset
    UserMailer.password_reset
  end
end



---



Email tests
-----------


test/mailers/user_mailer_test.rb
--------------------------------

require "test_helper"

class UserMailerTest < ActionMailer::TestCase
  test "account_activation" do
    mail = UserMailer.account_activation

    assert_equal "Account activation", mail.subject
    assert_equal ["to@example.org"], mail.to
    assert_equal ["from@example.com"], mail.from
    assert_match "Hi", mail.body.encoded
  end

  test "password_reset" do
    mail = UserMailer.password_reset

    assert_equal "Password reset", mail.subject
    assert_equal ["to@example.org"], mail.to
    assert_equal ["from@example.com"], mail.from
    assert_match "Hi", mail.body.encoded
  end
end



---



assert_match 'foo', 'foobar'      # true
assert_match 'baz', 'foobar'      # false
assert_match /\w+/, 'foobar'      # true
assert_match /\w+/, '$#!*+@'      # false



---



test/mailers/user_mailer_test.rb
--------------------------------

require "test_helper"

class UserMailerTest < ActionMailer::TestCase
  test "account_activation" do
    user = users(:michael)
    user.activation_token = User.new_token
    mail = UserMailer.account_activation(user)

    assert_equal "Account activation", mail.subject
    assert_equal [user.email], mail.to
    assert_equal ["user@realdomain.com"], mail.from
    assert_match user.name,               mail.body.encoded
    assert_match user.activation_token,   mail.body.encoded
    assert_match CGI.escape(user.email),  mail.body.encoded
  end
end



---



config/environments/test.rb
---------------------------

Rails.application.configure do
  config.action_mailer.delivery_method = :test
  config.action_mailer.default_url_options = { host: 'example.com' }
end



---



$ rails test:mailers



---



Updating the Users create action
--------------------------------


app/controllers/users_controller.rb
-----------------------------------

class UsersController < ApplicationController
  def create
    @user = User.new(user_params)

    if @user.save
      UserMailer.account_activation(@user).deliver_now
      flash[:info] = "Please check your email to activate your account."
      redirect_to root_url
    else
      render 'new', status: :unprocessable_entity
    end
  end
end



---



test/integration/users_signup_test.rb
-------------------------------------

require "test_helper"

class UsersSignupTest < ActionDispatch::IntegrationTest

  test "invalid signup information" do
    get signup_path

    assert_no_difference 'User.count' do
      post users_path, params: { 
        user: { 
          name:                  "",
          email:                 "user@invalid",
          password:              "foo",
          password_confirmation: "bar" 
        } 
      }
    end

    assert_response :unprocessable_entity
    assert_template 'users/new'
    assert_select 'div#error_explanation'
    assert_select 'div.field_with_errors'
  end

  test "valid signup information" do
    assert_difference 'User.count', 1 do
      post users_path, params: { 
        user: { 
          name:  "Example User",
          email: "user@realdomain.com",
          password:              "password",
          password_confirmation: "password" 
        } 
      }
    end

    follow_redirect!

    # assert_template 'users/show'
    # assert is_logged_in?
  end
end



---



UserMailer#account_activation: processed outbound mail in 5.1ms
Delivered mail 5d606e97b7a44_28872b106582df988776a@ip-172-31-25-202.mail (3.2ms)
Date: Fri, 11 Mar 2022 22:54:15 +0000
From: user@realdomain.com
To: michael@michaelhartl.com
Message-ID: <5d606e97b7a44_28872b106582df988776a@ip-172-31-25-202.mail>
Subject: Account activation
Mime-Version: 1.0
Content-Type: multipart/alternative;
 boundary="--==_mimepart_5d606e97b6f16_28872b106582df98876dd";
 charset=UTF-8
Content-Transfer-Encoding: 7bit


----==_mimepart_5d606e97b6f16_28872b106582df98876dd
Content-Type: text/plain;
 charset=UTF-8
Content-Transfer-Encoding: 7bit

Hi Michael Hartl,

Welcome to the Sample App! Click on the link below to activate your account:

https://0ebe1dc6d40e4a4bb06e0ca7fe138127.vfs.cloud9.us-east-2.
amazonaws.com/account_activations/zdqs6sF7BMiDfXBaC7-6vA/
edit?email=michael%40michaelhartl.com

----==_mimepart_5d606e97b6f16_28872b106582df98876dd
Content-Type: text/html;
 charset=UTF-8
Content-Transfer-Encoding: 7bit

<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <style>
      /* Email styles need to be inline */
    </style>
  </head>

  <body>
    <h1>Sample App</h1>

<p>Hi Michael Hartl,</p>

<p>
Welcome to the Sample App! Click on the link below to activate your account:
</p>

<a href="https://0ebe1dc6d40e4a4bb06e0ca7fe138127.vfs.cloud9.us-east-2.
amazonaws.com/account_activations/zdqs6sF7BMiDfXBaC7-6vA/
edit?email=michael%40michaelhartl.com">Activate</a>
  </body>
</html>

----==_mimepart_5d606e97b6f16_28872b106582df98876dd--



---



Generalizing the authenticated? method
--------------------------------------

user = User.find_by(email: params[:email])
if user && user.authenticated?(:activation, params[:id])



---



def authenticated?(remember_token)
  return false if remember_digest.nil?
  BCrypt::Password.new(remember_digest).is_password?(remember_token)
end



---



>> user = User.first

>> user.activation_digest
=> "$2a$10$4e6TFzEJAVNyjLv8Q5u22ensMt28qEkx0roaZvtRcp6UZKRM6N9Ae"

>> user.send(:activation_digest)
=> "$2a$10$4e6TFzEJAVNyjLv8Q5u22ensMt28qEkx0roaZvtRcp6UZKRM6N9Ae"

>> user.send("activation_digest")
=> "$2a$10$4e6TFzEJAVNyjLv8Q5u22ensMt28qEkx0roaZvtRcp6UZKRM6N9Ae"

>> attribute = :activation
>> user.send("#{attribute}_digest")
=> "$2a$10$4e6TFzEJAVNyjLv8Q5u22ensMt28qEkx0roaZvtRcp6UZKRM6N9Ae"



---



def authenticated?(remember_token)
  digest = self.send("remember_digest")
  return false if digest.nil?
  BCrypt::Password.new(digest).is_password?(remember_token)
end



---



def authenticated?(attribute, token)
  digest = self.send("#{attribute}_digest")
  return false if digest.nil?
  BCrypt::Password.new(digest).is_password?(token)
end



---



def authenticated?(attribute, token)
  digest = send("#{attribute}_digest")
  return false if digest.nil?
  BCrypt::Password.new(digest).is_password?(token)
end



---



user.authenticated?(:remember, remember_token)



---



app/models/user.rb
------------------

class User < ApplicationRecord
  # Returns true if the given token matches the digest.

  def authenticated?(attribute, token)
    digest = send("#{attribute}_digest")
    return false if digest.nil?
    BCrypt::Password.new(digest).is_password?(token)
  end
end



---



$ rails test



---



app/helpers/sessions_helper.rb
------------------------------

Returns the current logged-in user (if any)
-------------------------------------------


module SessionsHelper
  def current_user
    if (user_id = session[:user_id])
      user = User.find_by(id: user_id)
      @current_user ||= user if session[:session_token] == user.session_token
    elsif (user_id = cookies.encrypted[:user_id])
      user = User.find_by(id: user_id)

      if user && user.authenticated?(:remember, cookies[:remember_token])
        log_in user
        @current_user = user
      end
    end
  end
end



---



test/models/user_test.rb
------------------------

require "test_helper"

class UserTest < ActiveSupport::TestCase
  def setup
    @user = User.new(name: "Example User", email: "user@realdomain.com", password: "foobar", password_confirmation: "foobar")
  end

  test "authenticated? should return false for a user with nil digest" do
    assert_not @user.authenticated?(:remember, '')
  end
end



$ rails test



---



Activation edit action
----------------------

if user && !user.activated? && user.authenticated?(:activation, params[:id])



---



user.update_attribute(:activated,    true)
user.update_attribute(:activated_at, Time.zone.now)



---



app/controllers/account_activations_controller.rb
-------------------------------------------------

class AccountActivationsController < ApplicationController
  def edit
    user = User.find_by(email: params[:email])

    if user && !user.activated? && user.authenticated?(:activation, params[:id])
      user.update_attribute(:activated,    true)
      user.update_attribute(:activated_at, Time.zone.now)
      log_in user
      flash[:success] = "Account activated!"
      redirect_to user
    else
      flash[:danger] = "Invalid activation link"
      redirect_to root_url
    end
  end
end



---



app/controllers/sessions_controller.rb
--------------------------------------

class SessionsController < ApplicationController
  def new
  end

  def create
    user = User.find_by(email: params[:session][:email].downcase)

    if user && user.authenticate(params[:session][:password])
      if user.activated?
        forwarding_url = session[:forwarding_url]
        reset_session
        params[:session][:remember_me] == '1' ? remember(user) : forget(user)
        log_in user
        redirect_to forwarding_url || user
      else
        message  = "Account not activated. "
        message += "Check your email for the activation link."
        flash[:warning] = message
        redirect_to root_url
      end
    else
      flash.now[:danger] = 'Invalid email/password combination'
      render 'new', status: :unprocessable_entity
    end
  end

  def destroy
    log_out if logged_in?
    redirect_to root_url, status: :see_other
  end
end



---



Activation tests and refactoring
--------------------------------

test "login with valid information followed by logout" do
  post login_path, params: { session: { email: @user.email, password: 'password' } }
  assert is_logged_in?
end



---



test "valid login" do
end

test "redirect after login" do
end

test "successful logout" do
end



---



test "login with valid email/invalid password" do
  get login_path

  assert_template 'sessions/new'
  post login_path, params: { session: { email:    @user.email, password: "invalid" } }
  assert_not is_logged_in?
end



---



class UsersLogin < ActionDispatch::IntegrationTest
  def setup
    @user = users(:michael)
  end
end



---



class InvalidPasswordTest < UsersLogin
  test "login path" do
    get login_path

    assert_template 'sessions/new'
  end
end



---



class ValidLogin < UsersLogin
  def setup
    super
    post login_path, params: { session: { email:    @user.email, password: 'password' } }
  end
end



---



test/integration/users_login_test.rb
------------------------------------

require "test_helper"

class UsersLogin < ActionDispatch::IntegrationTest
  def setup
    @user = users(:michael)
  end
end


class InvalidPasswordTest < UsersLogin
  test "login path" do
    get login_path

    assert_template 'sessions/new'
  end

  test "login with valid email/invalid password" do
    post login_path, params: { session: { email:    @user.email, password: "invalid" } }

    assert_not is_logged_in?
    assert_template 'sessions/new'
    assert_not flash.empty?

    get root_path
    assert flash.empty?
  end
end


class ValidLogin < UsersLogin
  def setup
    super
    post login_path, params: { session: { email:    @user.email, password: 'password' } }
  end
end


class ValidLoginTest < ValidLogin
  test "valid login" do
    assert is_logged_in?
    assert_redirected_to @user
  end

  test "redirect after login" do
    follow_redirect!

    assert_template 'users/show'
    assert_select "a[href=?]", login_path, count: 0
    assert_select "a[href=?]", logout_path
    assert_select "a[href=?]", user_path(@user)
  end
end


class Logout < ValidLogin
  def setup
    super
    delete logout_path
  end
end


class LogoutTest < Logout
  test "successful logout" do
    assert_not is_logged_in?
    assert_response :see_other
    assert_redirected_to root_url
  end

  test "redirect after logout" do
    follow_redirect!
    assert_select "a[href=?]", login_path
    assert_select "a[href=?]", logout_path,      count: 0
    assert_select "a[href=?]", user_path(@user), count: 0
  end

  test "should still work after logout in second window" do
    delete logout_path
    assert_redirected_to root_url
  end
end


class RememberingTest < UsersLogin
  test "login with remembering" do
    log_in_as(@user, remember_me: '1')
    assert_not cookies[:remember_token].blank?
  end

  test "login without remembering" do
    # Log in to set the cookie

    log_in_as(@user, remember_me: '1')

    # Log in again and verify that the cookie is deleted

    log_in_as(@user, remember_me: '0')

    assert cookies[:remember_token].blank?
  end
end



---



class UsersLoginTest < ActionDispatch::IntegrationTest
  def setup
    @user = users(:michael)
  end

  test "login path" do
    get login_path
    assert_template 'sessions/new'
  end
end



---



class ValidLoginTest < UsersLoginTest
  def setup
  end
end



---



Broken-up activation tests
--------------------------

class UsersSignup < ActionDispatch::IntegrationTest
  def setup
    ActionMailer::Base.deliveries.clear
  end
end



---



class AccountActivationTest < UsersSignup
  def setup
    super

    post users_path, params: { 
      user: { 
        name:                  "Example User",
        email:                 "user@example.com",
        password:              "password",
        password_confirmation: "password" 
      } 
    }

    @user = assigns(:user)
  end
end



---



test/integration/users_signup_test.rb
-------------------------------------

require "test_helper"

class UsersSignup < ActionDispatch::IntegrationTest
  def setup
    ActionMailer::Base.deliveries.clear
  end
end


class UsersSignupTest < UsersSignup
  test "invalid signup information" do
    assert_no_difference 'User.count' do
      post users_path, params: { 
        user: { 
          name:                  "",
          email:                 "user@invalid",
          password:              "foo",
          password_confirmation: "bar" 
        } 
      }
    end

    assert_response :unprocessable_entity
    assert_template 'users/new'
    assert_select 'div#error_explanation'
    assert_select 'div.field_with_errors'
  end

  test "valid signup information with account activation" do
    assert_difference 'User.count', 1 do
      post users_path, params: { 
        user: { 
          name:                  "Example User",
          email:                 "user@example.com",
          password:              "password",
          password_confirmation: "password" 
        } 
      }
    end

    assert_equal 1, ActionMailer::Base.deliveries.size
  end
end


class AccountActivationTest < UsersSignup
  def setup
    super

    post users_path, params: { 
      user: { 
        name:                  "Example User",
        email:                 "user@example.com",
        password:              "password",
        password_confirmation: "password" 
      } 
    }

    @user = assigns(:user)
  end

  test "should not be activated" do
    assert_not @user.activated?
  end

  test "should not be able to log in before account activation" do
    log_in_as(@user)
    assert_not is_logged_in?
  end

  test "should not be able to log in with invalid activation token" do
    get edit_account_activation_path("invalid token", email: @user.email)
    assert_not is_logged_in?
  end

  test "should not be able to log in with invalid email" do
    get edit_account_activation_path(@user.activation_token, email: 'wrong')
    assert_not is_logged_in?
  end

  test "should log in successfully with valid activation token and email" do
    get edit_account_activation_path(@user.activation_token, email: @user.email)
    assert @user.reload.activated?
    follow_redirect!
    assert_template 'users/show'
    assert is_logged_in?
  end
end



---



$ rails test



---



app/models/user.rb
------------------

Activates an account
--------------------

Sends activation email
----------------------


class User < ApplicationRecord
  def activate
    update_attribute(:activated,    true)
    update_attribute(:activated_at, Time.zone.now)
  end

  def send_activation_email
    UserMailer.account_activation(self).deliver_now
  end

  private
end



---



app/controllers/users_controller.rb
-----------------------------------

class UsersController < ApplicationController
  def create
    @user = User.new(user_params)

    if @user.save
      @user.send_activation_email
      flash[:info] = "Please check your email to activate your account."
      redirect_to root_url
    else
      render 'new', status: :unprocessable_entity
    end
  end
end



---



app/controllers/account_activations_controller.rb
-------------------------------------------------

class AccountActivationsController < ApplicationController
  def edit
    user = User.find_by(email: params[:email])

    if user && !user.activated? && user.authenticated?(:activation, params[:id])
      user.activate
      log_in user
      flash[:success] = "Account activated!"
      redirect_to user
    else
      flash[:danger] = "Invalid activation link"
      redirect_to root_url
    end
  end
end



---



$ rails test



---



app/models/user.rb
------------------

class User < ApplicationRecord
  attr_accessor :remember_token, :activation_token

  before_save   :downcase_email
  before_create :create_activation_digest

  # Activates an account

  def activate
    update_columns(activated: FILL_IN, activated_at: FILL_IN)
  end

  # Sends activation email

  def send_activation_email
    UserMailer.account_activation(self).deliver_now
  end

  private

  # Converts email to all lowercase

  def downcase_email
    self.email = email.downcase
  end

  # Creates and assigns the activation token and digest

  def create_activation_digest
    self.activation_token  = User.new_token
    self.activation_digest = User.digest(activation_token)
  end
end



---



app/controllers/users_controller.rb
-----------------------------------



class UsersController < ApplicationController
  def index
    @users = User.where(activated: FILL_IN).paginate(page: params[:page])
  end

  def show
    @user = User.find(params[:id])
    redirect_to root_url and return unless FILL_IN
  end
end



---



test/integration/users_index_test.rb
------------------------------------

require "test_helper"

class UsersIndex < ActionDispatch::IntegrationTest
  def setup
    @admin     = users(:michael)
    @non_admin = users(:archer)
  end
end


class UsersIndexAdmin < UsersIndex
  def setup
    super
    log_in_as(@admin)
    get users_path
  end
end


class UsersIndexAdminTest < UsersIndexAdmin
  test "should render the index page" do
    assert_template 'users/index'
  end

  test "should paginate users" do
    assert_select 'div.pagination'
  end

  test "should have delete links" do
    first_page_of_users = User.where(activated: true).paginate(page: 1)
    first_page_of_users.each do |user|
      assert_select 'a[href=?]', user_path(user), text: user.name
      unless user == @admin
        assert_select 'a[href=?]', user_path(user), text: 'delete'
      end
    end
  end

  test "should be able to delete non-admin user" do
    assert_difference 'User.count', -1 do
      delete user_path(@non_admin)
    end
    assert_response :see_other
    assert_redirected_to users_url
  end

  test "should display only activated users" do
    # Deactivate the first user on the page.
    # Making an inactive fixture user isn't sufficient because Rails can't guarantee it would appear on the first page

    User.paginate(page: 1).first.toggle!(FILL_IN)

    # Re-get /users to confirm the deactivated user doesn't appear

    get users_path

    # Ensure that all the displayed users are activated

    assigns(:users).each do |user|
      assert user.FILL_IN
    end
  end
end


class UsersNonAdminIndexTest < UsersIndex
  test "should not have delete links as non-admin" do
    log_in_as(@non_admin)
    get users_path

    assert_select 'a', text: 'delete', count: 0
  end
end



---



test/fixtures/users.yml
-----------------------

michael:
  name:            Michael Example
  email:           michael@example.com
  password_digest: <%= User.digest('password') %>
  admin:           true
  activated:       true
  activated_at:    <%= Time.zone.now %>

inactive:
  name:            Inactive User
  email:           inactive@example.com
  password_digest: <%= User.digest('password') %>
  admin:           false
  activated:       false



---



test/integration/user_show_test.rb
----------------------------------

require "test_helper"

class UsersShowTest < ActionDispatch::IntegrationTest
  def setup
    @inactive_user  = users(:inactive)
    @activated_user = users(:archer)
  end

  test "should redirect when user not activated" do
    get user_path(@inactive_user)

    assert_response      FILL_IN
    assert_redirected_to FILL_IN
  end

  test "should display user when activated" do
    get user_path(@activated_user)

    assert_response FILL_IN
    assert_template FILL_IN
  end
end



---



Email in production
-------------------

$ grep heroku .git/config

[remote "heroku"]
  url = https://git.heroku.com/mysterious-atoll-47182.git



host = 'https://mysterious-atoll-47182.herokuapp.com'



---



config/environments/production.rb
---------------------------------

Rails.application.configure do
  config.action_mailer.raise_delivery_errors = true
  config.action_mailer.delivery_method = :smtp
  host = '<your heroku app>.herokuapp.com'
  config.action_mailer.default_url_options = { host: host }

  ActionMailer::Base.smtp_settings = {
    :address              => 'smtp.sendgrid.net',
    :port                 => '587',
    :authentication       => :plain,
    :user_name            => 'apikey',
    :password             => ENV['SENDGRID_API_KEY'],
    :domain               => 'heroku.com',
    :enable_starttls_auto => true
  }
end



---



$ heroku config:set SENDGRID_API_KEY=<paste SendGrid API key>



---



$ heroku config:get SENDGRID_API_KEY

<API key displayed>



---



app/mailers/application_mailer.rb
---------------------------------

class ApplicationMailer < ActionMailer::Base
  default from: "from@example.com"                  # <- Make sure it's not this example adddress
  layout "mailer"
end



---



https://www.railstutorial.org/book/account_activation







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Amazon Web Services
-------------------


AWS S3 variables
----------------

SECRET_KEY_BASE=test
RAILS_ENV=production                        # для запуска приложения в production режиме
RACK_ENV=production
S3_ACCESS_KEY_ID=                           # Получено в AWS
S3_BUCKET=                                  # например rails-files-homework
S3_REGION=                                  # например eu-central-1
S3_SECRET_ACCESS_KEY=                       # Получено в AWS



---



Gemfile
-------

gem 'dotenv-rails', groups: [:development, :test]


$ bundle



---



config/application.rb
---------------------

Load dotenv only in development or test environment
---------------------------------------------------

Bundler.require(*Rails.groups)

if ['development', 'test'].include? ENV['RAILS_ENV']
  Dotenv::Railtie.load
end

HOSTNAME = ENV['HOSTNAME']



---



gem 'dotenv-rails', require: 'dotenv/rails-now'
gem 'gem-that-requires-env-variables'



---



Sinatra or Plain ol' Ruby
-------------------------

$ gem install dotenv


require 'dotenv/load'



or
--



require 'dotenv'
Dotenv.load



---



dotenv usage
------------

app/.env
--------

S3_BUCKET=YOURS3BUCKET
SECRET_KEY=YOURSECRETKEYGOESHERE



---



config.fog_directory  = ENV['S3_BUCKET']


export S3_BUCKET=YOURS3BUCKET
export SECRET_KEY=YOURSECRETKEYGOESHERE



---



Required Keys
-------------

config/initializers/dotenv.rb
-----------------------------

Dotenv.require_keys("SERVICE_APP_ID", "SERVICE_KEY", "SERVICE_SECRET")



---



Parsing
-------

Dotenv.parse(".env.local", ".env")

=> {'S3_BUCKET' => 'YOURS3BUCKET', 'SECRET_KEY' => 'YOURSECRETKEYGOESHERE', ...}



---



create a template of your .env file
-----------------------------------

$ dotenv -t .env


.env
----


S3_BUCKET=YOURS3BUCKET
SECRET_KEY=YOURSECRETKEYGOESHERE


.env.template
-------------

S3_BUCKET=S3_BUCKET
SECRET_KEY=SECRET_KEY



---



override existing ENV variables
-------------------------------

$ dotenv -o -f ".env.local,.env"







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Yandex.Cloud
------------


Gemfile
-------

gem 'active_storage_validations'
gem 'aws-sdk-s3'
gem 'file_validators'
gem 'image_processing'


$ bin/rails active_storage:install



---



https://cloud.yandex.ru/docs/storage/operations/buckets/create



---



app/models/vehicle.rb
---------------------

image
png, jpg, jpeg



---



config/storage.yml
------------------

test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

amazon:
  service: S3
  access_key_id: <%= ENV['S3_ACCESS_KEY_ID'] %>
  secret_access_key: <%= ENV['S3_SECRET_ACCESS_KEY'] %>
  region: <%= ENV['S3_REGION'] %>
  bucket: <%= ENV['S3_BUCKET'] %>

yandex:
  service: S3
  access_key_id: <%= ENV['S3_ACCESS_KEY_ID'] %>
  secret_access_key: <%= ENV['S3_SECRET_ACCESS_KEY'] %>
  region: ru-central1
  bucket: <%= ENV['S3_BUCKET'] %>
  endpoint: 'https://storage.yandexcloud.net'




---



config/environments/production.rb
---------------------------------

config.active_storage.service = :yandex





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Form generation
---------------


Создадим гем во временной директории
------------------------------------

$ cd /tmp
$ bundle gem hexlet_code



---




Удаляем .git директорию, так как она будет в целевой директории
---------------------------------------------------------------

$ rm -rf hexlet_code/.git



---




Копируем содержимое в проект
----------------------------

$ cp -r /tmp/hexlet_code/. <project-directory>



---




внутри project-directory-path
-----------------------------

$ bin/console                                                     # должен открыться репл без ошибок





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ORM for Ruby on Rails
---------------------


Create new user
---------------



INSERT INTO users (name, email) VALUES ('John Doe', 'john.doe@example.com');

User.create(name: 'John Doe', email: 'john.doe@example.com')




---




ActiveRecord 
------------

- Создание, чтение, обновление и удаление записей (CRUD) — ActiveRecord предоставляет методы для выполнения операций с данными
- Ассоциации между моделями                              — ActiveRecord позволяет определять отношения между моделями
- Валидация данных                                       — ActiveRecord предоставляет механизмы для проверки данных перед сохранением в базе данных
- Миграции                                               — ActiveRecord позволяет создавать, изменять и удалять структуру базы данных с использованием Ruby-кода





---




save to database with ruby ORM
------------------------------

course = Course.new
course.title = 'Ruby'
course.save




---




model
-----

class Course < ApplicationRecord
end




---






model objects
-------------

course = Course.find(1)



Обновление курса
----------------

course.title = 'Ruby on Rails'



Сохранение в базу
-----------------

course.save



Удаление записи в базе данных
-----------------------------

course.destroy



Общее число курсов
------------------

SELECT COUNT(*) FROM courses;

Course.count





---





Query Interface
---------------

courses = Course.where(state: 'active').order(title: :desc)
courses = Course.where("title LIKE '%Ruby%' AND state = 'active'")





---






schema
------

ActiveRecord::Schema.define(version: 2023_05_04_123456) do
  create_table "courses", force: :cascade do |t|
    t.string "title", null: false
    t.text "description"
    t.decimal "price", default: 0
    t.timestamps
  end
end




---




Active Record use Database First




---




migrations
----------

class CreateCourses < ActiveRecord::Migration[6.1]
  def change
    create_table :courses do |t|
      t.string :title, null: false
      t.text :description
      t.decimal :price, default: 0
      t.timestamps
    end
  end
end




---




$ rake db:migrate




---




model as class & as table
-------------------------

class Course < ApplicationRecord
end



model generation
----------------

$ rails generate model Course



db/schema.rb
------------

ctiveRecord::Schema.define(version: 2023_05_04_123456) do
  create_table "courses", force: :cascade do |t|
    t.string "title", null: false
    t.text "description"
    t.decimal "price", default: 0
    t.timestamps
  end
end




Convention Over Configuration
-----------------------------

$ course = Course.new

$ course.title = 'Hexlet Ruby on Rails'
$ course.description = 'Курс для изучения Ruby on Rails'
$ course.price = 19.99



INSERT (добавление новой записи)
--------------------------------

$ course.save



Обновление курса
----------------

course.price = 12.5



UPDATE (обновление существующей записи)
---------------------------------------

course.save



Выводит содержимое объекта
--------------------------

$ puts course.inspect

# #<Course id: 1,
#   title: "Hexlet Ruby on Rails",
#   description: "Курс для изучения Ruby on Rails",
#   price: "12.5",
#   created_at: "2023-05-04 20:11:02",
#   updated_at: "2023-05-04 20:11:02">




Удаление курса
--------------

course.destroy




---





save() - uses for create and update




---




find
----

course = Course.find(1)



Если записи не существует, то вызовется исключение ActiveRecord::RecordNotFound
-------------------------------------------------------------------------------

course.find(100)



find_by возвращает nil, если записи не существует
-------------------------------------------------

Course.find_by(id: 100)




---




validations
-----------

presence
--------

class Course < ApplicationRecord
  validates :title, presence: true
end



length
------

class Course < ApplicationRecord
  validates :description, length: { minimum: 128, maximum: 512 }
end



numericality
------------

class Course < ApplicationRecord
  validates :price, numericality: { greater_than_or_equal_to: 0 }
end



uniqueness
----------

class Student < ApplicationRecord
  validates :email, uniqueness: true
end



format
------

class Student < ApplicationRecord
  validates :email, format: { with: URI::MailTo::EMAIL_REGEXP }
end



inclusion
---------

class Article < ApplicationRecord
  validates :size, inclusion: { in: %w(small medium large), message: "%{value} is not a valid size" }
end



exclusion
---------

class Student < ApplicationRecord
  validates :phone_prefix, exclusion: { in: %w(+1 +3 +6 +10), message: "%{value} is incorrect" }
end

(+1, +3, +6 или +10 - валидация не пройдет)




---





difficult validations
---------------------

validate вместо стандартного validates
--------------------------------------

class Course < ApplicationRecord
  validate :discount_cannot_be_greater_than_price

  def discount_cannot_be_greater_than_price
    if discount > price
      errors.add(:discount, "can't be greater than price")
    end
  end
end




---




object validation
-----------------

valid?
------

class Course < ApplicationRecord
  validates :title, presence: true
end



course = Course.new(title: '')

Это выведет 'false', потому что title пуст
------------------------------------------

puts course.valid?



course.title = 'Основы Ruby on rails'
puts course.valid?




---




errors method
-------------

course = Course.new(title: '')
course.valid?

Puts выведет ["can't be blank"], что является ошибкой валидации
---------------------------------------------------------------

puts course.errors[:title]




---






Presence     — проверяет, что поле не пусто
Length       — проверяет длину значения поля
Numericality — проверяет, что значение поля является числом
Uniqueness   — проверяет, что значение поля уникально в базе данных
Format       — проверяет, что значение поля соответствует заданному формату
Inclusion    — проверяет, что значение поля включено в заданный список
Exclusion    — проверяет, что значение поля не включено в заданный список




---




associations
------------

structure
---------

class CreatePosts < ActiveRecord::Migration[6.0]
  def change
    create_table :posts do |t|
      t.string :state, null: true
      t.string :title
      t.text :body
      t.references :creator, null: false, foreign_key: {to_table: :users}       # Поле, которое будет внешним ключом
      t.timestamps
    end
  end
end



post.rb
-------

class Post < ApplicationRecord
  belongs_to :creator, class_name: 'User'
end



user.rb
-------

class User < ApplicationRecord
  has_many :posts, foreign_key: 'creator_id'
end





---




CRUD
----

user = User.find(1)

SELECT "posts".* FROM "posts" WHERE "posts"."creator_id" = 1

user.posts.each do |post|
  puts post
end



Параметры поста можно передать в build
--------------------------------------

post = user.posts.build(title: 'title', body: 'body')
post.save



Выводим все посты пользователя
------------------------------

user.posts

=> [#<Post id: 1, title: "title", body: "body", creator_id: 1, ...>]



Находим пост по id
------------------

post2 = user.posts.find(1)

post == post2

=> true



Удаляем все посты пользователя
------------------------------

user.posts.destroy_all




---




post = Post.find(1)
post.creator.first_name



Устанавливаем пользователя
--------------------------

post.creator = user
post.save




---




Плохо
-----

post.creator_id = user.id



Хорошо
------

post.creator = user




---




selections
----------

В запрос будет включено условие по creator_id, равным текущему пользователю
---------------------------------------------------------------------------

SELECT "posts".* FROM "posts" WHERE "posts"."creator_id" = 1 AND "posts"."state" = 'active'

user.posts.where(state: 'active')




---




CRUD Active Record Query Interface
----------------------------------

Create — создание
Read   — чтение
Update — обновление
Delete — удаление



create
------

student = Student.new

student.first_name = 'Hexlet'
student.last_name = 'Student'

student.save



student = Student.create(first_name: 'Hexlet', last_name: 'Student')



create = new + save
create! = new + save + ActiveRecord::RecordInvalid



begin
  student = Student.create!(first_name: 'Hexlet', last_name: 'Student')
rescue ActiveRecord::RecordInvalid => invalid
  puts invalid.record.errors
end




read
----

students = Student.all
student = Student.find(1)
students = Student.where(first_name: 'Hexlet')
student = Student.find_by(first_name: 'Hexlet', last_name: 'Student')




update
------

student = Student.find(1)
student.first_name = 'Hexleta'
student.save



Student.where(first_name: 'Hexlet').update_all(first_name: 'Hexleta')



delete
------

destroy
destroy_all
delete
delete_all



параметр dependent: :destroy указывает на связанное уничтожение
---------------------------------------------------------------

class Course < ActiveRecord::Base
  has_many :students, dependent: :destroy
end



course = Course.find(1)
course.destroy

courses = Course.where(first_name: 'Hexlet')
courses.destroy_all



course = course.find(1)
course.delete

courses = Course.where(first_name: 'Hexlet')
courses.delete_all








-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Deploy rails app fly.io
-----------------------


/home/gor/.fly/bin/flyctl
$HOME/.bash_profile (or similar)

$ export FLYCTL_INSTALL="/home/gor/.fly"
$ export PATH="$FLYCTL_INSTALL/bin:$PATH"

$ /home/gor/.fly/bin/flyctl --help




Usage
-----

$ flyctl [flags]
$ flyctl [command]




Deploying apps & machines
-------------------------

apps                                  - Manage apps
deploy                                - Deploy Fly applications
launch                                - Create and configure a new app from source code or a Docker image
machine                               - Manage Fly Machines.
status                                - Show app status




Configuration & scaling
-----------------------

certs                                 - Manage certificates
config                                - Manage an app's configuration
image                                 - Manage app image
ips                                   - Manage IP addresses for apps
scale                                 - Scale app resources
secrets                               - Manage application secrets with the set and unset commands.
volumes                               - Manage Fly Volumes.




Monitoring & managing things
----------------------------

checks                                - Manage health checks
console                               - Run a console in a new or existing machine
dashboard                             - Open web browser on Fly Web UI for this app
dig                                   - Make DNS requests against Fly.io's internal DNS server
logs                                  - View app logs
ping                                  - Test connectivity with ICMP ping messages
proxy                                 - Proxies connections to a Fly Machine.
releases                              - List app releases
services                              - Show the application's services
sftp                                  - Get or put files from a remote VM.
ssh                                   - Use SSH to log into or run commands on Machines
wireguard                             - Commands that manage WireGuard peer connections




Databases & extensions
----------------------

consul                                - Enable and manage Consul clusters
extensions                            - Extensions are additional functionality that can be added to your Fly apps
litefs-cloud                          - LiteFS Cloud management commands
planetscale                           - Provision and manage PlanetScale MySQL databases
postgres                              - Manage Postgres clusters.
redis                                 - Launch and manage Redis databases managed by Upstash.com
storage                               - Provision and manage Tigris object storage buckets




Access control
--------------

auth                                  - Manage authentication
orgs                                  - Commands for managing Fly organizations
tokens                                - Manage Fly.io API tokens




Help & troubleshooting
----------------------

docs                                  - View Fly documentation
doctor                                - The DOCTOR command allows you to debug your Fly environment
platform                              - Fly platform information




Additional Commands
-------------------

agent                                 - Commands that manage the Fly agent, a background process that manages flyctl wireguard connections
completion                            - Generate the autocompletion script for the specified shell
help                                  - Help about any command
jobs                                  - Show jobs at Fly.io
settings                              - Manage flyctl settings
version                               - Show version information for the flyctl command




Flags
-----

-t, --access-token string             - Fly API Access Token
--debug                               - Print additional logs and traces
-h, --help                            - help for flyctl
--verbose                             - Verbose output

$ flyctl [command] --help             - for more information about a command.





---




Go to app directory
-------------------

$ flyctl launch








-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Deploy on Render
----------------


render.com
----------


$ rails new my-app-render --database=postgresql
$ rails db:create
$ rails s



---1---

Gemfile
-------

gem 'pg'


$ bundle install



---2---

config/database.yml
-------------------

default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>



https://guides.rubyonrails.org/configuring.html#database-pooling
https://guides.rubyonrails.org/configuring.html#configuring-a-database


config/database.yml
-------------------

production:
  <<: *default
  url: <%= ENV['DATABASE_URL'] %>
production:
  <<: *default
  url: <%= ENV['DATABASE_URL'] %>
  database: my_app_render_production
  username: my_app_render
  password: <%= ENV['MY_APP_RENDER_DATABASE_PASSWORD'] %>



---3---

config/puma.rb
--------------

#workers ENV.fetch("WEB_CONCURRENCY") {2} -> workers ENV.fetch("WEB_CONCURRENCY") {4} 

#preload_app! -> preload_app!



---4---

config/environments/production.rb
---------------------------------

config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present? ->
config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present? || ENV['RENDER'].present?



---5---

$ git rev-parse --show-toplevel
$ touch render-build.sh


render-build.sh
---------------

set -o errexit

bundle install
bundle exec rails assets:precompile
bundle exec rails assets:clean
bundle exec rails db:migrate

#if you have seeds to run add:
# bundle exec rails db:seed



---6---

$ chmod a+x render-build.sh



---7---

$ touch render.yaml

render.yml
----------

databases:
  - name: postgres
    ipAllowList: []
    databaseName: my_app_render
    user: my_app_render

services:
  - type: web
    name: my_app_render
    env: ruby
    buildCommand: "./render-build.sh"
    startCommand: "bundle exec rails s"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: postgres
          property: connectionString
      - key: RAILS_MASTER_KEY
        sync: false



---8---

https://render.com
------------------

Dashboard -> Blueprints -> New Blueprint Instance

Add app name form GitHub

After that in the deploy window below, set the value of the RAILS_MASTER_KEY to the contents of your config/master.key file. Then click Apply

Go the the Dashboard tab to see the progress it should say deploying…





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Deploy Rails to Heroku
----------------------


$ heroku login


gem 'sqlite3', group: :development
gem 'pg', '0.18.1', group: :production


gem 'rails_12factor', group: :production


$ bundle install



onfig/database.yml
------------------

production:
  <<: *default
  database: db/production.sqlite3

to

production:
  <<: *default
  adapter: postgresql
  database: db/production.sqlite3



$ git add .
$ git commit -m "Heroku config"


$ heroku create


$ git push heroku main






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Add importmap to created rails app
----------------------------------


$ ./bin/bundle add importmap-rails && ./bin/rails importmap:install

pin "@rails/actioncable", to: "actioncable.esm.js"
pin "@rails/activestorage", to: "activestorage.esm.js"
pin "@rails/actiontext", to: "actiontext.esm.js"
pin "trix"







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bootstrap simple navbar 
-----------------------


$ touch layouts/nav.html.erb



layouts/nav.html.erb
--------------------

<nav class="navbar navbar-expand-lg bg-body-tertiary">
  <div class="container-fluid">
    <a class="navbar-brand me-5" href="/">App</a>
    <button
      class="navbar-toggler"
      type="button"
      data-bs-toggle="collapse"
      data-bs-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent"
      aria-expanded="false"
      aria-label="Toggle navigation"
    >
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse ms-5" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="<%=  %>"></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="<%=  %>"></a>
        </li>
      </ul>
    </div>
  </div>
</nav>



layouts/application.html.erb
----------------------------

<header>
  <%= render 'layouts/nav' %>
</header>

<main class="container my-5 pb-5">
  <%= yield %>
</main>





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

database.yml config template
----------------------------


default: &default
  adapter: postgresql
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000
  username: postgres
  host: localhost
  port: 5432

development:
  <<: *default
  database: ruby_gt

test:
  <<: *default
  database: ruby_gt_test

production:
  <<: *default
  database: ruby_gt_pro




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bootstrap cdn links
-------------------


https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css
https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js


<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>




---




bootstrap dark theme
--------------------

<!doctype html>
<html lang="en" data-bs-theme="dark">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link 
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" 
      rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" 
      crossorigin="anonymous"
    >
  </head>
  <body>
    <script 
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" 
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" 
      crossorigin="anonymous">
    </script>
  </body>
</html>





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bootstrap outline buttons styles for CRUD Rails app
---------------------------------------------------


edit.html.erb
-------------

<div class="btn-group my-5">
  <%= link_to "Show this user", @user, class: "btn btn-sm btn-outline-dark" %>
  <%= link_to "Back to users", users_path, class: "btn btn-sm btn-outline-dark" %>
</div>



index.html.erb
--------------

<p><%= link_to "Show user", user, class: "btn btn-sm btn-outline-dark my-3" %></p>
<%= link_to "New user", new_user_path, class: "btn btn-sm btn-outline-dark my-5" %>



new.html.erb
------------

<%= link_to "Back to users", users_path, class: "btn btn-sm btn-outline-dark my-5" %>



show.html.erb
-------------

<div class="btn-group my-5">
  <%= link_to "Edit this user", edit_user_path(@user), class: "btn btn-sm btn-outline-dark" %>
  <%= link_to "Back to users", users_path, class: "btn btn-sm btn-outline-dark" %>
  <%= button_to "Destroy this user", @user, method: :delete, class: "btn btn-sm btn-outline-dark" %>
</div>



_form.html.erb
--------------

<%= f.button :submit, class: "btn btn-sm btn-outline-dark" %>






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Devise sign templates
---------------------


_nav.html.erb
-------------

<% if user_signed_in? %>
  <small class="border rounded border-success p-1 me-3 text-success">
    <%= current_user.email %>
  </small>
  <%= link_to 'Settings', edit_user_registration_path, class: "text-dark text-decoration-none me-2" %>
  <%= link_to 'Sign out', destroy_user_session_path, data: { turbo_method: :delete }, class: "btn btn-outline-danger" %>
<% else %>
  <%= link_to 'Sign in', new_user_session_path, class: "btn btn-outline-success me-2" %>
  <%= link_to 'Sign up', new_user_registration_path, class: "btn btn-outline-secondary" %>
<% end %>





---




sessions/new.html.erb
---------------------

<div class="border border-primary p-5 col-6">
  <h2 class="mb-5">Log in</h2>

  <%= simple_form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
    <div class="form-inputs">
      <%= f.input :email, required: false, autofocus: true, input_html: { autocomplete: "email" } %>
      <%= f.input :password, required: false, input_html: { autocomplete: "current-password" } %>
      <%= f.input :remember_me, as: :boolean if devise_mapping.rememberable? %>
    </div>

    <div class="form-actions">
      <%= f.button :submit, "Log in", class: 'btn btn-outline-success' %>
    </div>
  <% end %>
</div>

<div class="my-5">
  <%= render "devise/shared/links" %>
</div>





---




registrations/new.html.erb
--------------------------

<div class="border border-primary p-5 col-6">
  <h2 class="mb-5">Sign up</h2>

  <%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
    <%= f.error_notification %>

    <div class="form-inputs">
      <%= f.input :email, required: true, autofocus: true, input_html: { autocomplete: "email" }%>
      <%= f.input :password, required: true, hint: ("#{@minimum_password_length} characters minimum" if @minimum_password_length), input_html: { autocomplete: "new-password" } %>
      <%= f.input :password_confirmation, required: true, input_html: { autocomplete: "new-password" } %>
    </div>

    <div class="form-actions">
      <%= f.button :submit, "Sign up", class: 'btn btn-outline-success btn-sm' %>
    </div>
  <% end %>
</div>

<div class="my-5">
  <%= render "devise/shared/links" %>
</div>





---




registrations/edit.html.erb
---------------------------

<div class="border border-primary p-5 col-6">
  <h2 class="mb-5">Edit <%= resource_name.to_s.humanize %></h2>

  <%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
    <%= f.error_notification %>

    <div class="form-inputs">
      <%= f.input :email, required: true, autofocus: true %>

      <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
        <p>Currently waiting confirmation for: <%= resource.unconfirmed_email %></p>
      <% end %>

      <%= f.input :password, hint: "leave it blank if you don't want to change it", required: false, input_html: { autocomplete: "new-password" } %>
      <%= f.input :password_confirmation, required: false, input_html: { autocomplete: "new-password" } %>
      <%= f.input :current_password, hint: "we need your current password to confirm your changes", required: true, input_html: { autocomplete: "current-password" } %>
    </div>

    <div class="form-actions">
      <%= f.button :submit, "Update", class: 'btn btn-outline-success btn-sm' %>
    </div>
  <% end %>
</div>

<div class="my-5">
  <%=
    button_to "Cancel my account",
    registration_path(resource_name),
    data: { confirm: "Are you sure?", turbo_confirm: "Are you sure?" },
    method: :delete,
    class: 'btn btn-outline-danger btn-sm'
  %>
</div>

<%= link_to "Back", :back %>









-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Basic Tailwind:css navbar for rails app
---------------------------------------


<nav class="bg-gray-800">
  <div class="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
    <div class="relative flex h-16 items-center justify-between">
      <div class="absolute inset-y-0 left-0 flex items-center sm:hidden">
        <button
          type="button"
          class="
            relative
            inline-flex
            items-center
            justify-center
            rounded-md
            p-2
            text-gray-400
            hover:bg-gray-700
            hover:text-white
            focus:outline-none
            focus:ring-2
            focus:ring-inset
            focus:ring-white"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="absolute -inset-0.5"></span>
          <span class="sr-only">Open main menu</span>

          <svg class="block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
          </svg>

          <svg class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start">
        <div class="flex flex-shrink-0 items-center">
          <img class="h-8 w-auto" src="https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=500" alt="Your Company">
        </div>
        <div class="hidden sm:ml-6 sm:block">
          <div class="flex space-x-4">
            <a href="/" class="bg-gray-900 text-white rounded-md px-3 py-2 text-sm font-medium" aria-current="page">Hot Combobox Tailwind</a>
            <a href="<%= root_path %>" class="text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium">Posts</a>
            <a href="<%= new_post_path %>" class="text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium">Create Post</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Mobile menu, show/hide based on menu state. -->
  <div class="sm:hidden" id="mobile-menu">
    <div class="space-y-1 px-2 pb-3 pt-2">
      <a href="/" class="bg-gray-900 text-white rounded-md px-3 py-2 text-sm font-medium" aria-current="page">Hot Combobox Tailwind</a>
      <a href="<%= root_path %>" class="text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium">Posts</a>
      <a href="<%= new_post_path %>" class="text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium">Create Post</a>
    </div>
  </div>
</nav>













-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Generate new rails app with template kickoff_tailwind
-----------------------------------------------------


$ git clone git@github.com:justalever/kickoff_tailwind.git
$ rails new active_storage_drag_and_drop -m kickoff_tailwind/template.rb --webpack=stimulus







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Navigate with Turbo Drive
-------------------------


<turbo-frame>




---




turbo tags
----------

<turbo-frame id="new_message">
  <form action="/messages" method="post">
  </form>
</turbo-frame>




---





add all records
---------------

<turbo-frame id="messages" src="/messages">
  <p>This message will be replaced by the response from /messages.</p>
</turbo-frame>




---




add new record
--------------

<turbo-stream action="append" target="messages">
  <template>
    <div id="message_1">My new message!</div>
  </template>
</turbo-stream>





---





change existing records
-----------------------

<turbo-stream action="replace" target="message_1">
  <template>
    <div id="message_1">This changes the existing message!</div>
  </template>
</turbo-stream>




---




Application Visits
------------------

some.html.erb
-------------

<a href="/edit" data-turbo-action="replace">Edit</a>


Turbo.visit("/edit", { action: "replace" })




---




Custom Rendering
----------------

some.js
-------

import morphdom from "morphdom"

addEventListener("turbo:before-render", (event) => {
  event.detail.render = (currentElement, newElement) => {
    morphdom(currentElement, newElement)
  }
})




---




Pausing Rendering
-----------------

some.js
-------

document.addEventListener("turbo:before-render", async (event) => {
  event.preventDefault()

  await animateOut()

  event.detail.resume()
})




---




Pausing Requests
----------------

some.js
-------

document.addEventListener("turbo:before-fetch-request", async (event) => {
  event.preventDefault()

  const token = await getSessionToken(window.app)
  event.detail.fetchOptions.headers["Authorization"] = `Bearer ${token}`

  event.detail.resume()
})




---




Performing Visits With a Different Method
-----------------------------------------

<a href="/articles/54" data-turbo-method="delete">Delete the article</a>




---




Requiring Confirmation for a Visit
----------------------------------

<a href="/articles" data-turbo-confirm="Do you want to leave this page?">Back to articles</a>
<a href="/articles/54" data-turbo-method="delete" data-turbo-confirm="Are you sure?">Delete the article</a>




---




 Disabling Turbo Drive on Specific Links or Forms
 ------------------------------------------------

 <a href="/" data-turbo="false">Disabled</a>

<form action="/messages" method="post" data-turbo="false">
</form>

<div data-turbo="false">
  <a href="/">Disabled</a>
  <form action="/messages" method="post">
  </form>
</div>



<div data-turbo="false">
  <a href="/" data-turbo="true">Enabled</a>
</div>



import { Turbo } from "@hotwired/turbo-rails"
Turbo.session.drive = false




---




View transitions
----------------

some.html
---------

<meta name="view-transition" content="same-origin" />



html[data-turbo-visit-direction="forward"]::view-transition-old(sidebar):only-child {
  animation: slide-to-right 0.5s ease-out;
}




---




Displaying Progress (progress bar)
----------------------------------

styles.css
----------

.turbo-progress-bar {
  height: 5px;
  background-color: green;
}




.turbo-progress-bar {
  visibility: hidden;
}




---




Reloading When Assets Change
----------------------------

index.html
----------

<head>
  <link rel="stylesheet" href="/application-258e88d.css" data-turbo-track="reload">
  <script src="/application-cbd3cd4.js" data-turbo-track="reload"></script>
</head>




---




Ensuring Specific Pages Trigger a Full Reload
---------------------------------------------

<head>
  <meta name="turbo-visit-control" content="reload">
</head>




---




Setting a Root Location
-----------------------

<head>
  <meta name="turbo-root" content="/app">
</head>




---




 Form Submissions
 ----------------


turbo:submit-start
turbo:before-fetch-request
turbo:before-fetch-response
turbo:submit-end



addEventListener("turbo:submit-start", ({ target }) => {
  for (const field of target.elements) {
    field.disabled = true
  }
})




---





InstantClick
------------

some.html
---------

<meta name="turbo-prefetch" content="false">



<html>
  <head>
    <meta name="turbo-prefetch" content="true">
  </head>
  <body>
    <a href="/articles">Articles</a> <!-- This link is prefetched -->
    <a href="/about" data-turbo-prefetch="false">About</a> <!-- Not prefetched -->
    <div data-turbo-prefetch="false"`>
      <!-- Links inside this div will not be prefetched -->
    </div>
  </body>
</html>



some.js
-------

document.addEventListener("turbo:before-prefetch", (event) => {
  if (isSavingData() || hasSlowInternet()) {
    event.preventDefault()
  }
})

function isSavingData() {
  return navigator.connection?.saveData
}

function hasSlowInternet() {
  return navigator.connection?.effectiveType === "slow-2g" ||
         navigator.connection?.effectiveType === "2g"
}




---




Preload Links Into the Cache
----------------------------


- navigate to another domain
- have a [data-turbo-frame] attribute that drives a <turbo-frame> element
- drive an ancestor <turbo-frame> element
- have the [data-turbo="false"] attribute
- have the [data-turbo-stream] attribute
- have a [data-turbo-method] attribute
- have an ancestor with the [data-turbo="false"] attribute
- have an ancestor with the [data-turbo-prefetch="false"] attribute



some.js
-------

addEventListener("turbo:before-fetch-request", (event) => {
  if (event.detail.fetchOptions.headers["X-Sec-Purpose"] === "prefetch") {
    // do additional preloading setup…
  } else {
    // do something else…
  }
})





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Smooth page refreshes with morphing
-----------------------------------


Morphing
--------

some.html.erb
-------------

<head>
  <meta name="turbo-refresh-method" content="morph">
</head>




---




Scroll preservation
-------------------

some.html.erb
-------------

<head>
  <meta name="turbo-refresh-scroll" content="preserve">
</head>




---




Exclude sections from morphing
------------------------------

some.html.erb
-------------

<div data-turbo-permanent></div>




---




Turbo frames
------------

some.html.erb
-------------

<turbo-frame id="my-frame" refresh="morph">
</turbo-frame>




---




Broadcasting page refreshes
---------------------------

some.html.erb
-------------

<turbo-stream action="refresh"></turbo-stream>




some model
----------

class Calendar < ApplicationRecord
  broadcasts_refreshes
end



some View
---------

turbo_stream_from @calendar





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Decompose with Turbo Frames
---------------------------


some.html.erb
-------------

<body>
  <div id="navigation">Links targeting the entire page</div>

  <turbo-frame id="message_1">
    <h1>My message title</h1>
    <p>My message content</p>
    <a href="/messages/1/edit">Edit this message</a>
  </turbo-frame>

  <turbo-frame id="comments">
    <div id="comment_1">One comment</div>
    <div id="comment_2">Two comments</div>

    <form action="/messages/comments">.</form>
  </turbo-frame>
</body>



<body>
  <h1>Editing message</h1>

  <turbo-frame id="message_1">
    <form action="/messages/1">
      <input name="message[name]" type="text" value="My message title">
      <textarea name="message[content]">My message content</textarea>
      <input type="submit">
    </form>
  </turbo-frame>
</body>




---




Eager-Loading Frames
--------------------

some.html.erb
-------------

<body>
  <h1>Imbox</h1>

  <div id="emails">
    ...
  </div>

  <turbo-frame id="set_aside_tray" src="/emails/set_aside">
  </turbo-frame>

  <turbo-frame id="reply_later_tray" src="/emails/reply_later">
  </turbo-frame>
</body>



<turbo-frame id="set_aside_tray" src="/emails/set_aside">
  <img src="/icons/spinner.gif">
</turbo-frame>



<body>
  <h1>Set Aside Emails</h1>

  <p>These are emails you've set aside</p>

  <turbo-frame id="set_aside_tray">
    <div id="emails">
      <div id="email_1">
        <a href="/emails/1">My important email</a>
      </div>
    </div>
  </turbo-frame>
</body>




---




Targeting Navigation Into or Out of a Frame
-------------------------------------------

some.html.erb
-------------

<body>
  <h1>Imbox</h1>
  ...
  <turbo-frame id="set_aside_tray" src="/emails/set_aside" target="_top">
  </turbo-frame>
</body>

<body>
  <h1>Set Aside Emails</h1>
  <turbo-frame id="set_aside_tray" target="_top">
  </turbo-frame>
</body>



<body>
  <turbo-frame id="message_1">
    <a href="/messages/1/edit">
      Edit this message (within the current frame)
    </a>

    <a href="/messages/1/permission" data-turbo-frame="_top">
      Change permissions (replace the whole page)
    </a>
  </turbo-frame>

  <form action="/messages/1/delete" data-turbo-frame="message_1">
    <a href="/messages/1/warning" data-turbo-frame="_self">
      Load warning within current frame
    </a>

    <input type="submit" value="Delete this message">
    (with a confirmation shown in a specific frame)
  </form>
</body>




---




Promoting a Frame Navigation to a Page Visit
--------------------------------------------


- the <turbo-frame> element
- any <a> elements that navigate the <turbo-frame>
- any <form> elements that navigate the <turbo-frame>
- any <input type="submit"> or <button> elements contained within <form> elements that navigate the <turbo-frame>



some.html.erb
-------------

<turbo-frame id="articles" data-turbo-action="advance">
  <a href="/articles?page=2" rel="next">Next page</a>
</turbo-frame>




---




“Breaking out” from a Frame
---------------------------

some.html.erb
-------------

<head>
  <meta name="turbo-visit-control" content="reload">
</head>





---




Anti-Forgery Support (CSRF)
---------------------------

some.html.erb
-------------

<meta name="csrf-token" content="[your-token]">




---




Custom Rendering
----------------

some.js
-------

import morphdom from "morphdom"

addEventListener("turbo:before-frame-render", (event) => {
  event.detail.render = (currentElement, newElement) => {
    morphdom(currentElement, newElement, { childrenOnly: true })
  }
})




---




 Pausing Rendering
 -----------------

 some.js
 -------

 document.addEventListener("turbo:before-frame-render", async (event) => {
  event.preventDefault()

  await animateOut()

  event.detail.resume()
})






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Come Alive with Turbo Streams
-----------------------------


 Stream Messages and Actions
----------------------------

some.html.erb
-------------

<turbo-stream action="append" target="messages">
  <template>
    <div id="message_1">
      This div will be appended to the element with the DOM ID "messages".
    </div>
  </template>
</turbo-stream>

<turbo-stream action="prepend" target="messages">
  <template>
    <div id="message_1">
      This div will be prepended to the element with the DOM ID "messages".
    </div>
  </template>
</turbo-stream>

<turbo-stream action="replace" target="message_1">
  <template>
    <div id="message_1">
      This div will replace the existing element with the DOM ID "message_1".
    </div>
  </template>
</turbo-stream>

<turbo-stream action="update" target="unread_count">
  <template>
    <!-- The contents of this template will replace the contents of the element with ID "unread_count" by setting innerHtml to "" and then switching in the
    template contents. Any handlers bound to the element "unread_count" would be retained. This is to be contrasted with the "replace" action above, where
    that action would necessitate the rebuilding of handlers. -->
    1
  </template>
</turbo-stream>

<turbo-stream action="remove" target="message_1">
  <!-- The element with DOM ID "message_1" will be removed. The contents of this stream element are ignored. -->
</turbo-stream>

<turbo-stream action="before" target="current_step">
  <template>
    <!-- The contents of this template will be added before the the element with ID "current_step". -->
    <li>New item</li>
  </template>
</turbo-stream>

<turbo-stream action="after" target="current_step">
  <template>
    <!-- The contents of this template will be added after the the element with ID "current_step". -->
    <li>New item</li>
  </template>
</turbo-stream>

<turbo-stream action="refresh" request-id="abcd-1234"></turbo-stream>





---





Actions With Multiple Targets
-----------------------------

some.html.erb
-------------

<turbo-stream action="remove" targets=".old_records">
  <!-- The element with the class "old_records" will be removed. The contents of this stream element are ignored. -->
</turbo-stream>

<turbo-stream action="after" targets="input.invalid_field">
  <template>
    <!-- The contents of this template will be added after the all elements that match "inputs.invalid_field". -->
    <span>Incorrect</span>
  </template>
</turbo-stream>





---




Streaming From HTTP Responses
-----------------------------

some_controller.rb
------------------

def destroy
  @message = Message.find(params[:id])
  @message.destroy

  respond_to do |format|
    format.turbo_stream { render turbo_stream: turbo_stream.remove(@message) }
    format.html         { redirect_to messages_url }
  end
end




---




Reusing Server-Side Templates
-----------------------------

app/views/messages/_message.html.erb
------------------------------------

<div id="<%= dom_id message %>">
  <%= message.content %>
</div>



app/views/messages/index.html.erb
---------------------------------

<h1>All the messages</h1>
<%= render partial: "messages/message", collection: @messages %>



app/controllers/messages_controller.rb
--------------------------------------

class MessagesController < ApplicationController
  def index
    @messages = Message.all
  end

  def create
    message = Message.create!(params.require(:message).permit(:content))

    respond_to do |format|
      format.turbo_stream do
        render turbo_stream: turbo_stream.append(:messages, partial: "messages/message", locals: { message: message })
      end

      format.html { redirect_to messages_url }
    end
  end
end



Content-Type: text/vnd.turbo-stream.html; charset=utf-8

<turbo-stream action="append" target="messages">
  <template>
    <div id="message_1">
      The content of the message.
    </div>
  </template>
</turbo-stream>




---




Custom Actions
--------------

some.js
-------

addEventListener("turbo:before-stream-render", ((event) => {
  const fallbackToDefaultActions = event.detail.render

  event.detail.render = function (streamElement) {
    if (streamElement.action == "alert") {
    } else if (streamElement.action == "log") {
    } else {
      fallbackToDefaultActions(streamElement)
    }
  }
}))



import { StreamActions } from "@hotwired/turbo"

// <turbo-stream action="log" message="Hello, world"></turbo-stream>

StreamActions.log = function () {
  console.log(this.getAttribute("message"))
}






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Building Turbo Application
--------------------------


Loading Application’s JavaScript Bundle
---------------------------------------

some.html.erb
-------------

<head>
  <script src="/application-cbd3cd4.js" defer></script>
</head>




---




Preparing the Page to be Cached
-------------------------------

some.js
-------

document.addEventListener("turbo:before-cache", function() {
})




some.html.erb
-------------

<body>
  <div class="flash" data-turbo-temporary>
    Your cart was updated!
  </div>
</body>




---




Detecting When a Preview is Visible
-----------------------------------

some.js
-------

if (document.documentElement.hasAttribute("data-turbo-preview")) {
  // Turbo Drive is displaying a preview
}




---




Opting Out of Caching
---------------------

some.html.erb
-------------

<head>
  <meta name="turbo-cache-control" content="no-cache">
</head>





---




Opting Out of Caching from the client-side
------------------------------------------

Turbo.cache.exemptPageFromCache()
Turbo.cache.exemptPageFromPreview()
Turbo.cache.resetCacheControl()




---




Observing Navigation Events
---------------------------

some.js
-------

document.addEventListener("turbo:load", function() {
})




---




Attaching Behavior With Stimulus
--------------------------------

some.html.erb
-------------

<div data-controller="hello">
  <input data-hello-target="name" type="text">
  <button data-action="click->hello#greet">Greet</button>
</div>



hello_controller.js
-------------------

import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  greet() {
    console.log(`Hello, ${this.name}!`)
  }

  get name() {
    return this.targets.find("name").value
  }
}





---





Persisting Elements Across Page Loads
-------------------------------------

<div id="cart-counter" data-turbo-permanent>1 item</div>






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Installing Turbo in Application
-------------------------------


As An npm Package
-----------------

import * as Turbo from "@hotwired/turbo"




---




In a Ruby on Rails application
------------------------------

gem 'turbo-rails'



https://github.com/hotwired/turbo-rails






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Drive
-----


Turbo.visit
-----------

Turbo.visit(location)
Turbo.visit(location, { action: action })
Turbo.visit(location, { frame: frame })




---




Turbo.cache.clear
-----------------

Turbo.cache.clear()




---




Turbo.setProgressBarDelay
-------------------------

Turbo.setProgressBarDelay(delayInMilliseconds)




---




Turbo.setConfirmMethod
----------------------

Turbo.setConfirmMethod(confirmMethod)




---




Turbo.session.drive
-------------------

Turbo.setConfirmMethod(confirmMethod)




---




Turbo.session.drive
-------------------

Turbo.session.drive = false





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Frames
------


Basic Frame
-----------

<turbo-frame id="messages">
  <a href="/messages/expanded">
    Show all expanded messages in this frame.
  </a>

  <form action="/messages">
    Show response from this form within this frame.
  </form>
</turbo-frame>




---




Eager-loaded frame
------------------

<turbo-frame id="messages" src="/messages">
  Content will be replaced when /messages has been loaded.
</turbo-frame>




---




Lazy-loaded frame
-----------------

<turbo-frame id="messages" src="/messages" loading="lazy">
  Content will be replaced when the frame becomes visible and /messages has been loaded.
</turbo-frame>




---




Frame targeting the whole page by default
-----------------------------------------

<turbo-frame id="messages" target="_top">
  <a href="/messages/1">
    Following link will replace the whole page, not this frame.
  </a>

  <a href="/messages/1" data-turbo-frame="_self">
    Following link will replace just this frame.
  </a>

  <form action="/messages">
    Submitting form will replace the whole page, not this frame.
  </form>
</turbo-frame>




---




Frame with overwritten navigation targets
-----------------------------------------

<turbo-frame id="messages">
  <a href="/messages/1">
    Following link will replace this frame.
  </a>

  <a href="/messages/1" data-turbo-frame="_top">
    Following link will replace the whole page, not this frame.
  </a>

  <form action="/messages" data-turbo-frame="navigation">
    Submitting form will replace the navigation frame.
  </form>
</turbo-frame>




---




Frame that promotes navigations to Visits
-----------------------------------------

<turbo-frame id="messages" data-turbo-action="advance">
  <a href="/messages?page=2">Advance history to next page</a>
  <a href="/messages?page=2" data-turbo-action="replace">Replace history with next page</a>
</turbo-frame>




---




Frame that will get reloaded with morphing during page refreshes
----------------------------------------------------------------

<turbo-frame id="my-frame" refresh="morph">
</turbo-frame>




---




Attributes, properties, and functions
-------------------------------------


HTML Attributes
---------------

src                 --- accepts a URL or path value that controls navigation of the element
loading             --- has two valid enumerated values: “eager” and “lazy”. The default value is eager
busy                --- is a boolean attribute toggled to be present when a <turbo-frame>-initiated request starts, and toggled false when the request ends
disabled            --- is a boolean attribute that prevents any navigation when present
target              --- refers to another <turbo-frame> element by ID to be navigated when a descendant <a> is clicked. When target="_top", navigate the window
complete            --- is a boolean attribute whose presence or absence indicates whether or not the <turbo-frame> element has finished navigating
autoscroll          --- is a boolean attribute that controls whether or not to scroll a <turbo-frame> element





---




Properties
----------



FrameElement.src          --- controls the pathname or URL to be loaded. Setting the src property will immediately navigate the element. When FrameElement.loaded is set to "lazy"
FrameElement.disabled     --- is a boolean property that controls whether or not the element will load
FrameElement.loading      --- controls the style (either "eager" or "lazy") that the frame will loading its content
FrameElement.loaded       --- references a Promise instance that resolves once the FrameElement’s current navigation has completed
FrameElement.complete     --- is a read-only boolean property set to true when the FrameElement has finished navigating and false otherwise
FrameElement.autoscroll   --- controls whether or not to scroll the element into view once loaded
FrameElement.isActive     --- is a read-only boolean property that indicates whether or not the frame is loaded and ready to be interacted with
FrameElement.isPreview    --- is a read-only boolean property that returns true when the document that contains the element is a preview





---




Functions
---------

FrameElement.reload()     --- is a function that reloads the frame element from its src






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Streams
-------


The eight actions
-----------------

Append
------

<turbo-stream action="append" target="dom_id">
  <template>
    Content to append to container designated with the dom_id.
  </template>
</turbo-stream>




---




Prepend
-------

<turbo-stream action="prepend" target="dom_id">
  <template>
    Content to prepend to container designated with the dom_id.
  </template>
</turbo-stream>




---




Replace
-------

<turbo-stream action="replace" target="dom_id">
  <template>
    Content to replace the element designated with the dom_id.
  </template>
</turbo-stream>




---




Update
------

<turbo-stream action="update" target="dom_id">
  <template>
    Content to update to container designated with the dom_id.
  </template>
</turbo-stream>




---




Remove
------

<turbo-stream action="remove" target="dom_id">
</turbo-stream>




---




Before
------

<turbo-stream action="before" target="dom_id">
  <template>
    Content to place before the element designated with the dom_id.
  </template>
</turbo-stream>




---




After
-----

<turbo-stream action="after" target="dom_id">
  <template>
    Content to place after the element designated with the dom_id.
  </template>
</turbo-stream>




---




Refresh
-------

<!-- without `[request-id]` -->
<turbo-stream action="refresh"></turbo-stream>

<!-- debounced with `[request-id]` -->
<turbo-stream action="refresh" request-id="abcd-1234"></turbo-stream>




---




Targeting Multiple Elements
---------------------------

<turbo-stream action="remove" targets=".elementsWithClass">
</turbo-stream>

<turbo-stream action="after" targets=".elementsWithClass">
  <template>
    Content to place after the elements designated with the css query.
  </template>
</turbo-stream>






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rails Turbo
-----------

Events
------


Document
--------

turbo:click
-----------

-----------------------------------------------------------------------

event.detail property         Type            Description

-----------------------------------------------------------------------
url                           string          the requested location
-----------------------------------------------------------------------
originalEvent                 MouseEvent      the original click event
-----------------------------------------------------------------------




---




turbo:before-visit
------------------

-----------------------------------------------------------------------

event.detail property         Type            Description

-----------------------------------------------------------------------
url                           string          the requested location
-----------------------------------------------------------------------




---




turbo:visit
-----------

---------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

---------------------------------------------------------------------------------------------
url                           string                                  the requested location
---------------------------------------------------------------------------------------------
action                        "advance" | "replace" | "restore"       the visit’s Action
---------------------------------------------------------------------------------------------




---




turbo:before-render
-------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
renderMethod                  "replace" | "morph"                     the strategy that will be used to render the new content
-----------------------------------------------------------------------------------------------------------------------------------------------------
newBody                       HTMLBodyElement                         the new <body> element that will replace the document’s current <body> element
-----------------------------------------------------------------------------------------------------------------------------------------------------
isPreview                     boolean                                 whether or not the render is a preview of a cached page
-----------------------------------------------------------------------------------------------------------------------------------------------------
resume                        (value?: any) => void                   called when Pausing Requests
-----------------------------------------------------------------------------------------------------------------------------------------------------
render                        (currentBody, newBody) => void          override to Customize Rendering
-----------------------------------------------------------------------------------------------------------------------------------------------------




---





turbo:render
------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
renderMethod                  "replace" | "morph"                     the strategy used to render the new content
-----------------------------------------------------------------------------------------------------------------------------------------------------
isPreview                     boolean                                 whether or not the render is a preview of a cached page
-----------------------------------------------------------------------------------------------------------------------------------------------------




---




turbo:load
----------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
url                           string                                  the requested location
-----------------------------------------------------------------------------------------------------------------------------------------------------
timing.visitStart             number                                  timestamp at the start of the Visit
-----------------------------------------------------------------------------------------------------------------------------------------------------
timing.requestStart           number                                  timestamp at the start of the HTTP request for the next page
-----------------------------------------------------------------------------------------------------------------------------------------------------
timing.requestEnd             number                                  timestamp at the end of the HTTP request for the next page
-----------------------------------------------------------------------------------------------------------------------------------------------------
timing.visitEnd               number                                  timestamp at the end of the Visit
-----------------------------------------------------------------------------------------------------------------------------------------------------




---




Page Refreshes
--------------


turbo:morph
-----------

---------------------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

---------------------------------------------------------------------------------------------------------------------------------------------------------------
currentElement                Element                                 the original Element that remains connected after the morph (most commonly document.body)
---------------------------------------------------------------------------------------------------------------------------------------------------------------
newElement                    Element                                 the Element with the new attributes and children that is not connected after the morph
---------------------------------------------------------------------------------------------------------------------------------------------------------------




---




turbo:before-morph-element
--------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

---------------------------------------------------------------------------------------------------------------------------------------------------------------
newElement                    Element                                 the Element with the new attributes and children that is not connected after the morph
---------------------------------------------------------------------------------------------------------------------------------------------------------------




---




turbo:before-morph-attribute
----------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

---------------------------------------------------------------------------------------------------------------------------------------------------------------
attributeName                 string                                  the name of the attribute to be mutated
---------------------------------------------------------------------------------------------------------------------------------------------------------------
mutationType                  "updated" | "removed"                   how the attribute will be mutated
---------------------------------------------------------------------------------------------------------------------------------------------------------------




---




turbo:morph-element
-------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

---------------------------------------------------------------------------------------------------------------------------------------------------------------
newElement                    Element                                 the Element with the new attributes and children that is not connected after the morph
---------------------------------------------------------------------------------------------------------------------------------------------------------------





---




Forms
-----

turbo:submit-start
------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

---------------------------------------------------------------------------------------------------------------------------------------------------------------
formSubmission                FormSubmission                          the <form> element submission
---------------------------------------------------------------------------------------------------------------------------------------------------------------





---




turbo:submit-end
----------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
success                       boolean                                 a boolean representing the request’s success
-----------------------------------------------------------------------------------------------------------------------------------------------------
fetchResponse                 FetchResponse | null                    present when success: true, null when success: false
-----------------------------------------------------------------------------------------------------------------------------------------------------
error                         Error or null                           null when success: true, present when success: false
-----------------------------------------------------------------------------------------------------------------------------------------------------




---




Frames
------

turbo:before-frame-render
-------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
newFrame                      FrameElement                            the new <turbo-frame> element that will replace the current <turbo-frame> el
-----------------------------------------------------------------------------------------------------------------------------------------------------
resume                        (value?: any) => void                   called when Pausing Requests
-----------------------------------------------------------------------------------------------------------------------------------------------------
render                        (currentFrame, newFrame) => void        override to Customize Rendering
-----------------------------------------------------------------------------------------------------------------------------------------------------




---




turbo:frame-render
------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
fetchResponse                 FetchResponse                           the HTTP request’s response
-----------------------------------------------------------------------------------------------------------------------------------------------------




---




turbo:frame-load




---




turbo:frame-missing
-------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
response                      Response                                the HTTP response for the request initiated by a <turbo-frame> element
-----------------------------------------------------------------------------------------------------------------------------------------------------
visit                         async (location: string | URL, 
                              visitOptions: VisitOptions) => void     a convenience function to initiate a page-wide navigation
-----------------------------------------------------------------------------------------------------------------------------------------------------




---




Streams
-------

turbo:before-stream-render
--------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
newStream                     StreamElement                           the new <body> element that will replace the document’s current <body> element
-----------------------------------------------------------------------------------------------------------------------------------------------------
render                        async (currentElement) => void          override to define Custom Actions
-----------------------------------------------------------------------------------------------------------------------------------------------------




---




HTTP Requests
-------------


- a <turbo-frame> during its navigation
- a <form> during its submission
- the <html> element during a page-wide Turbo Visit



turbo:before-fetch-request
--------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
fetchOptions                  RequestInit                             the options used to construct the Request
-----------------------------------------------------------------------------------------------------------------------------------------------------
url                           URL                                     the request’s location
-----------------------------------------------------------------------------------------------------------------------------------------------------
resume                        (value?: any) => void callback          called when Pausing Requests
-----------------------------------------------------------------------------------------------------------------------------------------------------




---




turbo:before-fetch-response
---------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
fetchResponse                 FetchResponse                           the HTTP request’s response
-----------------------------------------------------------------------------------------------------------------------------------------------------




---




turbo:before-prefetch




---




turbo:fetch-request-error
-------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

event.detail property         Type                                    Description

-----------------------------------------------------------------------------------------------------------------------------------------------------
request                       FetchRequest                            The HTTP request that failed
-----------------------------------------------------------------------------------------------------------------------------------------------------
error                         Error                                   provides the cause of the failure
-----------------------------------------------------------------------------------------------------------------------------------------------------






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Attributes and Meta Tags
------------------------


Data Attributes
---------------

data-turbo="false"            --- disables Turbo Drive on links and forms including descendants
data-turbo-track="reload"     --- tracks the element’s HTML and performs a full page reload when it changes. Typically used to keep script and CSS link elements up-to-date
data-turbo-frame              --- identifies the Turbo Frame to navigate. Refer to the Frames documentation for further details.
data-turbo-preload            --- signals to Drive to pre-fetch the next page’s content
data-turbo-action             --- customizes the Visit action. Valid values are replace or advance. Can also be used with Turbo Frames to promote frame navigations to page visits
data-turbo-permanent          --- persists the element between page loads
data-turbo-temporary          --- removes the element before the document is cached, preventing it from reappearing when restored
data-turbo-eval="false"       --- prevents inline script elements from being re-evaluated on Visits
data-turbo-method             --- changes the link request type from the default GET
data-turbo-stream             --- specifies that a link or form can accept a Turbo Streams response
data-turbo-confirm            --- presents a confirm dialog with the given value. Can be used on form elements or links with data-turbo-method.
data-turbo-submits-with       --- specifies text to display when submitting a form. Can be used on input or button elements




---




Automatically Added Attributes
------------------------------

disabled                      --- is added to the form submitter while the form request is in progress, to prevent repeat submissions
data-turbo-preview            --- is added to the html element when displaying a preview during a Visit
data-turbo-visit-direction    --- is added to the html element during a visit, with a value of forward or back or none, to indicate its direction
aria-busy                     --- is added to html and turbo-frame elements when a navigation is in progress




---




Meta Tags
---------


<meta name="turbo-cache-control">                         --- to opt out of caching
<meta name="turbo-visit-control" content="reload">        --- will perform a full page reload whenever Turbo navigates to the page, including when the request originates from a <turbo-frame>
<meta name="turbo-root">                                  --- to scope Turbo Drive to a particular root location
<meta name="view-transition" content="same-origin">       --- to trigger view transitions on browsers that support the View Transition API
<meta name="turbo-refresh-method" content="morph">        --- will configure page refreshes with morphing
<meta name="turbo-refresh-scroll" content="preserve">     --- will enable scroll preservation during page refreshes





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Stimulus
--------

Stimulus content loader
-----------------------


Install the package
-------------------

$ yarn add stimulus-content-loader




mport it in application
-----------------------

javascript_controllers.js
-------------------------

import { Application } from '@hotwired/stimulus'
import ContentLoader from 'stimulus-content-loader'

const application = Application.start()
application.register('content-loader', ContentLoader)




Use it in your views
--------------------

some_view.html.erb
------------------

<div
  data-controller="content-loader"
  data-content-loader-url-value="/comments"
>
  <i class="fas fa-spinner fa-spin"></i>
  Loading comments... This content will be replaced by the content returned by the url /comments.
</div>





---




Stimulus Animated Number
------------------------

$ yarn add stimulus-animated-number



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import AnimatedNumber from 'stimulus-animated-number'

const application = Application.start()
application.register('animated-number', AnimatedNumber)



view.html.erb
-------------

<div
  data-controller="animated-number"
  data-animated-number-start-value="0"
  data-animated-number-end-value="200"
  data-animated-number-duration-value="3000"
>
  0
</div>

<div
  data-controller="animated-number"
  data-animated-number-lazy-value=""
  data-animated-number-start-value="0"
  data-animated-number-end-value="200"
  data-animated-number-duration-value="3000"
>
  This animation will start only when the element become visible thanks to Intersection Observers.
</div>

<div
  data-controller="animated-number"
  data-animated-number-lazy-value=""
  data-animated-number-lazy-root-margin-value="30px"
  data-animated-number-lazy-threshold-value="0.4"
  data-animated-number-start-value="0"
  data-animated-number-end-value="200"
  data-animated-number-duration-value="3000"
>
  You can customize the Intersection Observer options.
</div>



Extending Controller
--------------------

import AnimatedNumber from 'stimulus-animated-number'

export default class extends AnimatedNumber {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Carousel
-----------------

$ yarn add stimulus-carousel



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Carousel from 'stimulus-carousel'

const application = Application.start()
application.register('carousel', Carousel)




application.js
--------------

import 'swiper/css/bundle'




view.html.erb
-------------

<div data-controller="carousel" class="swiper-container">
  <div class="swiper-wrapper">
    <div class="swiper-slide">Slide 1</div>
    <div class="swiper-slide">Slide 2</div>
    <div class="swiper-slide">Slide 3</div>
  </div>
</div>



or



<div data-controller="carousel" class="swiper-container" data-carousel-options-value='{"direction": "vertical"}'>
  <div class="swiper-wrapper">
    <div class="swiper-slide">Slide 1</div>
    <div class="swiper-slide">Slide 2</div>
    <div class="swiper-slide">Slide 3</div>
  </div>
</div>



Extending Controller
--------------------

import Carousel from 'stimulus-carousel'

export default class extends Carousel {
  connect() {
    super.connect()
    console.log('Do what you want here.')

    // The swiper instance.
    this.swiper

    // Default options for every carousels.
    this.defaultOptions
  }

  // You can set default options in this getter.
  get defaultOptions() {
    return {
      // Your default options here
    }
  }
}




---




Stimulus Character Counter
--------------------------

$ yarn add stimulus-character-counter



app/javascript/controllers/index.js
-----------------------------------

import { Application } from 'stimulus'
import CharacterCounter from 'stimulus-character-counter'

const application = Application.start()
application.register('character-counter', CharacterCounter)




view.html.erb
-------------

<div data-controller="character-counter">
  <textarea data-character-counter-target="input"></textarea>

  <p>
    There are
    <strong data-character-counter-target="counter"></strong> characters in this textarea.
  </p>
</div>



or



<div data-controller="character-counter" data-character-counter-countdown-value="true">
  <textarea data-character-counter-target="input" maxlength="280"></textarea>

  <p>
    There are
    <strong data-character-counter-target="counter"></strong> characters remaining.
  </p>
</div>




Extending Controller
--------------------

import CharacterCounter from 'stimulus-character-counter'

export default class extends CharacterCounter {
  connect() {
    super.connect()
    console.log('Do what you want here.')

    this.count // Will return the number of characters in the input/texterea.
  }
}




---




Stimulus Chartjs
----------------

$ yarn add stimulus-chartjs



app/javascript/controllers/index.js
-----------------------------------

import { Application } from 'stimulus'
import Chart from 'stimulus-chartjs'

const application = Application.start()
application.register('chart', Chart)




view.html.erb
-------------

<canvas
  data-controller="chart"
  data-chart-data-value='{
    "labels": ["January", "February", "March", "April", "May", "June", "July"], "datasets": [{ 
      "label": "My First dataset", "backgroundColor": "transparent", "borderColor": "#3B82F6", "data": [37, 83, 78, 54, 12, 5, 99] 
    }] 
  }'
>
</canvas>



<div
  data-controller="chart"
  data-chart-data-value='{ 
    "labels": ["January", "February", "March", "April", "May", "June", "July"], "datasets": [{ 
      "label": "My First dataset", "backgroundColor": "transparent", "borderColor": "#3B82F6", "data": [37, 83, 78, 54, 12, 5, 99] 
    }] 
  }'
>
  <canvas data-chart-target="canvas"></canvas>

  <!-- You need to define this action -->
  <button data-action="chart#update">Update me!</button>
</div>




controller.rb
-------------

class ChartsController < ApplicationController
  def index
    @chart_data = {
      labels: %w[January February March April May June July],
      datasets: [{
        label: 'My First dataset',
        backgroundColor: 'transparent',
        borderColor: '#3B82F6',
        data: [37, 83, 78, 54, 12, 5, 99]
      }]
    }

    @chart_options = {
      scales: {
        yAxes: [{
          ticks: {
            beginAtZero: true
          }
        }]
      }
    }
  end
end



view.html.erb
-------------

<canvas
  data-controller="chart"
  data-chart-data-value="<%= @chart_data.to_json %>"
  data-chart-options-value="<%= @chart_options.to_json %>"
></canvas>




---




Stimulus Checkbox Select All
----------------------------

$ yarn add stimulus-checkbox-select-all



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import CheckboxSelectAll from 'stimulus-checkbox-select-all'

const application = Application.start()
application.register('checkbox-select-all', CheckboxSelectAll)




models.rb
---------

class User < ApplicationRecord
  has_many :teams
end

class Team < ApplicationRecord
  belongs_to :user
end




controller.rb
-------------

class UsersController < ApplicationController
  def update
    if user.update(user_params)
      redirect_to users_path
    else
      render :edit
    end
  end

  private

  def user_params
    params
      .require(:user)
       .permit(
         team_ids: []
       )
  end
end




view.html.erb
-------------

<%= form_with model: @user, data: { controller: 'checkbox-select-all' } do |f| %>
  <label>
    <input type="checkbox" data-checkbox-select-all-target="checkboxAll" />
    <span>Select All / Deselect All</span>
  </label>

  <%= f.collection_check_boxes :team_ids, Team.all, :id, :name do |b| %>
    <%= b.label do %>
      <%= b.check_box data: { checkbox_select_all_target: 'checkbox' } %>
      <%= b.text %>
    <% end %>
  <% end %>
<% end %>




Extending Controller
--------------------

import CheckboxSelectAll from 'stimulus-checkbox-select-all'

export default class extends CheckboxSelectAll {
  connect() {
    super.connect()
    console.log('Do what you want here.')

    // Get all checked checkboxes
    this.checked

    // Get all unchecked checkboxes
    this.unchecked
  }
}




---




Stimulus Clipboard
------------------

$ yarn add stimulus-clipboard



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Clipboard from 'stimulus-clipboard'

const application = Application.start()
application.register('clipboard', Clipboard)




view.html.erb
-------------

<div data-controller="clipboard" data-clipboard-success-content-value="Copied!">
  <input type="text" value="Click the button to copy me!" data-clipboard-target="source" />

  <button type="button" data-action="clipboard#copy" data-clipboard-target="button">Copy to clipboard</button>
</div>




Extending Controller
--------------------

import Clipboard from 'stimulus-clipboard'

export default class extends Clipboard {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }

  // Function to override on copy.
  copy() {}

  // Function to override when to input is copied.
  copied() {
    //
  }
}




---




Stimulus Color Picker
---------------------

$ yarn add stimulus-color-picker



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import ColorPicker from 'stimulus-color-picker'

const application = Application.start()
application.register('color-picker', ColorPicker)




application.js
--------------

import '@simonwep/pickr/dist/themes/classic.min.css'
// import '@simonwep/pickr/dist/themes/monolith.min.css'
// import '@simonwep/pickr/dist/themes/nano.min.css'



or



some.scss
---------

@import '~@simonwep/pickr/dist/themes/classic.min.css'
// @import '~@simonwep/pickr/dist/themes/monolith.min.css'
// @import '~@simonwep/pickr/dist/themes/nano.min.css'




view.html.erb
-------------

<div data-controller="color-picker">
  <input type="hidden" name="color" value="#667EEA" data-color-picker-target="input" />

  <div data-color-picker-target="button"></div>
</div>




Extending Controller
--------------------

import ColorPicker from 'stimulus-color-picker'

export default class extends ColorPicker {
  connect() {
    super.connect()
    console.log('Do what you want here.')

    // Pickr instance
    this.picker
  }

  // Callback when the color is saved
  onSave(color) {
    super.onSave(color)
  }

  // You can override the components options with this getter.
  // Here are the default options.
  get componentOptions() {
    return {
      preview: true,
      hue: true,

      interaction: {
        input: true,
        clear: true,
        save: true,
      },
    }
  }

  // You can override the swatches with this getter.
  // Here are the default options.
  get swatches() {
    return [
      '#A0AEC0',
      '#F56565',
      '#ED8936',
      '#ECC94B',
      '#48BB78',
      '#38B2AC',
      '#4299E1',
      '#667EEA',
      '#9F7AEA',
      '#ED64A6',
    ]
  }
}




---




Stimulus Content Loader
-----------------------

$ yarn add stimulus-content-loader



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import ContentLoader from 'stimulus-content-loader'

const application = Application.start()
application.register('content-loader', ContentLoader)




controller.rb
-------------

class PostsController < ApplicationController
  def comments
    render partial: 'posts/comments', locals: { comments: @post.comments }
  end
end




routes.rb
---------

Rails.application.routes.draw do
  get :comments, to: 'posts#comments'
end




view.html.erb
-------------

<div data-controller="content-loader" data-content-loader-url-value="<%= comments_path %>">
  <i class="fas fa-spinner fa-spin"></i>
  Loading comments... This content will be replaced by the content of the `posts/comments` partial generated by Rails.
</div>

<div
  data-controller="content-loader"
  data-content-loader-url-value="<%= comments_path %>"
  data-content-loader-refresh-interval-value="5000"
>
  This content will be reloaded every 5 seconds.
</div>

<div
  data-controller="content-loader"
  data-content-loader-url-value="/message.html"
  data-content-loader-load-scripts-value="true"
>
  This content will be replaced by the content of the `/message.html` page in your public folder.
</div>

<div
  data-controller="content-loader"
  data-content-loader-url-value="/message.html"
  data-content-loader-lazy-loading-value=""
>
  This content will be replaced only when the element become visible thanks to Intersection Observers.
</div>

<div
  data-controller="content-loader"
  data-content-loader-url-value="/message.html"
  data-content-loader-lazy-loading-value=""
  data-content-loader-lazy-loading-root-margin-value="30px"
  data-content-loader-lazy-loading-threshold-value="0.4"
>
  You can customize the Intersection Observer options.
</div>

<div
  data-controller="content-loader"
  data-content-loader-url-value="/message.html"
  data-content-loader-lazy-loading-value=""
  data-content-loader-refresh-interval-value="5000"
>
  You can combine lazy loading and refresh interval. The timer will start only after the first fetch.




Extending Controller
--------------------

import ContentLoader from 'stimulus-content-loader'

export default class extends ContentLoader {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Dropdown
-----------------

$ yarn add stimulus-dropdown



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Dropdown from 'stimulus-dropdown'

const application = Application.start()
application.register('dropdown', Dropdown)




view.html.erb
-------------

<div data-controller="dropdown" class="relative">
  <button type="button" data-action="dropdown#toggle click@window->dropdown#hide">Options</button>

  <div
    data-dropdown-target="menu"
    class="hidden transition transform origin-top-right absolute right-0"
    data-transition-enter-from="opacity-0 scale-95"
    data-transition-enter-to="opacity-100 scale-100"
    data-transition-leave-from="opacity-100 scale-100"
    data-transition-leave-to="opacity-0 scale-95"
  >
    <a href="#" data-action="dropdown#toggle">Account settings</a>
    <a href="#" data-action="dropdown#toggle">Support</a>
    <a href="#" data-action="dropdown#toggle">License</a>
  </div>
</div>




Extending Controller
--------------------

import Dropdown from 'stimulus-dropdown'

export default class extends Dropdown {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }

  toggle(event) {
    super.toggle()
  }

  hide(event) {
    super.hide(event)
  }
}




---




Stimulus Glow
-------------

$ yarn add stimulus-glow



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Glow from 'stimulus-glow'

const application = Application.start()
application.register('glow', Glow)




tailwind.config.js
------------------

const plugin = require('tailwindcss/plugin')

module.exports = {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],

  plugins: [
    plugin(
      ({ addVariant }) => {
        addVariant('glow', '.glow-capture .glow-overlay &')
      },
      {
        theme: {
          extend: {
            colors: {
              glow: 'color-mix(in srgb, var(--glow-color) calc(<alpha-value> * 100%), transparent)',
            },
          },
        },
      },
    ),
  ],
}




styles.css
----------

.glow-overlay {
  --glow-size: 25rem; /* Change here the size of the glow effect */

  position: absolute;
  inset: 0;
  pointer-events: none;
  user-select: none;
  opacity: var(--glow-opacity, 0);
  mask: radial-gradient(
    var(--glow-size) var(--glow-size) at var(--glow-x) var(--glow-y),
    var(--glow-color) 1%,
    transparent 50%
  );
  transition: 400ms mask ease;
  will-change: mask;
}




view.html.erb
-------------

<div data-controller="glow" class="relative glow-capture">
  <div data-glow-target="child" class="glow glow:ring-1 glow:border-glow glow:ring-glow glow:bg-glow/[.15]">
    <h2 class="font-bold text-2xl mb-4 text-gray-200 glow:text-glow/[.8]">Chicken Shawarma & Veggies</h2>

    <p class="text-sm text-gray-300 glow:text-glow">Vitae ducimus harum earum ratione autem esse ea!</p>

    <button class="glow:text-glow glow:border-glow glow:ring glow:ring-glow">Add to cart</button>
  </div>

  <div data-glow-target="overlay" class="glow-overlay" style="--glow-color: #f97316"></div>
</div>




Extending Controller
--------------------

import Glow from 'stimulus-glow'

export default class extends Glow {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Lightbox
-----------------

$ yarn add stimulus-lightbox



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Lightbox from 'stimulus-lightbox'

const application = Application.start()
application.register('lightbox', Lightbox)




lightgallery.css
----------------

application.js
--------------

import 'lightgallery/css/lightgallery.css'



or



sass
----

@import '~lightgallery/scss/lightgallery'




view.html.erb
-------------

<div data-controller="lightbox">
  <a href="img/img1.jpg">
    <img src="img/img1.jpg" alt="" />
  </a>

  <a href="img/img2.jpg">
    <img src="img/img2.jpg" alt="" />
  </a>

  <a href="img/img3.jpg">
    <img src="img/img3.jpg" alt="" />
  </a>
</div>



or



<div data-controller="lightbox" data-lightbox-options-value='{"index": 2}'>
  <a href="img/img1.jpg">
    <img src="img/img1.jpg" alt="" />
  </a>

  <a href="img/img2.jpg">
    <img src="img/img2.jpg" alt="" />
  </a>

  <a href="img/img3.jpg">
    <img src="img/img3.jpg" alt="" />
  </a>
</div>




Extending Controller
--------------------

import Lightbox from 'stimulus-lightbox'

export default class extends Lightbox {
  connect() {
    super.connect()
    console.log('Do what you want here.')

    // Get the lightgallery instance
    this.lightGallery

    // Default options for every lightboxes.
    this.defaultOptions
  }

  // You can set default options in this getter.
  get defaultOptions() {
    return {
      // Your default options here
    }
  }
}




---




Stimulus Notification
---------------------

$ yarn add stimulus-notification




app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Notification from 'stimulus-notification'

const application = Application.start()
application.register('notification', Notification)




view.html.erb
-------------

<div
  data-controller="notification"
  data-notification-delay-value="2000"
  class="transition transform duration-1000 hidden"
  data-transition-enter-from="opacity-0 translate-x-6"
  data-transition-enter-to="opacity-100 translate-x-0"
  data-transition-leave-from="opacity-100 translate-x-0"
  data-transition-leave-to="opacity-0 translate-x-6"
>
  <p>This alert will magically disappear!</p>

  <button data-action="notification#hide">Close</button>
</div>




<div
  data-controller="notification"
  data-notification-hidden-value="true"
  data-action="awesome@window->notification#show"
  class="transition transform duration-1000 hidden"
  data-transition-enter-from="opacity-0 translate-x-6"
  data-transition-enter-to="opacity-100 translate-x-0"
  data-transition-leave-from="opacity-100 translate-x-0"
  data-transition-leave-to="opacity-0 translate-x-6"
>
  <p>This alert will magically disappear!</p>

  <button data-action="notification#hide">Close</button>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const event = new CustomEvent('awesome')

    window.dispatchEvent(event)
  })
</script>




Extending Controller
--------------------

import Notification from 'stimulus-notification'

export default class extends Notification {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Password Visibility
----------------------------

$ yarn add stimulus-password-visibility



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import PasswordVisibility from 'stimulus-password-visibility'

const application = Application.start()
application.register('password-visibility', PasswordVisibility)




view.html.erb
-------------

<div data-controller="password-visibility">
  <input type="password" data-password-visibility-target="input" spellcheck="false" />

  <button type="button" data-action="password-visibility#toggle">
    <span data-password-visibility-target="icon">Eye</span>
    <span data-password-visibility-target="icon" class="hidden">Eye Slash</span>
  </button>
</div>



Extending Controller
--------------------

import PasswordVisibility from 'stimulus-password-visibility'

export default class extends PasswordVisibility {
  connect() {
    super.connect()

    // Do what you want here.
  }

  toggle(event) {
    super.toggle()

    // Do what you want here
  }
}




---




Stimulus Places Autocomplete
----------------------------

$ yarn add stimulus-places-autocomplete



app/javascript/controllers/index.js
-----------------------------------

import { Application } from 'stimulus'
import PlacesAutocomplete from 'stimulus-places-autocomplete'

const application = Application.start()
application.register('places', PlacesAutocomplete)




view.html.erb
-------------

<head>
  <script
    src="https://maps.googleapis.com/maps/api/js?key={your_key_here}&libraries=places&callback=initAutocomplete"
    async=""
    defer=""
  ></script>
</head>


window.initAutocomplete = function () {
  const event = new Event('google-maps-callback', {
    bubbles: true,
    cancelable: true,
  })
  window.dispatchEvent(event)
}




view.html.erb
-------------

<div
  data-controller="places"
  data-action="google-maps-callback@window->places#initAutocomplete"
  data-places-country-value='["fr"]'
>
  <input
    type="text"
    data-action="keydown->places#preventSubmit"
    data-places-target="address"
    placeholder="Search a location"
  />

  <input type="hidden" data-places-target="city" />
  <input type="hidden" data-places-target="streetNumber" />
  <input type="hidden" data-places-target="route" />
  <input type="hidden" data-places-target="county" />
  <input type="hidden" data-places-target="state" />
  <input type="hidden" data-places-target="postalCode" />
  <input type="hidden" data-places-target="country" />

  <input type="hidden" data-places-target="longitude" />
  <input type="hidden" data-places-target="latitude" />
</div>




Extending Controller
--------------------

import PlacesAutocomplete from 'stimulus-places-autocomplete'

export default class extends PlacesAutocomplete {
  connect() {
    super.connect()
    console.log('Do what you want here.')

    // The google.maps.places.Autocomplete instance.
    this.autocomplete
  }

  // You can override the `initAutocomplete` method here.
  initAutocomplete() {
    super.initAutocomplete()
  }

  // You can override the `placeChanged` method here.
  placeChanged() {
    super.placeChanged()
  }

  // You can set the Autocomplete options in this getter.
  get autocompleteOptions() {
    return {
      fields: ['address_components', 'geometry'],
    }
  }
}




---




Stimulus Popover
----------------

$ yarn add stimulus-popover



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Popover from 'stimulus-popover'

const application = Application.start()
application.register('popover', Popover)




controller.rb
-------------

class UsersController < ApplicationController
  def card
    render partial: 'users/card', locals: { user: @user }
  end
end




view.html.erb
-------------

<div data-controller="popover" data-popover-url-value="<%= card_path %>">
  You can load popover with AJAX. For instance, this is my
  <a href="/profile" data-action="mouseenter->popover#show mouseleave->popover#hide">profile card</a>
</div>




<div data-popover-target="card">
  <p>This content is loaded with AJAX.</p>
</div>



<div data-controller="popover">
  This is my Github card available on
  <a href="/profile" data-action="mouseenter->popover#show mouseleave->popover#hide"> Github </a>

  <template data-popover-target="content">
    <div data-popover-target="card">
      <p>This content is in a hidden template.</p>
    </div>
  </template>
</div>




Extending Controller
--------------------

import Popover from 'stimulus-popover'

export default class extends Popover {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Prefetch
-----------------

$ yarn add stimulus-prefetch



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Prefetch from 'stimulus-prefetch'

const application = Application.start()
application.register('prefetch', Prefetch)




view.html.erb
-------------

<a href="/about" data-controller="prefetch">About</a>.




Extending Controller
--------------------

import Prefetch from 'stimulus-prefetch'

export default class extends Prefetch {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Rails Autosave
-----------------------

$ yarn add stimulus-rails-autosave



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Autosave from 'stimulus-rails-autosave'

const application = Application.start()
application.register('autosave', Autosave)




view.html.erb
-------------

<%= form_with model: @todo, data: { controller: 'autosave' } do |f| %>
  <div class="field">
    <%= f.label :description %>

    <!-- With custom event! -->
    <%= f.text_field :description, data: { action: 'keyup->autosave#save' } %>
  </div>

  <div class="field">
    <%= f.label :completed %>
    <%= f.check_box :completed, data: { action: 'autosave#save' } %>
  </div>

  <%= f.submit %>
<% end %>




Extending Controller
--------------------

import Autosave from 'stimulus-rails-autosave'

export default class extends Autosave {
  static values = {
    delay: {
      type: Number,
      default: 1000, // You can change the default delay here.
    },
  }

  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Rails Nested Form
--------------------------

$ yarn add stimulus-rails-nested-form



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import NestedForm from 'stimulus-rails-nested-form'

const application = Application.start()
application.register('nested-form', NestedForm)




models.rb
---------

class User < ApplicationRecord
  has_many :todos
  accepts_nested_attributes_for :todos, reject_if: :all_blank, allow_destroy: true
end

class Todo < ApplicationRecord
  belongs_to :user
end




controller.rb
-------------

class UsersController < ApplicationController
  def update
    if user.update(user_params)
      redirect_to users_path
    else
      render :edit
    end
  end

  private

  def user_params
    params
      .require(:user)
       .permit(
         todos_attributes: [:id, :_destroy, :description]
       )
  end
end




view.html.erb
-------------

<%= form_with model: @user, data: { controller: 'nested-form', nested_form_wrapper_selector_value: '.nested-form-wrapper' } do |f| %>
  <template data-nested-form-target="template">
    <%= f.fields_for :todos, Todo.new, child_index: 'NEW_RECORD' do |todo_fields| %>
      <%= render "todo_form", f: todo_fields %>
    <% end %>
  </template>

  <%= f.fields_for :todos do |todo_fields| %>
    <%= render "todo_form", f: todo_fields %>
  <% end %>

  <!-- Inserted elements will be injected before that target. -->
  <div data-nested-form-target="target"></div>

  <button type="button" data-action="nested-form#add">Add todo</button>

  <%= f.submit 'Save todos' %>
<% end %>




_partial.html.erb
-----------------

<div class="nested-form-wrapper" data-new-record="<%= f.object.new_record? %>">
  <%= f.label :description %>
  <%= f.text_field :description %>

  <button type="button" data-action="nested-form#remove">Remove todo</button>

  <%= f.hidden_field :_destroy %>
</div>




Extending Controller
--------------------

import NestedForm from 'stimulus-rails-nested-form'

export default class extends NestedForm {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---





Stimulus Read More
------------------

$ yarn add stimulus-read-more



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import ReadMore from 'stimulus-read-more'

const application = Application.start()
application.register('read-more', ReadMore)




styles.css
----------

.my-content {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: var(--read-more-line-clamp, 2);
}




view.html.erb
-------------

<div data-controller="read-more" data-read-more-more-text-value="Read more" data-read-more-less-text-value="Read less">
  <p class="my-content" data-read-more-target="content">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna
    aliqua. Ut enim ad minim veniam.
  </p>

  <button data-action="read-more#toggle">Read more</button>
</div>




Extending Controller
--------------------

import ReadMore from 'stimulus-read-more'

export default class extends ReadMore {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }

  // Function to override on toggle.
  toggle(event) {}

  // Function to override when the text is shown.
  show(event) {}

  // Function to override when the text is hidden.
  hide(event) {}
}




---




Stimulus Remote Rails
---------------------

$ yarn add stimulus-remote-rails



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Remote from 'stimulus-remote-rails'

const application = Application.start()
application.register('remote', Remote)




controller.rb
-------------

class CommentsController < ApplicationController
  def create
    @comment = Comment.new(comment_params)

    if @comment.save
      render @comment
    else
      render partial: 'comments/form', locals: { comment: @comment }, status: :unprocessable_entity
    end
  end

  private

  def comment_params
    params
      .require(:comment)
      .permit(:content)
  end
end




view.html.erb
-------------

<%= form_with model: @comment, data: { controller: 'remote', action: 'ajax:success->remote#append ajax:error->remote#replace' } do |f| %>
  <% if f.object.errors.any? %>
    <% f.object.errors.full_messages.each do |error| %>
      <p><%= error %></p>
    <% end %>
  <% end %>

  <%= f.label :content %>
  <%= f.text_field :content %>

  <%= f.submit 'Save comment' %>
<% end %>




<%= link_to 'Click me to append content', content_path, remote: true, data: { controller: 'remote', action: 'ajax:success->remote#append' } %>
<%= link_to 'Click me to prepend content', content_path, remote: true, data: { controller: 'remote', action: 'ajax:success->remote#prepend' } %>
<%= link_to 'Click me to replace content', content_path, remote: true, data: { controller: 'remote', action: 'ajax:success->remote#replace' } %>




Extending Controller
--------------------

import Remote from 'stimulus-remote-rails'

export default class extends Remote {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Reveal Controller
--------------------------

$ yarn add stimulus-reveal-controller



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Reveal from 'stimulus-reveal-controller'

const application = Application.start()
application.register('reveal', Reveal)




view.html.erb
-------------

toggle
------

<div data-controller="reveal" data-reveal-hidden-class="d-none">
  <button data-action="click->reveal#toggle" type="button" class="btn">Toggle me!</button>

  <p data-reveal-target="item" class="d-none mt-4">Hey 👋</p>
  <p data-reveal-target="item" class="d-none mt-4">You can have multiple items</p>
</div>




show
----

<div data-controller="reveal">
  <button data-action="click->reveal#show" type="button" class="btn">Show me!</button>

  <p data-reveal-target="item" class="hidden mt-4">Hey 👋</p>
</div>




hiede
-----

<div data-controller="reveal">
  <button data-action="click->reveal#hide" type="button" class="btn">Hide me!</button>

  <p data-reveal-target="item" class="mt-4">Hey 👋</p>
</div>




Extending Controller
--------------------

import Reveal from 'stimulus-reveal-controller'

export default class extends Reveal {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Scroll Progress
------------------------

$ yarn add stimulus-scroll-progress




app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import ScrollProgress from 'stimulus-scroll-progress'

const application = Application.start()
application.register('scroll-progress', ScrollProgress)




view.html.erb
-------------

<body>
  <div data-controller="scroll-progress" class="h-2 bg-indigo-400 fixed top-0"></div>
</body>




Extending Controller
--------------------

import ScrollProgress from 'stimulus-scroll-progress'

export default class extends ScrollProgress {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Scroll Reveal
----------------------

$ yarn add stimulus-scroll-reveal




app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import ScrollReveal from 'stimulus-scroll-reveal'

const application = Application.start()
application.register('scroll-reveal', ScrollReveal)




view.html.erb
-------------

<div data-controller="scroll-reveal">
  <p data-scroll-reveal-target="item" class="reveal">Hello</p>
  <p data-scroll-reveal-target="item" class="reveal" data-delay="250ms">World!</p>
</div>




<div
  data-controller="scroll-reveal"
  data-scroll-reveal-class-value="active fade"
  data-scroll-reveal-threshold-value="0.9"
  data-scroll-reveal-root-margin-value="10px"
>
  <p data-scroll-reveal-target="item" class="reveal">With custom</p>
  <p data-scroll-reveal-target="item" class="reveal">options!</p>
</div>





styles.css
----------

<style>
  .reveal {
    opacity: 0;
    transform: translateY(20px);
    transition: 1s cubic-bezier(0.5, 0, 0, 1);
    transition-property: opacity, transform;
  }

  .reveal.in {
    opacity: 1;
    transform: none;
  }
</style>




Extending Controller
--------------------

import ScrollReveal from 'stimulus-scroll-reveal'

export default class extends ScrollReveal {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }

  // Override this method to change the IntersectionObserver behavior
  intersectionObserverCallback(entries, observer) {
    //
  }

  // Options used for the IntersectionObserver
  get intersectionObserverOptions() {
    return {}
  }

  // You can override this getter to set your default options here.
  get defaultOptions() {
    return {
      class: 'active',
      threshold: 0.5,
      rootMargin: '100px',
    }
  }
}




---




Stimulus Scroll To
------------------

$ yarn add stimulus-scroll-to




app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import ScrollTo from 'stimulus-scroll-to'

const application = Application.start()
application.register('scroll-to', ScrollTo)




view.html.erb
-------------

<a href="#awesome-stuff-here" data-controller="scroll-to">Scroll to #awesome-stuff-here</a>
<h2 id="awesome-stuff-here">Awesome stuff here</h2>




<a
  href="#awesome-stuff-here"
  data-controller="scroll-to"
  data-scroll-to-offset-value="150"
  data-scroll-to-behavior-value="auto"
  >Scroll to #awesome-stuff-here</a
>

<h2 id="awesome-stuff-here">Awesome stuff here</h2>




Extending Controller
--------------------

import ScrollTo from 'stimulus-scroll-to'

export default class extends ScrollTo {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }

  // You can set default options in this getter for all your anchors.
  get defaultOptions() {
    return {
      offset: 100,
      behavior: 'auto',
    }
  }
}




---




Stimulus Sortable
-----------------

$ yarn add stimulus-sortable sortablejs @rails/request.js




app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Sortable from 'stimulus-sortable'

const application = Application.start()
application.register('sortable', Sortable)




model.rb
--------

class Todo < ApplicationRecord
  acts_as_list # Or with a custom position system.
end




controller.rb
-------------

class TodosController < ApplicationController
  def update
    # Do what you want with todo_params.
  end

  private

  def todo_params
    params.require(:todo).permit(:position)
  end
end




view.html.erb
-------------

<ul data-controller="sortable" data-sortable-animation-value="150">
  <li>Pet the cat</li>
  <li>Get the groceries</li>
</ul>




With custom handler
-------------------

<ul data-controller="sortable" data-sortable-handle-value=".handle">
  <li>
    <svg class="handle"></svg>
    Pet the cat
  </li>

  <li>
    <svg class="handle"></svg>
    Get the groceries
  </li>
</ul>




With AJAX call
--------------

<ul data-controller="sortable" data-sortable-resource-name-value="todo">
  <%= @todos.each do |todo| %>
    <!-- <li data-sortable-update-url="/todos/1">Pet the cat</li> -->
    <li data-sortable-update-url="<%= todo_path(todo) %>"><%= todo.description %></li>
  <% end %>
</ul>




Extending Controller
--------------------

import Sortable from 'stimulus-sortable'

export default class extends Sortable {
  connect() {
    super.connect()
    console.log('Do what you want here.')

    // The sortable.js instance.
    this.sortable

    // Your options
    this.options

    // Your default options
    this.defaultOptions
  }

  // You can override the `onUpdate` method here.
  onUpdate(event) {
    super.onUpdate(event)
  }

  // You can set default options in this getter for all sortable elements.
  get defaultOptions() {
    return {
      animation: 500,
    }
  }
}




---




Stimulus Sound
--------------

$ yarn add stimulus-sound



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Sound from 'stimulus-sound'

const application = Application.start()
application.register('sound', Sound)




view.html.erb
-------------

<div data-controller="sound" data-sound-url-value="/path/to/your/sound.mp3">
  <button type="button" data-action="sound#play">▶️ Play</button>
  <button type="button" data-action="sound#pause">⏸️ Pause</button>
  <button type="button" data-action="sound#reset">⏹️ Reset</button>
  <button type="button" data-action="sound#muted" data-sound-muted-param="true">🔇 Mute</button>
  <button type="button" data-action="sound#muted" data-sound-muted-param="false">🔈 Unmute</button>
  <button type="button" data-action="sound#loop" data-sound-loop-param="true">🔁 Loop</button>
  <button type="button" data-action="sound#volume" data-sound-volume-param="1">🔊 Volume to 100%</button>
  <button type="button" data-action="sound#volume" data-sound-volume-param="0.25">🔉 Volume to 25%</button>
</div>




Extending Controller
--------------------

import Sound from 'stimulus-sound'

export default class extends Sound {
  connect() {
    super.connect()
    console.log('Do what you want here.')

    // The HTMLAudioElement instance.
    // See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement
    // You can fetch any attribute on it if needed.
    this.sound
  }
}




---




Stimulus Textarea Autogrow
--------------------------

$ yarn add stimulus-textarea-autogrow



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import TextareaAutogrow from 'stimulus-textarea-autogrow'

const application = Application.start()
application.register('textarea-autogrow', TextareaAutogrow)




view.html.erb
-------------

<textarea data-controller="textarea-autogrow">
Very long text here.
</textarea>

<textarea data-controller="textarea-autogrow" data-textarea-autogrow-resize-debounce-delay-value="500">
Very long text here.
</textarea>




Extending Controller
--------------------

import TextareaAutogrow from 'stimulus-textarea-autogrow'

export default class extends TextareaAutogrow {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }
}




---




Stimulus Timeago
----------------

$ yarn add stimulus-timeago



app/javascript/controllers/index.js
-----------------------------------

import { Application } from '@hotwired/stimulus'
import Timeago from 'stimulus-timeago'

const application = Application.start()
application.register('timeago', Timeago)




view.html.erb
-------------

<p>
  Stimulus 1.0.0 was released
  <time data-controller="timeago" data-timeago-datetime-value="2018-01-30T09:00"></time>.
</p>




helper.rb
---------

def timeago(date, format: :long)
  return if date.blank?

  content = I18n.l(date, format: format)
  tag.time(content, title: content, data: { controller: 'timeago', timeago_datetime_value: date.iso8601 })
end




view.html.erb
-------------

<p>Created <%= timeago(@project.created_at) %></p>




Extending Controller
--------------------

import Timeago from 'stimulus-timeago'
import { fr } from 'date-fns/locale'

export default class extends Timeago {
  connect() {
    super.connect()
    console.log('Do what you want here.')
  }

  // You can override this getter to change the locale.
  // Don't forget to import it.
  get locale() {
    return fr
  }
}




https://www.stimulus-components.com/docs/stimulus-animated-number









-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Openssl
-------

$ openssl req -x509 -sha256 -nodes -newkey rsa:2048 -keyout localhost.key -out localhost.crt -subj "/CN=localhost" -days 365



puma.rb
-------

ssl_bind '0.0.0.0', '3001', {
  key:  ENV.fetch("SSL_KEY_PATH") { "config/ssl/localhost.key" },
  cert: ENV.fetch("SSL_CERT_PATH") { "config/ssl/localhost.crt" },
}







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










































































































































































































































































































































































































