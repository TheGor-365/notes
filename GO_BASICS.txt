---------
GO BASICS
---------









-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

hello world
-----------


package main

import "fmt"

func main() {
  fmt.Print("Hello, World!")
}




---






package main





---






func main() {
}




---






import "fmt"




---






fmt.Print("Hello, World!")




---





package pkg

import "fmt"

func HelloWorld() {
  fmt.Print("Hello, World!")
}








-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

go syntax
---------




import (
    "encoding/json"
    "errors"
    "fmt"
)

type Message struct {
    Sender string `json:"sender"` // —Å—Ç–∞–≤–∏–º —Ç–µ–≥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º JSON –ø–æ–ª—è
    Text   string `json:"text"`
}

var errEmptyMessage = errors.New("empty message")

func DecodeJSON(rawMsg string) (Message, error) {
    // –µ—Å–ª–∏ –Ω–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –æ–± —ç—Ç–æ–º
    if len(rawMsg) == 0 {
        return Message{}, errEmptyMessage
    }

    msg := Message{}

    err := json.Unmarshal([]byte(rawMsg), &msg)
    if err != nil {
        return Message{}, fmt.Errorf("unmarshal: %w", err)
    }

    return msg, nil
}




---






func main() {
    msg, err := DecodeJSON("")
    if errors.Is(err, errEmptyMessage) {
        // { } empty message
        fmt.Println(msg, err)
    }

    msg, err = DecodeJSON("hello")
    if err != nil {
        // { } unmarshal: invalid character 'h' looking for beginning of value
        fmt.Println(msg, err)
    }

    msg, err = DecodeJSON(`{"sender":"hexlet","text":"Go,Go,Go"}`)
    // {hexlet Go,Go,Go} <nil>
    fmt.Println(msg, err)
}




---






import (
    "fmt"
    "sync"
)

func main() {
    mu := sync.Mutex{}
    wg := sync.WaitGroup{}

    sum := 0
    for i := 0; i < 10; i++ {
        wg.Add(1)

        go func() {
            n := externalHTTPNum()

            mu.Lock()
            sum += n
            mu.Unlock()

            wg.Done()
        }()
    }

    wg.Wait()

    fmt.Println(sum) // 55
}










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

variables
---------




var num int = 11

var num = 11




---






// –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

num := 22
num = 33




---







num := 22
// –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É: cannot use "string" (type untyped string) as type int in assignment
num = "string"




---






longTrickyName := "Josefina"




---






var (
  a string  // ""
  b bool    // false
  c int     // 0
)




---







package math

import "errors"

// —Å—Ç–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
var errCannotSum = errors.New("cannot sum")

func sum(...)




---






// –ù–ï Go way
message := "üëé"
buffer := bytes.Buffer{}

// Go way
msg := "üëç"
buf := bytes.Buffer{}




---





package pkg

import "fmt"

func PrintName() {
  firstName := "John"
  lastName := "Smith"

  fmt.Print(firstName + " " + lastName)
}






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

functions
---------




func multiply(x int, y int) int {
    return x * y
}




---






package math

func Multiply(x int, y int) int {
}

func divide(x int, y int) int {
}




---






package math

import "errors"

func divide(x, y int) (int, error) {
    if y == 0 {
        return 0, errors.New("cannot divide on zero")
    }

    return x / y, nil
}




---






func multiply(x, y int) (res int) {
    res = x * y
    return
}




---






import "fmt"

func myPrint(msg string) {
    // –ø–∞–∫–µ—Ç.—Ñ—É–Ω–∫—Ü–∏—è
    fmt.Println(msg)
}




---




package pkg

import "strconv"

func IntToString(x int) string {
  return strconv.Itoa(x)
}









-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

numbers and operations with them
--------------------------------




x := 10
y := 5

x + y
x - y
x / y
x * y




---






x := 5.05
y := 10

x + y  // invalid operation: x + y (mismatched types float64 and int)




---




x := 5.05
y := 10

x + float64(y)




---




x := int64(5.05)      // –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: constant 5.05 truncated to integer

x := int64(5.00)      // OK

// uint –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
x := uint(-5)         // constant -5 overflows uint




---






a, _ := strconv.Atoi("-42")
x := uint(a)          // 18446744073709551574

a, _ := strconv.Atoi("5.05")
x := int(a)           // 0




---















-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

logic types
-----------




&& - –∏

== - —Ä–∞–≤–Ω–æ

|| - –∏–ª–∏

!  - –Ω–µ




---




true && false
false || true




---






var b bool = true

bs := false




---




true == false

false == false




---






true == "hello"         // invalid operation: false == "hello" (mismatched types untyped bool and untyped string)




---







flag := true
text := "hello"

flag && bool(text)      // cannot convert text (type string) to type bool

flag && text != ""




---














-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strings
-------




var s string = "hello"

s := "hey"




---






q := `
    SELECT *
    FROM person
    WHERE age > 18
`




---




"–ø—Ä–∏–≤–µ—Ç" == "–ø—Ä–∏–≤–µ—Ç"
"golang" > "go"
"golang" > "lang"
"go" > "foobar"




---




"hello " + "world"




---




username := "Ivan"

greetings := fmt.Sprintf("hello, %s", username)




---




len("go")

len("–≥–æ")




---















-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

conditional constructions
-------------------------




if "hi" { // non-bool "hi" (type string) used as if condition
}




---






package main

import (
    "fmt"
    "strings"
)

func statusByName(name string) string {
    if strings.HasPrefix(name, "Mr.") {
        return "married man"
    } else if strings.HasPrefix(name, "Mrs.") {
        return "married woman"
    } else {
        return "single person"
    }
}

func main() {
    n := "Mr. Doe"
    fmt.Println(n + " is a " + statusByName(n))

    n = "Mrs. Berry"
    fmt.Println(n + " is a " + statusByName(n))

    n = "Karl"
    fmt.Println(n + " is a " + statusByName(n))
}





---














-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

switch
------




x := 10

switch x {
    default:
        fmt.Println("default case")
    case 10:
        fmt.Println("case 10")
}
Output:

case 10




---






x := 10

switch {
    default:
        fmt.Println("default case")
    case x == 10:
        fmt.Println("equal 10 case")
        fallthrough
    case x <= 10:
        fmt.Println("less or equal 10 case")
}
Output:

equal 10 case
less or equal 10 case




---














-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

structures
----------




type Person struct {
    Name string
    Age int
}

func main() {
    p := Person{Name: "John", Age: 25}

    p.Name
    p.Age
}




---
















-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


































































