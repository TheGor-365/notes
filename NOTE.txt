TestHexletCode#test_form_with_submit_custom_name [/usr/share/rvm/rubies/ruby-3.2.2/lib/ruby/gems/3.2.0/gems/power_assert-2.0.3/lib/power_assert.rb:34]:
    assert { builder == form }
             |       |  |
             |       |  "<form action='#' method='post'>\n  
                          <label for='name'>Name</label>\n  
                          <input name='name' type='text' value='rob'>\n  
                          <label for='job'>Job</label>\n  
                          <input name='job' type='text' value='hexlet'>\n  
                          <input type='submit' value='Wow'>\n
                        </form>"

             |       false
             |
             "<form action='#' method='post'>\n  
                <label for='name'>Name</label>\n  
                <input name='name' type='text' value='rob'>\n  
                <label for='job'>Job</label>\n  
                <input name='job' type='text' value='hexlet'>\n  
                <input type='submit' name='Wow'>\n
              </form>"

rails test home/gor/Desktop/ruby_learn/ruby_experiments/tests/module_25.rb:121

.........F

Failure:
TestHexletCode#test_form_with_submit [/usr/share/rvm/rubies/ruby-3.2.2/lib/ruby/gems/3.2.0/gems/power_assert-2.0.3/lib/power_assert.rb:34]:
    assert { builder == form }
             |       |  |
             |       |  "<form action='#' method='post'>\n  
                          <label for='name'>Name</label>\n  
                          <input name='name' type='text' value='rob'>\n  
                          <label for='job'>Job</label>\n  
                          <input name='job' type='text' value='hexlet'>\n  
                          <input type='submit' value='Save'>\n
                        </form>"

             |       false
             |
             "<form action='#' method='post'>\n  
                <label for='name'>Name</label>\n  
                <input name='name' type='text' value='rob'>\n  
                <label for='job'>Job</label>\n  
                <input name='job' type='text' value='hexlet'>\n  
                <input type='submit' name='Save'>\n
              </form>"





---






<<~HTML.strip
      <form action="#" method="post">
        <label for="name">Name</label>
        <input name="name" type="text" value="">
        <label for="job">Job</label>
        <input name="job" type="text" value="hexlet">
        <input type="submit" value="Wow">
      </form>
    HTML





---



Database                        postgres_vmz5
Username                        postgres_vmz5_user
Password                        Wtz0ufSabK8Hl4NzgEjn6IsiAmnsPfAt
Internal Database URL           postgres://postgres_vmz5_user:Wtz0ufSabK8Hl4NzgEjn6IsiAmnsPfAt@dpg-cn56gkn109ks73dlvlu0-a/postgres_vmz5
External Database URL           postgres://postgres_vmz5_user:Wtz0ufSabK8Hl4NzgEjn6IsiAmnsPfAt@dpg-cn56gkn109ks73dlvlu0-a.oregon-postgres.render.com/postgres_vmz5
PSQL Command                    PGPASSWORD=Wtz0ufSabK8Hl4NzgEjn6IsiAmnsPfAt psql -h dpg-cn56gkn109ks73dlvlu0-a.oregon-postgres.render.com -U postgres_vmz5_user postgres_vmz5




---




WEB_RESUME environment

DATABASE_URL                            postgres://gordb_9vts_user:urGrRi9FQD7RttOlNfK9kxeCfTmDqcOy@dpg-cg8bi2ik728pus49bgag-a/gordb_9vts
DISABLE_DATABASE_ENVIRONMENT_CHECK      1
RAILS_MASTER_KEY                        ec6d7e5e3cc1c64e5a2c6b0d15bcd101
REDIS_URL                               redis://red-cg2cnb2k728reloj2ong:6379




---





fly.io

flyctl was installed successfully to /home/gor/.fly/bin/flyctl
Manually add the directory to your $HOME/.bash_profile (or similar)
  export FLYCTL_INSTALL="/home/gor/.fly"
  export PATH="$FLYCTL_INSTALL/bin:$PATH"
Run '/home/gor/.fly/bin/flyctl --help' to get started
 gor@gor  ~  export FLYCTL_INSTALL="/home/gor/.fly"
 gor@gor  ~  export PATH="$FLYCTL_INSTALL/bin:$PATH"
 gor@gor  ~  /home/gor/.fly/bin/flyctl --help
This is flyctl, the Fly.io command line interface.

Usage:
  flyctl [flags]
  flyctl [command]

Deploying apps & machines
  apps         Manage apps
  deploy       Deploy Fly applications
  launch       Create and configure a new app from source code or a Docker image
  machine      Manage Fly Machines.
  status       Show app status

Configuration & scaling
  certs        Manage certificates
  config       Manage an app's configuration
  image        Manage app image
  ips          Manage IP addresses for apps
  scale        Scale app resources
  secrets      Manage application secrets with the set and unset commands.
  volumes      Manage Fly Volumes.

Monitoring & managing things
  checks       Manage health checks
  console      Run a console in a new or existing machine
  dashboard    Open web browser on Fly Web UI for this app
  dig          Make DNS requests against Fly.io's internal DNS server
  logs         View app logs
  ping         Test connectivity with ICMP ping messages
  proxy        Proxies connections to a Fly Machine.
  releases     List app releases
  services     Show the application's services
  sftp         Get or put files from a remote VM.
  ssh          Use SSH to log into or run commands on Machines
  wireguard    Commands that manage WireGuard peer connections

Databases & extensions
  consul       Enable and manage Consul clusters
  extensions   Extensions are additional functionality that can be added to your Fly apps
  litefs-cloud LiteFS Cloud management commands
  planetscale  Provision and manage PlanetScale MySQL databases
  postgres     Manage Postgres clusters.
  redis        Launch and manage Redis databases managed by Upstash.com
  storage      Provision and manage Tigris object storage buckets

Access control
  auth         Manage authentication
  orgs         Commands for managing Fly organizations
  tokens       Manage Fly.io API tokens

Help & troubleshooting
  docs         View Fly documentation
  doctor       The DOCTOR command allows you to debug your Fly environment
  platform     Fly platform information

Additional Commands:
  agent        Commands that manage the Fly agent, a background process that manages flyctl wireguard connections
  completion   Generate the autocompletion script for the specified shell
  help         Help about any command
  jobs         Show jobs at Fly.io
  settings     Manage flyctl settings
  version      Show version information for the flyctl command

Flags:
  -t, --access-token string   Fly API Access Token
      --debug                 Print additional logs and traces
  -h, --help                  help for flyctl
      --verbose               Verbose output

Use "flyctl [command] --help" for more information about a command.





---




----------
render.com
----------



$ rails new my-app-render --database=postgresql
$ rails db:create
$ rails s



---1---

Gemfile
-------

gem 'pg'


$ bundle install



---2---

config/database.yml
-------------------

default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>



https://guides.rubyonrails.org/configuring.html#database-pooling
https://guides.rubyonrails.org/configuring.html#configuring-a-database


config/database.yml
-------------------

production:
  <<: *default
  url: <%= ENV['DATABASE_URL'] %>
production:
  <<: *default
  url: <%= ENV['DATABASE_URL'] %>
  database: my_app_render_production
  username: my_app_render
  password: <%= ENV['MY_APP_RENDER_DATABASE_PASSWORD'] %>



---3---

config/puma.rb
--------------

#workers ENV.fetch("WEB_CONCURRENCY") {2} -> workers ENV.fetch("WEB_CONCURRENCY") {4} 

#preload_app! -> preload_app!



---4---

config/environments/production.rb
---------------------------------

config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present? ->
config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present? || ENV['RENDER'].present?



---5---

$ git rev-parse --show-toplevel
$ touch render-build.sh


render-build.sh
---------------

set -o errexit

bundle install
bundle exec rails assets:precompile
bundle exec rails assets:clean
bundle exec rails db:migrate

#if you have seeds to run add:
# bundle exec rails db:seed



---6---

$ chmod a+x render-build.sh



---7---

$ touch render.yaml

render.yml
----------

databases:
  - name: postgres
    ipAllowList: []
    databaseName: my_app_render
    user: my_app_render

services:
  - type: web
    name: my_app_render
    env: ruby
    buildCommand: "./render-build.sh"
    startCommand: "bundle exec rails s"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: postgres
          property: connectionString
      - key: RAILS_MASTER_KEY
        sync: false



---8---

https://render.com
------------------

Dashboard -> Blueprints -> New Blueprint Instance

Add app name form GitHub

After that in the deploy window below, set the value of the RAILS_MASTER_KEY to the contents of your config/master.key file. Then click Apply

Go the the Dashboard tab to see the progress it should say deploying…





---





Unpermitted parameters: :correct_answer, :_destroy. Context: {
  controller: QuizzesController, 
  action: create, 
  request: #<ActionDispatch::Request:0x00007f2542a89e40>, 
  params: {
    "authenticity_token"=>"[FILTERED]", 
    "quiz"=>{"questions_attributes"=>{"0"=>{
    "content"=>"Calculate the value of C.", 
    "image"=>#<ActionDispatch::Http::UploadedFile:0x00007f25429a4980 @tempfile=#<Tempfile:/tmp/RackMultipart20240218-76347-qsef31.jpg>, 
    @content_type="image/jpeg", 
    @original_filename="bridget.jpg", 
    @headers="Content-Disposition: form-data; name=\"quiz[questions_attributes][0][image]\"; filename=\"bridget.jpg\"\r\nContent-Type: image/jpeg\r\n">, 
    "answer_1"=>"3", 
    "answer_2"=>"4", 
    "answer_3"=>"5", 
    "answer_4"=>"6", 
    "correct_answer"=>"3", 
    "_destroy"=>"false"
  }, 
    "1708275581869"=>{
    "content"=>"How did you know?", 
    "answer_1"=>"a", 
    "answer_2"=>"b", 
    "answer_3"=>"c", 
    "answer_4"=>"d", 
    "correct_answer"=>"1", 
    "_destroy"=>"false"}}}, 
    "commit"=>"Create Quiz", 
    "controller"=>"quizzes", 
    "action"=>"create"
  }
}


Unpermitted parameters: :correct_answer, :_destroy. Context: {
  controller: QuizzesController, 
  action: create, 
  request: #<ActionDispatch::Request:0x00007f2542a89e40>, 
  params: {
    "authenticity_token"=>"[FILTERED]", 
    "quiz"=>{"questions_attributes"=>{"0"=>{
    "content"=>"Calculate the value of C.", 
    "image"=>#<ActionDispatch::Http::UploadedFile:0x00007f25429a4980 @tempfile=#<Tempfile:/tmp/RackMultipart20240218-76347-qsef31.jpg>, 
    @content_type="image/jpeg", @original_filename="bridget.jpg", 
    @headers="Content-Disposition: form-data; name=\"quiz[questions_attributes][0][image]\"; filename=\"bridget.jpg\"\r\nContent-Type: image/jpeg\r\n">, 
    "answer_1"=>"3", 
    "answer_2"=>"4", 
    "answer_3"=>"5", 
    "answer_4"=>"6", 
    "correct_answer"=>"3", 
    "_destroy"=>"false"
  }, 
    "1708275581869"=>{
    "content"=>"How did you know?", 
    "answer_1"=>"a", 
    "answer_2"=>"b", 
    "answer_3"=>"c", 
    "answer_4"=>"d", 
    "correct_answer"=>"1", 
    "_destroy"=>"false"}}}, 
    "commit"=>"Create Quiz", 
    "controller"=>"quizzes", 
    "action"=>"create"
  }
}





---




Tailwind
--------

<div class="flex space-x-4">
  <a href="/" class="bg-gray-900 text-white rounded-md px-3 py-2 text-sm font-medium" aria-current="page">Editable Tailwind Sidebar</a>
  <a href="<%= root_path %>" class="text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium">Home</a>
  <a href="<%= posts_path %>" class="text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium">Posts</a>
  <a href="<%= categories_path %>" class="text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium">Categories</a>
  <a href="<%= new_post_path %>" class="text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium">Create Post</a>
  <a href="<%= new_category_path %>" class="text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium">Create Category</a>
</div>






---


























