GitHub Actions + CI/CD
1. Что такое GitHub Actions?

GitHub Actions — это встроенный в GitHub сервис для автоматизации задач, таких как:

    Сборка и тестирование кода (CI).

    Деплой на серверы, Docker, облака (CD).

    Линтеры, проверка качества кода.

    Запуск по событиям (push, pull_request, schedule).

2. Основные понятия

    Workflow — сценарий автоматизации (описан в .github/workflows/*.yml).

    Job — набор шагов (steps), выполняемых на одном runner.

    Step — отдельная команда или action.

    Runner — сервер (Linux, Windows, macOS), который выполняет job.

    Action — готовый модуль (например, checkout, setup-ruby).

3. Простейший Workflow

Файл: .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Install dependencies
        run: bundle install

      - name: Run tests
        run: bundle exec rspec

4. Триггеры Workflow

on:
  push:                       # При push в репозиторий
  pull_request:               # При открытии или обновлении PR
  schedule:                   # По расписанию (cron)
    - cron: "0 0 * * *"       # Каждый день в 00:00
  workflow_dispatch:          # Запуск вручную

5. Популярные Actions

    actions/checkout@v3 — клонирование репозитория.

    actions/setup-node@v3 — установка Node.js.

    ruby/setup-ruby@v1 — установка Ruby.

    actions/cache@v3 — кэширование зависимостей.

    docker/build-push-action@v4 — сборка и пуш Docker-образа.

    actions/upload-artifact@v3 — загрузка артефактов.

    actions/download-artifact@v3 — скачивание артефактов.

6. Пример CI для Rails

name: Rails CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
      - run: bundle install --jobs 4 --retry 3
      - run: bin/rails db:create db:schema:load
      - run: bundle exec rspec

7. Пример CD (деплой через SSH)

name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/app
            git pull origin main
            docker-compose up -d --build

8. Secrets и переменные

    Secrets — хранение паролей и токенов (в разделе Settings > Secrets and variables).

    Пример использования:

env:
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}

9. Лучшие практики CI/CD

    Минимизируй шаги — меньше шагов = быстрее пайплайн.

    Кэшируй зависимости (gem, node_modules):

- uses: actions/cache@v3
  with:
    path: vendor/bundle
    key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}

    Не храни секреты в коде — только через GitHub Secrets.

    Разделяй CI и CD — тесты и деплой в отдельных workflow.

    Используй matrix для тестов на разных версиях Ruby/Node.

10. Комбинации команд для частых задач

    Запуск workflow вручную:

on:
  workflow_dispatch:

Тесты на нескольких Ruby:

strategy:
  matrix:
    ruby: [3.1, 3.2]
steps:
  - uses: ruby/setup-ruby@v1
    with:
      ruby-version: ${{ matrix.ruby }}

Деплой Docker на Docker Hub:

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and Push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: user/app:latest

11. Локальная отладка GitHub Actions

    Используй act для локального запуска workflow:

act push



---


(Simple CI)

Подходит для:

    Pet-проекты.

    Малые Rails/Node/Python приложения.

    Проверка тестов и линтинга без деплоя.

Что включает:

    Один workflow (.github/workflows/ci.yml).

    Автоматический запуск на push и pull_request.

    Минимальные шаги: checkout, установка зависимостей, тесты.

Пример .github/workflows/ci.yml:

name: CI (Simple)

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Install dependencies
        run: bundle install

      - name: Run tests
        run: bundle exec rspec

Особенности:

    Легко поддерживать.

    Запускается быстро.

    Не требует дополнительных настроек.

2. Средняя шпаргалка (CI + Basic CD)

Подходит для:

    Средние проекты (Rails API, Vue/React SPA).

    Автоматический деплой на staging/production сервер.

    Поддержка Docker (опционально).

Что включает:

    2 workflow:

        ci.yml — тесты, линтеры, билд.

        deploy.yml — деплой по push в main или release/*.

    Secrets: SSH ключ, RAILS_MASTER_KEY, Docker credentials.

    Кэширование зависимостей для ускорения.

Пример .github/workflows/ci.yml:

name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Install dependencies
        run: bundle install --jobs 4 --retry 3 --path vendor/bundle

      - name: Run Rubocop
        run: bundle exec rubocop

      - name: Run RSpec
        run: bundle exec rspec

Пример .github/workflows/deploy.yml:

name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/www/app
            git pull origin main
            docker-compose build
            docker-compose up -d

Особенности:

    Автоматический деплой после успешных тестов.

    Кэширование ускоряет CI.

    Легко подключить Docker или Heroku.

3. Продвинутая шпаргалка (Pro CI/CD)

Подходит для:

    Коммерческие проекты с микросервисами.

    Автоматический деплой с blue-green стратегией.

    CI на нескольких окружениях (matrix build).

    Docker + Kubernetes + GitHub Environments.

Что включает:

    3 workflow:

        ci.yml — тесты на разных версиях Ruby/Node.

        build.yml — сборка Docker-образов и пуш в Docker Hub.

        deploy.yml — деплой в Kubernetes/production.

    Кэширование Docker layers.

    Upload/download artifacts.

    Secrets для каждого environment (staging/production).

Пример .github/workflows/ci.yml:

name: CI (Pro)

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby: [3.1, 3.2]
        node: [18, 20]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - name: Install dependencies
        run: bundle install --jobs 4 --retry 3

      - name: Run tests
        run: bundle exec rspec

Пример .github/workflows/build.yml:

name: Docker Build & Push

on:
  push:
    branches: [main]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: user/app:latest

Пример .github/workflows/deploy.yml:

name: Deploy to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Deploy
        run: |
          kubectl set image deployment/app app=user/app:latest
          kubectl rollout status deployment/app

Особенности:

    Matrix тесты на разных окружениях.

    Полная автоматизация CI/CD.

    Готово для production проектов.

Вывод

    Простой шаблон — для pet-проектов.

    Средний — для стартапов с auto-deploy.

    Продвинутый — для профессиональной CI/CD инфраструктуры.