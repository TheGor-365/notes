-------------
HEXLET PYTHON
-------------



-------------
PYTHON BASICS
-------------


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

hello world
-----------


print('Hello, World!')
print(10)



---



comments
--------


# For Winterfell!
# For Lannisters!



print('I am the King')  # For Lannisters!




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

instructions
------------


print('Mother of Dragons.')
print('Dracarys!')



---



print('Mother of Dragons.'); print('Drakarys!')








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

arithmetic operations
---------------------


print(3 + 4)



---





-  — вычитание
*  — умножение
** — возведение в степень
/  — деление
// — целочисленное деление
%  — остаток от деления




---



print(8 / 2)
print(3 ** 2)
print(9 % 2) 




---




print(3 ** 5)
print(-8 / -4)
print(100 % 3)
print(3 ** 5 + (-8 / -4) + 100 % 3)








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

linter
------


PEP 8 – Style Guide for Python Code
-----------------------------------

https://peps.python.org/pep-0008/




---




Flake8: Your Tool For Style Guide Enforcement
---------------------------------------------

https://flake8.pycqa.org/en/latest/









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strings
-------


print("- Did Joffrey agree?\n- He did. He also said \"I love using \\n\".")






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

variables
---------


family = 'Targaryen'
pet = 'Dragon'

print(family)
print(' and ')
print(pet)






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

instructions and expressions
----------------------------


euros_count = 100

dollars_count = euros_count * 1.25
rubles_count  = dollars_count * 60

print(dollars_count)
print(rubles_count)









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

naming
------



kebab-case — составные части переменной разделяются дефисом (my-super-var)
snake_case — для разделения используется подчеркивание (my_super_var)
CamelCase  — каждое слово в переменной пишется с заглавной буквы (MySuperVar)





---




king = 'King Balon the 6th'

castles = 6
castle_rooms = 17
print(king + ' has ' + str(castle_rooms * castles) + ' rooms.')






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

interpolation
-------------


stark = 'Arya'

print(f'''Do you want to eat, {stark}?
Yes, I'm hungry, mom.''')





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

get from strings
----------------


first_name = 'Alexander'

print(first_name[0])




---




first_name = 'Alexander'

print(first_name[-1])




---




first_name = 'Alexander'
index = 0

print(first_name[index])




---




one   = 'Naharis'
two   = 'Mormont'
three = 'Sand'

print(f'{one[2]}{two[1]}{three[3]}{two[4]}{two[2]}')





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

line slices
-----------


value = 'Hexlet'

value[3:]
value[:3]




---




value = 'Hexlet'

value[3:-1]
value[-5:3]




---




value = 'Hexlet'

value[1:5:2]




---




value = 'Hexlet'

value[:5:2]
value[1::2]




---




value = 'Hexlet'

value[::-1]




---




value = 'Hexlet'

value[4:1:-1]




---




value = 'Hexlet'

begin = 1
end = 5

value[begin:end]




---




value = 'Hexlet'

value[::]      = 'Hexlet'   # Вся строка 
value[:]       = 'Hexlet'   # Вся строка
value[::2]     = 'Hxe'      # Нечетные по порядку символы
value[1::2]    = 'elt'      # Четные по порядку символы
value[::-1]    = 'telxeH'   # Вся строка в обратном порядке
value[5:]      = 't'        # Строка, начиная с шестого символа
value[:5]      = 'Hexle'    # Строка до шестого символа
value[-2:1:-1] = 'elx'      # Все символы с предпоследнего до третьего в обратном порядке. Во всех случаях выборки от большего индекса к меньшему нужно указывать шаг




---




value = 'Hexlet'

print(value[2:5])








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

data types
----------


number = int('345')
print(number)




---




value = '0'

converted_value = int(value)
print(converted_value)


converted_value2 = int('10')
print(converted_value2)

converted_value3 = int(False)
print(converted_value3)

converted_value4 = int(True)
print(converted_value4)

converted_value5 = int(3.5)
print(converted_value5)





---




value = str(10)
print(value)

value2 = str(True)
print(value2)

value3 = float(5)
print(value3)





---




value = 3 + 1.2
print(value)




---




print(str(2) + ' times')








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

immutability and primitive types
--------------------------------


balance = -200
amount = abs(balance)

print(amount)




---




value = "-42"

value = int(value)
value = abs(value)

print(value)








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

functions and their invocation
------------------------------


result = len('Hello!')
print(result)




---




result = pow(2, 3)
print(result)




---




company1 = "Apple"
company2 = "Samsung"

print(len(company1) + len(company2))







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function signature
------------------


result = round(10.25, 0)
result = round(10.25)
result = round(10.25, 1)




---




num1 = 10
num2 = -13

print(abs(num1 + num2))








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function call
-------------


name = 'python'

last_index = len(name) - 1
print(last_index)




---




name = 'python'

print(f'Последний символ: {name[len(name) - 1]}')





---





number = 10.1234

print(hex(round(number)))








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

determinism
-----------


len('hexlet')
len('hexlet')

len('wow')
len('wow')




---




from random import random

random()
random()




---




from random import randint

print(randint(1, 10))






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

standart library
----------------


motto = 'Family, Duty, Honor'

print(type(motto))








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

properties and methods
----------------------


name = 'Hexlet'

upper_name = name.upper()
print(upper_name)




---




'Hexlet'.upper()




---




name = 'Python'

name.find('t')
name.lower() 
name.replace('on', 'off')




---




x = -5
abs(x)

pow(x, 3)





---




name = 'Robb'
print(name.lower())
num1 = 5
num2 = 30

print(num1.bit_length() + num2.bit_length())





---




first_name = '  Grigor   \n '

first_name = first_name.strip()
print(first_name)







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

method chain
------------


name = 'Tirion'
print(name.upper().lower())




---




name = 'Tirion'

upper_name = name.upper()  # 'TIRION'
print(upper_name.lower())





---




name = 'Tirion'
print(name.replace('Ti', 'Ki').lower())




---




name = 'Tirion'

print(name.upper.lower())




---




name = 'Tirion'

print(name[1:5].upper().find('I'))




---




text = 'When \t\n you play a \t\n game of thrones you win or you die.'

print(len(text[5:17].strip()))








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

definition of functions
-----------------------


from emails import send

email = 'support@hexlet.io'
title = 'Помогите'
body  = 'Я написал историю успеха, как я могу получить скидку?'

send(email, title, body)




---




def show_greeting():
    text = 'Hello, Hexlet!'
    print(text)

show_greeting()




---




def noop():
    pass

noop()




---




def print_motto():
    print('Winter is coming')








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

returning values
----------------


def greeting():
    print('Hello, Hexlet!')





---




def save_email():
    email = '  SuppORT@hexlet.IO'
    trimmed_email = email.strip()
    prepared_email = trimmed_email.lower()
    print(prepared_email)





---




def greeting():
    return 'Hello, Hexlet!'





---




def greeting_with_code_after_return():
    return 'Hello, Hexlet!'
    print('Я никогда не выполнюсь')





---




def greeting_with_return_and_printing():
    print('Я появлюсь в консоли')
    return 'Hello, Hexlet!'




---




def double_five():
    result = 5 + 5
    return result





---




def run():
    return 5
    return 10




---




def say_hurray_three_times():
    return 'hurray! hurray! hurray!'




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

functions params
----------------


print('я параметр')

'google'.replace('go', 'mo')  # moogle

round(10.23456, 3)




---




def get_last_char(text):
    return text[-1]





---




def truncate(text, length):
    return f'{text[0:(length)]}...'






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

optional function parameters
----------------------------


def pow(x, base=2):
    return x ** base





---




def my_print(text='nothing'):
    print(text)





---




def print_params(x, a=5, b=10, c=100):
def print_params(x, y, a=5, b=10, c=100):




---




def get_hidden_card(cart_number, mask_length=4):
    mask = '*' * mask_length
    return f'{mask}{cart_number[-4:]}'







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

named arguments
---------------


truncate('My Text', 3)




---




truncate(length=3, text='My Text')




---




def print_params(a=1, b=2, c=None, d=4):
    print(a, b, c, d)

print_params(1, 2, None, 8)
print_params(d=8)





---




print_params(3, d=3)




---




def trim_and_repeat(string, offset=0, repetitions=1):
    return f'{string[offset:]}' * repetitions










---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

type annotations
----------------


def concat(first, second):
    return first + second





---




def concat(first: str, second: str) -> str:
    return first + second





---




def double(n: int) -> int:
    result: int = n * 2
    return result





---






def letter_multiply(text: str, letter: str, repetitions: int) -> str:
    result: str = text.replace(letter, letter*repetitions)
    return result






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
















































































