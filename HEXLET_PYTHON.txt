-------------
HEXLET PYTHON
-------------







-------------
PYTHON BASICS
-------------


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

hello world
-----------


print('Hello, World!')
print(10)



---



comments
--------


# For Winterfell!
# For Lannisters!



print('I am the King')  # For Lannisters!




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

instructions
------------


print('Mother of Dragons.')
print('Dracarys!')



---



print('Mother of Dragons.'); print('Drakarys!')








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

arithmetic operations
---------------------


print(3 + 4)



---





-  — вычитание
*  — умножение
** — возведение в степень
/  — деление
// — целочисленное деление
%  — остаток от деления




---



print(8 / 2)
print(3 ** 2)
print(9 % 2) 




---




print(3 ** 5)
print(-8 / -4)
print(100 % 3)
print(3 ** 5 + (-8 / -4) + 100 % 3)








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

linter
------


PEP 8 – Style Guide for Python Code
-----------------------------------

https://peps.python.org/pep-0008/




---




Flake8: Your Tool For Style Guide Enforcement
---------------------------------------------

https://flake8.pycqa.org/en/latest/









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strings
-------


print("- Did Joffrey agree?\n- He did. He also said \"I love using \\n\".")






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

variables
---------


family = 'Targaryen'
pet = 'Dragon'

print(family)
print(' and ')
print(pet)






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

instructions and expressions
----------------------------


euros_count = 100

dollars_count = euros_count * 1.25
rubles_count  = dollars_count * 60

print(dollars_count)
print(rubles_count)









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

naming
------



kebab-case — составные части переменной разделяются дефисом (my-super-var)
snake_case — для разделения используется подчеркивание (my_super_var)
CamelCase  — каждое слово в переменной пишется с заглавной буквы (MySuperVar)





---




king = 'King Balon the 6th'

castles = 6
castle_rooms = 17
print(king + ' has ' + str(castle_rooms * castles) + ' rooms.')






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

interpolation
-------------


stark = 'Arya'

print(f'''Do you want to eat, {stark}?
Yes, I'm hungry, mom.''')





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

get from strings
----------------


first_name = 'Alexander'

print(first_name[0])




---




first_name = 'Alexander'

print(first_name[-1])




---




first_name = 'Alexander'
index = 0

print(first_name[index])




---




one   = 'Naharis'
two   = 'Mormont'
three = 'Sand'

print(f'{one[2]}{two[1]}{three[3]}{two[4]}{two[2]}')





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

line slices
-----------


value = 'Hexlet'

value[3:]
value[:3]




---




value = 'Hexlet'

value[3:-1]
value[-5:3]




---




value = 'Hexlet'

value[1:5:2]




---




value = 'Hexlet'

value[:5:2]
value[1::2]




---




value = 'Hexlet'

value[::-1]




---




value = 'Hexlet'

value[4:1:-1]




---




value = 'Hexlet'

begin = 1
end = 5

value[begin:end]




---




value = 'Hexlet'

value[::]      = 'Hexlet'   # Вся строка 
value[:]       = 'Hexlet'   # Вся строка
value[::2]     = 'Hxe'      # Нечетные по порядку символы
value[1::2]    = 'elt'      # Четные по порядку символы
value[::-1]    = 'telxeH'   # Вся строка в обратном порядке
value[5:]      = 't'        # Строка, начиная с шестого символа
value[:5]      = 'Hexle'    # Строка до шестого символа
value[-2:1:-1] = 'elx'      # Все символы с предпоследнего до третьего в обратном порядке. Во всех случаях выборки от большего индекса к меньшему нужно указывать шаг




---




value = 'Hexlet'

print(value[2:5])








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

data types
----------


number = int('345')
print(number)




---




value = '0'

converted_value = int(value)
print(converted_value)


converted_value2 = int('10')
print(converted_value2)

converted_value3 = int(False)
print(converted_value3)

converted_value4 = int(True)
print(converted_value4)

converted_value5 = int(3.5)
print(converted_value5)





---




value = str(10)
print(value)

value2 = str(True)
print(value2)

value3 = float(5)
print(value3)





---




value = 3 + 1.2
print(value)




---




print(str(2) + ' times')








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

immutability and primitive types
--------------------------------


balance = -200
amount = abs(balance)

print(amount)




---




value = "-42"

value = int(value)
value = abs(value)

print(value)








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

functions and their invocation
------------------------------


result = len('Hello!')
print(result)




---




result = pow(2, 3)
print(result)




---




company1 = "Apple"
company2 = "Samsung"

print(len(company1) + len(company2))







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function signature
------------------


result = round(10.25, 0)
result = round(10.25)
result = round(10.25, 1)




---




num1 = 10
num2 = -13

print(abs(num1 + num2))








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function call
-------------


name = 'python'

last_index = len(name) - 1
print(last_index)




---




name = 'python'

print(f'Последний символ: {name[len(name) - 1]}')





---





number = 10.1234

print(hex(round(number)))








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

determinism
-----------


len('hexlet')
len('hexlet')

len('wow')
len('wow')




---




from random import random

random()
random()




---




from random import randint

print(randint(1, 10))






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

standart library
----------------


motto = 'Family, Duty, Honor'

print(type(motto))








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

properties and methods
----------------------


name = 'Hexlet'

upper_name = name.upper()
print(upper_name)




---




'Hexlet'.upper()




---




name = 'Python'

name.find('t')
name.lower() 
name.replace('on', 'off')




---




x = -5
abs(x)

pow(x, 3)





---




name = 'Robb'
print(name.lower())
num1 = 5
num2 = 30

print(num1.bit_length() + num2.bit_length())





---




first_name = '  Grigor   \n '

first_name = first_name.strip()
print(first_name)







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

method chain
------------


name = 'Tirion'
print(name.upper().lower())




---




name = 'Tirion'

upper_name = name.upper()  # 'TIRION'
print(upper_name.lower())





---




name = 'Tirion'
print(name.replace('Ti', 'Ki').lower())




---




name = 'Tirion'

print(name.upper.lower())




---




name = 'Tirion'

print(name[1:5].upper().find('I'))




---




text = 'When \t\n you play a \t\n game of thrones you win or you die.'

print(len(text[5:17].strip()))








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

definition of functions
-----------------------


from emails import send

email = 'support@hexlet.io'
title = 'Помогите'
body  = 'Я написал историю успеха, как я могу получить скидку?'

send(email, title, body)




---




def show_greeting():
    text = 'Hello, Hexlet!'
    print(text)

show_greeting()




---




def noop():
    pass

noop()




---




def print_motto():
    print('Winter is coming')








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

returning values
----------------


def greeting():
    print('Hello, Hexlet!')





---




def save_email():
    email = '  SuppORT@hexlet.IO'
    trimmed_email = email.strip()
    prepared_email = trimmed_email.lower()
    print(prepared_email)





---




def greeting():
    return 'Hello, Hexlet!'





---




def greeting_with_code_after_return():
    return 'Hello, Hexlet!'
    print('Я никогда не выполнюсь')





---




def greeting_with_return_and_printing():
    print('Я появлюсь в консоли')
    return 'Hello, Hexlet!'




---




def double_five():
    result = 5 + 5
    return result





---




def run():
    return 5
    return 10




---




def say_hurray_three_times():
    return 'hurray! hurray! hurray!'




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

functions params
----------------


print('я параметр')

'google'.replace('go', 'mo')

round(10.23456, 3)




---




def get_last_char(text):
    return text[-1]





---




def truncate(text, length):
    return f'{text[0:(length)]}...'






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

optional function parameters
----------------------------


def pow(x, base=2):
    return x ** base





---




def my_print(text='nothing'):
    print(text)





---




def print_params(x, a=5, b=10, c=100):
def print_params(x, y, a=5, b=10, c=100):




---




def get_hidden_card(cart_number, mask_length=4):
    mask = '*' * mask_length
    return f'{mask}{cart_number[-4:]}'







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

named arguments
---------------


truncate('My Text', 3)




---




truncate(length=3, text='My Text')




---




def print_params(a=1, b=2, c=None, d=4):
    print(a, b, c, d)

print_params(1, 2, None, 8)
print_params(d=8)





---




print_params(3, d=3)




---




def trim_and_repeat(string, offset=0, repetitions=1):
    return f'{string[offset:]}' * repetitions










---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

type annotations
----------------


def concat(first, second):
    return first + second





---




def concat(first: str, second: str) -> str:
    return first + second





---




def double(n: int) -> int:
    result: int = n * 2
    return result





---






def letter_multiply(text: str, letter: str, repetitions: int) -> str:
    result: str = text.replace(letter, letter*repetitions)
    return result






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

environment
-----------


age = 5

def generate():
    return age + 3

result = generate()





---




age = 5

def generate():
    age = 10
    return age + 3

result = generate()





---




age = 5

def generate():
    age = 8

generate()

result = age





---




def get_age_difference(first_age, second_age):
    return f'The age difference is {abs(first_age - second_age)}'











---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

logic
-----


<  — меньше
<= — меньше или равно
>  — больше
>= — больше или равно
== — равно
!= — не равно





---




result = 5 > 4
print(result)
print('one' != 'one')




---




def is_infant(age):
    return age < 1

print(is_infant(3))




---




def is_castle(string):
    return string == 'Castle'

print(is_castle('Sea'))





---





7  % 2 → 1
21 % 3 → 0
19 % 5 → 4




---




def is_even(number):
    return number % 2 == 0

print(is_even(10))
print(is_even(3))





---




def is_first_letter_an_a(string):
    first_letter = string[0]
    return first_letter == 'a'

print(is_first_letter_an_a('orange'))  # => False
print(is_first_letter_an_a('apple'))





---




def has_upper_case(text):
    return text != text.lower()





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

logic operators
---------------


def is_correct_password(password):
    length = len(password)
    return length > 8 and length < 20

print(is_correct_password('qwerty'))
print(is_correct_password('qwerty1234'))
print(is_correct_password('zxcvbnmasdfghjkqwertyui'))




---




def is_strong_password(password):
    length = len(password)
    return (length > 8 and length < 20) and has_special_chars(password)





---




def is_good_apartment(area, street):
    return area >= 100 or (area >= 80 and street == 'Main Street')

print(is_good_apartment(91, 'Queens Street'))
print(is_good_apartment(78, 'Queens Street'))
print(is_good_apartment(70, 'Main Street'))

print(is_good_apartment(120, 'Queens Street'))
print(is_good_apartment(120, 'Main Street'))
print(is_good_apartment(80, 'Main Street'))




---




------------------------
A       B       A and B
------------------------
True    True    True
True    False   False
False   True    False
False   False   False
------------------------




---




-----------------------
A       B       A or B
-----------------------
True    True    True
True    False   True
False   True    True
False   False   False
-----------------------




---




def is_even(number):
    return number % 2 == 0

print(is_even(10))
print(not is_even(10))




---




def is_leap_year(year):
    return (year % 4 == 0) and (year % 100 != 0) or (year % 400 == 0) and (year % 100 == 0)








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

logic operation results
-----------------------


print(0 or 1)




---




print(0 or False or '' or [] or 42 or "Hello")




---




print(0 and 1)




---




print(42 and "Hello" and [] and 0)




---




value = name or ''

234 or ''
'hexlet' or ''
None or ''




---




result = 10 % 2 == 0 and 'yes' or 'no'

print(10 % 2 == 0 and 'yes' or 'no')

print(11 % 2 == 0 and 'yes' or 'no')




---




answer = True
print(not answer)




---




answer = True
print(not not answer)




---




answer = 'python'

print(not answer)
print(not not answer)




---




value = 'first'
value == ('first' or 'second')




---





value == 'first' or value == 'second'




---




def string_or_not(data):
    return str(data) == data and 'yes' or 'no'








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

conditional constructions
-------------------------


def get_type_of_sentence(sentence):
    last_char = sentence[-1]
    if last_char == '?':
        return 'question'
    return 'normal'

print(get_type_of_sentence('Hodor'))
print(get_type_of_sentence('Hodor?'))




---




def get_type_of_sentence(sentence):
    last_char = sentence[-1]

    if last_char == '?':
        sentence_type = 'question'
    else:
        sentence_type = 'normal'

    return "Sentence is " + sentence_type

print(get_type_of_sentence('Hodor'))
print(get_type_of_sentence('Hodor?'))




---




def get_type_of_sentence(sentence):
    last_char = sentence[-1]

    if last_char != '?':
        sentence_type = 'normal'
    else:
        sentence_type = 'question'

    return "Sentence is " + sentence_type





---




def get_type_of_sentence(sentence):
    last_char = sentence[-1]

    if last_char == '?':
        sentence_type = 'question'

    if last_char == '!':
        sentence_type = 'exclamation'
    else:
        sentence_type = 'normal'

    return 'Sentence is ' + sentence_type

print(get_type_of_sentence('Who?'))
print(get_type_of_sentence('No'))
print(get_type_of_sentence('No!'))




---




def get_type_of_sentence(sentence):
    last_char = sentence[-1]

    if last_char == '?':
        sentence_type = 'question'
    elif last_char == '!':
        sentence_type = 'exclamation'
    else:
        sentence_type = 'normal'

    return 'Sentence is ' + sentence_type

print(get_type_of_sentence('Who?'))
print(get_type_of_sentence('No'))
print(get_type_of_sentence('No!'))




---




def abs(number):
    if number >= 0:
        return number
    return -number





---





def abs(number):
    return number if number >= 0 else -number





---




def get_type_of_sentence(sentence):
    last_char = sentence[-1]
    if last_char == '?':
        return 'question'
    return 'normal'





---




def get_type_of_sentence(sentence):
    last_char = sentence[-1]
    return 'question' if last_char == '?' else 'normal'

print(get_type_of_sentence('Hodor'))
print(get_type_of_sentence('Hodor?'))




---




def normalize_url(address):
    if address[:8] == 'https://':
        result = address
    elif address[:7] == 'http://':
        result = address.replace('http://', 'https://')
    else:
        result = 'https://' + address

    return result






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

match operator
--------------


match status:
    case 'processing':
    case 'paid':
    case 'new':
    case _: 






---




match count:
    case 1:
    case 2:
    case _:






---




def count_items(count):
    result = ''

    match count:
        case 1:
            result = 'one'
        case 2:
            result = 'two'
        case _:
            result = None

    return result





---




def count_items(count):
    match count:
        case 1:
            return 'one'
        case 2:
            return 'two'
        case _:
            return None





---




def match_input(input):
    match input:
        case 'start' | 'begin':
            print('Starting...')
        case 'stop' | 'end':
            print('Stopping...')
        case 'pause':
            print('Pausing...')
        case _:
            print('Invalid input')

match_input('begin')
match_input('stop')
match_input('pause')
match_input('test')




---




def get_type(val):
    match val:
        case str(val):
            print(f'It is a string: {val}')
        case int(val):
            print(f'It is an integer: {val}')
        case _:
            print("I don't know this type")

get_type('hello')
get_type(123)
get_type(None)




---




def match_input(input):
    match input:
        case 'start':
            message = 'Starting...'
        case 'stop':
            message = 'Stopping...'
        case 'pause':
            message = 'Pausing...'
        case _:
            message = 'Invalid input'

    print(message)

match_input('start')
match_input('stop')
match_input('pause')
match_input('test')




---




def get_number_explanation(number):
    match number:
        case 666:
            return 'devil number'
        case 42:
            return 'answer for everything'
        case 7:
            return 'prime number'
        case _:
            return 'just a number'







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

while
-----


def print_hello(n):
    counter = 0
    while counter < n:
        print('Hello!')
        counter = counter + 1

print_hello(2)




---




def print_numbers(last_number):
    i = 1
    while i <= last_number:
        print(i)
        i = i + 1
    print('finished!')





---




def print_numbers(last_number):
    i = 1
    while i <= last_number:
        print(i)
    print('finished!')





---





a = a + 1 → a += 1
a = a - 1 → a -= 1
a = a * 2 → a *= 2
a = a / 1 → a /= 1




---




def print_numbers(num):
    while num > 0:
        print(num)
        num -= 1
    print('finished!')








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

data agregation
---------------


def sum_numbers_from_range(start, finish):
    i = start
    sum = 0
    while i <= finish:
        sum = sum + i
        i = i + 1
    return sum





---




def repeat(text, times):
    result = ''
    i = 1

    while i <= times:
        result = result + text
        i = i + 1

    return result





---




def multiply_numbers_from_range(start, finish):
    i = start
    multiply = 1
    while i <= finish:
        multiply *= i
        i += 1
    return multiply

multiply_numbers_from_range(3, 5)





---




def join_numbers_from_range(start, finish):
    i = start
    string = ''
    while i <= finish:
        string += str(i)
        i += 1
    return string






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

traversing lines
----------------


def print_name_by_symbol(name):
    i = 0
    while i < len(name):
        print(name[i])
        i += 1

name = 'Arya'
print_name_by_symbol(name)




---




def reverse_string(string):
    index = len(string) - 1
    reversed_string = ''

    while index >= 0:
        current_char    = string[index]
        reversed_string = reversed_string + current_char
        index -= 1

    return reversed_string

reverse_string('Game Of Thrones')
reverse_string('')





---




def my_substr(string, number):
    i = 0
    sub_string = ''

    while i < number:
        sub_string += string[i]
        i += 1
    return sub_string







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

conditions inside the loop body
-------------------------------


def count_chars(string, char):
    index = 0
    count = 0
    while index < len(string):
        if string[index] == char:
            count += 1
        index += 1
    return count





---





def is_prime(number):
    if number < 2:
        return False

    divider = 2

    while divider <= number / 2:
        if number % divider == 0:
            return False

        divider += 1

    return True

print(is_prime(1))
print(is_prime(2))
print(is_prime(3))
print(is_prime(4))




---




def has_char(string, char):
    index = 0
    uppercase_char = char.upper()
    while index < len(string):
        if string[index].upper() == uppercase_char:
            return True
        index += 1
    return False








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

for loop
--------


text = 'code'
for symbol in text:
    print(symbol)





---




def reverse_string(text):
    result = ''
    for char in text:
        result = char + result
    return result


reverse_string('go!')




---




def chars_count(text, char):
    result = 0
    for current_char in text:
        if current_char.lower() == char.lower():
            result += 1
    return result


chars_count('hexlet!', 'e')
chars_count('hExlet!', 'e')
chars_count('hExlet!', 'E')

chars_count('hexlet!', 'a')




---




def sum(numbers):
    result = 0
    for num in numbers:
        result += int(num)
    return result

sum("12345")




---




def filter_string(text, char):
    result = ''
    lowered_char = char.lower()
    for current_char in text:
        if current_char.lower() != lowered_char:
            result += current_char
    return result.strip()








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

debugging
---------


def sum_of_series(start, finish):
    result = 0
    n = start
    while n < finish:
        result = result + n
        n = n + 1
    return result





---




def sum_of_series(start, finish):
    result = 0
    n = start
    while n < finish:
        print('new iteration !!!!')
        print(n)
        result = result + n
        n = n + 1
        print(result)
    return result

sum_of_series(3, 5)




---




def is_palindrome(s):
    return s == s[::-1]









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

modules
-------


greeting.py
-----------

def say_hi(): # определяем функцию
    print('Hi!')

name = 'Bob'






main.py
-------

import greeting


greeting.say_hi()

print(greeting.name)






main.py
-------

from greeting import say_hi, name

print(name)
say_hi()




---




from symbols import is_vowel

def count_vowels(text):
    count = 0
    for char in text:
        if is_vowel(char):
            count += 1
    return count




---




computation.py
--------------

PI = 3.1415926
E = 2.7182818


def pi_times(x):
    return x * PI





---




main.py
-------

import computation

from computation import PI, E
from computation import pi_times


print(PI)
print(computation.E)
print(pi_times(2))
print(computation.pi_times(E))




---




from kit import say_bye, say_hello, show_language


def print_kit():
    say_hello()
    show_language()
    say_bye()










---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

packages
--------


package
-------


__init__.py
-----------

NAME = 'super_package'



import package

print(package.NAME)




---




package
-------


constants.py
------------

PERSON = 'Alice'



functions.py
------------

def greet(who):
    print('Hello, ' + who + '!')






---




Квалифицированный импорт (также его называют «импорт модуля целиком»)
---------------------------------------------------------------------

import package.functions
import package.constants

package.functions.greet(package.constants.PERSON)




---




Импорт отдельных определений
----------------------------

from package.functions import greet
from package.constants import PERSON

greet(PERSON)




---




aбсолютный импорт
-----------------

полный путь до модуля




---




oтносительный импорт
--------------------

from . import module
from .module import function
from .subpackage.module import CONSTANT




---






from package.functions import greet
from package.names import NAME

GREETING = greet(NAME)







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

standart library
----------------

random module
-------------


randint — сгенерировать целое число в заданном диапазоне
choice  — выбрать случайный элемент из заданного набора




---




from random import randint

random_number = randint(1, 100)




---




string = 'abcde'

random_index = randint(0, len(string) - 1)
char = string[random_index]




---





from random import choice

string = 'abcde'
char = choice(string)




---






import random

def choice_from_range(text, begin, end):
    return text[random.randint(begin, end)]









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

tuples
------


rgb_colour = (255, 127, 64)
name_and_age = ('Bob', 42)
three_booleans = (True, False, True)
two_pairs_of_numbers = ((1, 2), (3, 4))




---




tuple = (42,)




---




also_tuple = 1, 2




---




Traceback (most recent call last)
---------------------------------

TypeError: 'tuple' object does not support item assignment
----------------------------------------------------------

name_and_age = ('Bob', 42)
name_and_age[0] = 'Alice'

name_and_age




---




def div_mod(a, b):
    quotient = a // b
    modulo = a % b
    return (quotient, modulo)

div_mod(13, 4)




---




name_and_age = ('Bob', 42)

name_and_age[0]
name_and_age[1]




---




tuple = (42,)
len(tuple)
pair = (1, 2)
len(pair)




---




name_and_age = ('Bob', 42)

(name, age) = name_and_age
name
age




---




(quotient, modulo) = div_mod(13, 4)




---




(a,) = (42,)
a




---




(a, b, c) = (1, 2, 3)
a 
b 
c




---




a = 100
b = 'foo'

(a, b) = (b, a)
a 
b




---




def print_person_info(person):
    name, age = person
    print(f'{name} is {age} years old')

person_tuple = ('John', 30)
print_person_info(person_tuple)




---





def sort_pair(napy):
    start, finish = napy
    if start < finish:
        return (start, finish)
    elif finish < start:
        return (finish, start)
    else:
        return (start, finish)







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

exercises
---------


def invert_case(text):
    result = ''
    for char in text:
        if char.isupper():
            result += char.lower()
        elif not char.isupper():
            result += char.upper()
        else:
            result += char
    return result





---




def rotate_left(triple):
    a, b, c = triple
    triple = (b, c, a)
    return triple

def rotate_right(triple):
    a, b, c = triple
    triple = (c, a, b)
    return triple





---




def is_power_of_three(number):
    if (number == 0):
        return False
    while (number != 1):
        if (number % 3 != 0):
            return False
        number = number // 3
    return True





---




def fizz_buzz(begin, end):
    result = []
    if begin > end:
        return ''
    for i in range(begin, end + 1):
        if i % 3 == 0 and i % 5 == 0:
            result.append('FizzBuzz')
        elif i % 3 == 0:
            result.append('Fizz')
        elif i % 5 == 0:
            result.append('Buzz')
        else:
            result.append(str(i))
    final = ' '.join(result)
    return final





---




def is_perfect(number):
    sum = 0
    if number == 0:
        return False
    for i in range(1, number):
        if number % i == 0:
            sum += i
    return sum == number





---




def fib(n):
    if n in {0, 1}:
        return n
    previous, fib_number = 0, 1

    for _ in range(2, n + 1):
        previous, fib_number = fib_number, previous + fib_number
    return fib_number





---




def sum_of_square_digits(number):
    return sum(int(x) ** 2 for x in str(number))


def is_happy_number(n):
    past = set()
    while n != 1:
        n = sum_of_square_digits(n)
        if n in past:
            return False
        past.add(n)
    return True





---




def binary_sum(a, b):
    result = ""
    carry = 0
    i, j = len(a)-1, len(b)-1
    while i >= 0 or j >= 0 or carry:
        total = carry
        if i >= 0:
            total += int(a[i])
            i -= 1
        if j >= 0:
            total += int(b[j])
            j -= 1
        result = str(total % 2) + result
        carry = total // 2
    return result

    




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




















































































