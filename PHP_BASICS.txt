----------
PHP BASICS
----------








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

hello world
-----------


echo 'Hello, World!';




---




print_r('Hello, World!');




---




<?php ?>




---






<?php




---




comments
--------

// For Winterfell!
// For Lanisters!




---




/*
* The night is dark and
* full of terrors.
*/




---





print_r('Hello, World!');








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

instructions
------------



print_r('Mother of Dragons. ');
print_r('Dracarys!');




---




print_r('Mother of Dragons. '); print_r('Drakarys!');




---




print_r('Robert');
print_r('Stannis');
print_r('Renly');








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

arithmetic operations
---------------------


print_r(3 + 4);




---






* — умножение
/ — деление
- — вычитание
% — остаток от деления
** — возведение в степень




---




print_r(8 + 2);




---




print_r(-3);




---




print_r(4 + -3);




---




print_r(+3);
print_r(1 + +3);




---





print_r(2 * 4 * 5 * 10);




---




print_r(2 + 2 * 2);




---




print_r(3 ** (4 - 2));
print_r(7 * 3 + (4 / 2) - (8 + (2 - 1)));




---




print_r(3 ** 5);
print_r(-8 / -4);
print_r(100 % 3);







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

linter
------


<?php

// На следующей строке отступ равен одному табу
    print_r (((8 / 2) + 5) - (-3 / 2));

?>




---




<?php

print_r(((8 / 2) + 5) - (-3 / 2));




---




print_r(3 ** (4 - 2));









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strings
-------


'Hello'
'Goodbye'
'G'
' '
''




---




print_r("Dracarys!");




---




print_r("Dragon's mother");




---




print_r("Dragon's mother said \"No\"");




---




print_r("\\");




---




print_r("- Are you hungry?\n- Aaaarrrgh!");




---




strlen("a");
strlen("\n");
strlen("\n\n");




---




print_r('Dragon' . 'stone');




---




print_r('Kings' . 'wood');
print_r('Kings' . 'road');
print_r("King's" . 'Landing');




---




print_r("King's " . 'Landing');

print_r("King's" . ' Landing');




---




print_r("- Did Joffrey agree?\n- He did. He also said \"I'm using this \\n\".");







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

data types
----------


print_r(1 + '7');




---




print_r((string) 5);
print_r((int) '345');

print_r('Это ' . ((string) 5));




---




print_r((string) 3.04 . ' times');








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

variables
---------


$greeting = 'Father!';
print_r($greeting);
print_r("\n");
print_r($greeting);




---




$greeting = 'Father!';
print_r($greeting);

$greeting = 'Mother!';
print_r($greeting);




---




const PI = 3.14;
print_r(PI);




---





PHP_VERSION    — текущая версия PHP
PHP_MAXPATHLEN — максимальная разрешенная длина имени файла
PHP_INT_MAX    — максимальное возможное значение целых чисел (integer)




---





__LINE__  — содержит текущую строку файла, в котором она используется
__FILE__  — путь до текущего файла
__DIR__   — путь до директории, в которой находится текущий файл




---




$str = <<<EOT
Пример строки,
охватывающей несколько строк,
с использованием heredoc-синтаксиса.
Здесь не нужно экранировать ни одинарные ', ни двойные " кавычки.
EOT;
print_r($str);




---




$name = 'Brienna';

$name = 'anneirB';

print_r($name);










---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

expressions in definitions
--------------------------


$dollarsCount = 50 * 1.25;
print_r($dollarsCount);




---




62.5
50 * 1.25
120 / 10 * 2
(int) '100'

"hello"
"Good" . "will"




---




$rublesPerDollar = 60;
$dollarsCount = 50 * 1.25;
$rublesCount = $dollarsCount * $rublesPerDollar;

print_r($rublesCount);




---




$what = "Kings" . "road";
print_r($what);

$first = "Kings";
$what = $first . "road";
print_r($what);

$last = 'road';
$what = $first . $last;
print_r($what);




---




namespace App\Solution;

$eurosCount = 100;

$euroPerDollar = $eurosCount * 1.25;
print_r($euroPerDollar);
print_r("\n");
$dollarPerRuble = $euroPerDollar * 60;
print_r($dollarPerRuble);








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

interpolation
-------------


$firstName = 'Joffrey';
$greeting = 'Hello';

print_r($greeting . ", " . $firstName . "!");




---




$firstName = 'Joffrey';
$greeting = 'Hello';

print_r("{$greeting}, {$firstName}!");




---




$stark = 'Arya';

print_r("Do you want to eat, {$stark}?");







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

extracting characters from a string
-----------------------------------


$firstName = 'Alexander';

print_r($firstName[0]);




---




$firstName = 'Alexander';

print_r($firstName[8]);

$magic = '\nyou';
print_r($magic[1]);




---




$firstName = 'Alexander';

print_r($firstName[-1]);




---





$firstName = 'Alexander';
$index = 0;

print_r($firstName[$index]);








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

functions and their invocation
------------------------------


$result = strrev('Hello!');
print_r($result);




---




$result = pow(2, 3);
print_r($result);

$result = 2 ** 3;




---




$result = rand();




---




3 + 5;
sum(3, 5);

+(3, 5);




---




$one = "Naharis";
$two = "Mormont";
$three = "Sand";

print_r("{$one[2]}{$two[1]}{$three[3]}{$two[1]}{$two[2]}");







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function signature
------------------


$result = round(10.25, 0);
$result = round(10.25);
$result = round(10.25, 1);




---




$text = 'mount';

print_r(ucfirst($text));







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function call — expression
--------------------------


1 + 5 * 3
'He' . 'Let'
$rate * 5




---




$sum = 1 + 5;
print_r(1 + 5);




---




$name = 'php';
$lastIndex = strlen($name) - 1;
print_r($lastIndex);




---




$name = 'php';
print_r(strlen($name) - 1);




---




$name = 'Toto';

print_r("Имя пользователя: {$name}");




---




$text = 'Never forget what you are, for surely the world will not';

$result = "First: {$text[0]}\nLast: {$text[-1]}";
print_r($result);








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

functions with a variable number of parameters
----------------------------------------------


max(1, 10, 3);
max(1, -3, 2, 3, 2);




---




namespace App\Solution;

print_r(min(3, 10, 22, -3, 0));







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

determinism and side effects
----------------------------


strrev('cat');
strrev('cat');




---




rand();
rand();




---




$text = 'knock!';

print_r(strtoupper($text));






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

standard library
----------------


$motto = 'Family, Duty, Honor';

print_r(gettype($motto));







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function definition
-------------------


namespace Some\Email\Package\send;

$email = 'support@hexlet.io';
$title = 'Помогите';
$body = 'Я написал историю успеха, как я могу получить скидку?';

send($email, $title, $body);




---




function showGreeting()
{
  $text = 'Hello, Hexlet!';
  print_r($text);

}

showGreeting();




---




function noop() {}

noop();




---




namespace App\Solution;

function printMotto() {
    print_r('Winter is coming');
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

returning values from a function
--------------------------------


function greeting()
{
    print_r('Hello, Hexlet!');
}




---




function saveEmail()
{
    $email = "  SuppORT@hexlet.IO";
    $trimmedEmail = trim($email);
    $preparedEmail = strtolower($trimmedEmail);
    print_r($preparedEmail);
}




---




$message = greeting();
var_dump($message);




---




function greeting()
{
    return 'Hello, Hexlet!';
}




---




$message = greeting();
print_r($message);
print_r(strtoupper($message));




---




function greeting()
{
    return 'Hello, Hexlet!';
    print_r('Я никогда не выполнюсь');
}




---




function greeting()
{
    print_r('Я появлюсь в консоли');
    return 'Hello, Hexlet!';
}

$message = greeting();




---




function greeting()
{
    $message = 'Hello, Hexlet!';
    return $message;
}




---




function doubleFive()
{
    $result = 5 + 5;
    return $result;
}




---




function run()
{
    return 5;
    return 10;
}

run();




---




namespace App\Solution;

function getCurrentYear()
{
    $now = date('Y-m-d');
    $year = substr($now, 0, 4);
    return (int) $year;
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function params
---------------


print_r('я параметр');
round(10.1245, 3);
str_replace('go', 'mo', 'google');




---




getLastChar('Hexlet');
$name1 = 'Hexlet';
getLastChar($name1);
$name2 = 'Goo';
getLastChar($name2);




---




function getLastChar($str)
{
    return $str[strlen($str) - 1];
}




---




function average($x, $y)
{
    return ($x + $y) / 2;
}
average(1, 5);
average(1, 2);




---





namespace App\Solution;

function truncate($str, $length)
{
    $cuttedString = substr($str, 0, $length);
    return "{$cuttedString}...";
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

optional function parameters
----------------------------


function myPow($x, $base = 2)
{
    return $x ** $base;
}

myPow(3);
myPow(3, 3);




---




function myPrint($text = 'nothing')
{
    print_r($text);
}

myPrint();
myPrint("Hexlet");




---




function f($a = 5, $b = 10, $c = 100)
{}




---




namespace App\Solution;

function getHiddenCard($cardNumber, $starsCount = 4)
{
    $visibleDigitsLine = substr($cardNumber, 12);
    return str_repeat('*', $starsCount) . $visibleDigitsLine;
}





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

environment
-----------


$age = 5;

function generate()
{
    return $age + 3;
}

$result = generate();




---




$age = 5;

function changeAge()
{
    $age = 8;
}

changeAge();

print_r($age);




---




const AGE = 5;

function generate()
{
    return AGE + 3;
}

$result = generate();

print_r($result);




---





function getAgeDifference($yearOne, $yearTwo)
{
    $difference = abs($yearOne - $yearTwo);
    return "The age difference is {$difference}";
}







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

naming
------


$x = 'Father!';
print_r($x);
print_r($x);




---





function getFormattedBirthday($day, $month, $year)
{
    return sprintf('%02d-%02d-%d', $day, $month, $year);
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

logic operations
----------------



<  — меньше
<= — меньше или равно
>  — больше
>= — больше или равно
== — равно
!= — не равно




---




$result = 5 > 4;
print_r($result);
print_r('one' !== 'one');




---




function isInfant($age)
{
    return $age < 1;
}

var_dump(isInfant(3));
var_dump(isInfant(0.5));




---





isInfant()    — «младенец ли?»
hasChildren() — «есть ли дети?»
isEmpty()     — «пустой ли?»
hasErrors()   — «есть ли ошибки?»




---




function isEven($number)
{
    return $number % 2 === 0;
}

isEven(10);
isEven(3);




---




function hasSpecialChars($str)
{}

function isCorrectPassword($password)
{
    $length = strlen($password);
    return ($length >= 8 && $length <= 20) && hasSpecialChars($password);
}

isCorrectPassword('qwerty');
isCorrectPassword('qwerty1234');
isCorrectPassword('zxcvbnmasdfghjkqwertyui');




---




A       B       A && B
----------------------
TRUE    TRUE    TRUE
TRUE    FALSE   FALSE
FALSE   TRUE    FALSE
FALSE   FALSE   FALSE




---




A       B       A ‖ B
---------------------
TRUE    TRUE    TRUE
TRUE    FALSE   TRUE
FALSE   TRUE    TRUE
FALSE   FALSE   FALSE




---




function isEven($number)
{
    return $number % 2 === 0;
}

isEven(10);
!isEven(10);
!!isEven(10);




---




print_r(true);
print_r(false);
print_r(0 || 1);




---




var_dump('' === false); // => false
var_dump('' == false);




---




$answer = true;
var_dump(!$answer);
var_dump(!!$answer);




---





function isLeapYear($year)
{
    return $year % 400 === 0 || ($year % 4 === 0 && $year % 100 !== 0);
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

conditional constructions if and if-else
----------------------------------------


function getTypeOfSentence($sentence)
{
    $lastChar = $sentence[-1];
    if ($lastChar === '?') {
        return 'question';
    }

    return 'normal';
}

getTypeOfSentence('Hodor');
getTypeOfSentence('Hodor?');




---




function getTypeOfSentence($sentence)
{
    $lastChar = $sentence[-1];

    if ($lastChar === '?') {
        $sentenceType = 'question';
    } else {
        $sentenceType = 'normal';
    }

    return "Sentence is {$sentenceType}";
}

getTypeOfSentence('Hodor');
getTypeOfSentence('Hodor?');




---




function getTypeOfSentence($sentence)
{
    $lastChar = $sentence[-1];

    if ($lastChar !== '?') {
        $sentenceType = 'normal';
    } else {
        $sentenceType = 'question';
    }

    return "Sentence is {$sentenceType}";
}




---




function getTypeOfSentence($sentence)
{
    $lastChar = $sentence[-1];

    if ($lastChar === '!') {
        $sentenceType = 'exclamation';
    } else {
        $sentenceType = 'normal';
    }

    if ($lastChar === '?') {
        $sentenceType = 'question';
    }

    return "Sentence is {$sentenceType}";
}

getTypeOfSentence('Who?');
getTypeOfSentence('No');
getTypeOfSentence('No!');




---




function getTypeOfSentence($sentence)
{
  $lastChar = $sentence[-1];

  if ($lastChar === '?') {
      $sentenceType = 'question';
  } elseif ($lastChar === '!') {
      $sentenceType = 'exclamation';
  } else {
      $sentenceType = 'normal';
  }

  return "Sentence is {$sentenceType}";
}




---





function normalizeUrl($url)
{
    if (strpos($url, 'http://') === 0) {
        $domain = substr($url, 7);
    } elseif (strpos($url, 'https://') === 0) {
        $domain = substr($url, 8);
    } else {
        $domain = $url;
    }

    return "https://{$domain}";
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ternar operators and Elvis
--------------------------



function abs($number)
{
    if ($number >= 0) {
        return $number;
    }

    return -$number;
}

abs(10);
abs(-10);




---




function abs($number)
{
    return $number >= 0 ? $number : -$number;
}




---




function getTypeOfSentence($sentence)
{
    $lastChar = substr($sentence, -1);

    if ($lastChar === '?') {
        return 'question';
    }

    return 'normal';
}




---




function getTypeOfSentence($sentence)
{
    $lastChar = substr($sentence, -1);

    return ($lastChar === '?') ? 'question' : 'normal';
}

getTypeOfSentence('Hodor');
getTypeOfSentence('Hodor?');




---




function generateGreeting($name, $nickname)
{
    if ($name) {
        return "Hello, {$name}!";
    } else {
        return "Hello, {$nickname}!";
    }
}

generateGreeting('Bob', 'CoolBob86');
generateGreeting('', 'CoolBob86');




---




function generateGreeting($name, $nickname)
{
    return $name ? "Hello, {$name}!" : "Hello, {$nickname}!";
}




---




function generateGreeting($name, $nickname)
{
    $user = $name ?: $nickname;
    return "Hello, {$user}!";
}




---





function convertText($string)
{
    return $string[0] === strtoupper($string[0]) ? $string : strrev($string);
}







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

switch construction
-------------------


if ($status === 'processing') {
    // Делаем раз
} elseif ($status === 'paid') {
    // Делаем два
} elseif ($status === 'new') {
    // Делаем три
} else {
    // Делаем четыре
}




---




switch ($status) {
    case 'processing':
        // Делаем раз
        break;
    case 'paid': // status == paid
        // Делаем два
        break;
    case 'new': // status == new
        // Делаем три
        break;
    default: // else
        // Делаем четыре
}




---




switch ($count) {
    case 1:
        // Делаем что-то полезное
        break;
    case 2:
        // Делаем что-то полезное
        break;
    default:
        // Что-то делаем
}




---




function doSomethingGood($count)
{
    switch ($count) {
        case 1:
            $result = 'one';
            break;
        case 2:
            $result = 'two';
            break;
        default:
            $result = null;
    }

    return $result;
}




---




function doSomethingGood($count)
{
    switch ($count) {
        case 1:
            return 'one';
        case 2:
            return 'two';
        default:
            return null;
    }
}




---





function calculate($operation, $a, $b)
{
    switch ($operation) {
        case '+':
            return $a + $b;
        case '-':
            return $a - $b;
        case '/':
            return $a / $b;
        case '*':
            return $a * $b;
        default:
            return null;
    }
}








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

while loop
----------


function printNumbers($lastNumber)
{
    $i = 1;

    while ($i <= $lastNumber) {
        print_r($i);
        print_r("\n");
        $i = $i + 1;
    }
    print_r('finished!');
}

printNumbers(3);




---




function printNumbers($lastNumber)
{
    $i = 1;

    while ($i <= $lastNumber) {
        print_r($i);
    }
    print_r('finished!');
}




---




while (true) {
    // Что-то делаем
}




---





function printNumbers($firstNumber)
{
    while ($firstNumber > 0) {
        print_r($firstNumber);
        print_r("\n");
        $firstNumber -= 1;
    }
    print_r('finished!');
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

loops usage
-----------


function sumNumbersFromRange ($start, $finish)
{
    $i = $start;
    $sum = 0;

    while ($i <= $finish) {
        $sum = $sum + $i;
        $i += 1;
    }

    return $sum;
}




---




function repeat($text, $times)
{
    $result = '';
    $i = 1;

    while ($i <= $times) {
        $result = "{$result}{$text}";
        $i = $i + 1;
    }

    return $result;
}




---




function printNameBySymbol($name)
{
    $i = 0;

    while ($i < strlen($name)) {
        print_r("$name[$i]\n");
        $i = $i + 1;
    }
}

$name = 'Arya';
printNameBySymbol($name);




---




function reverse($str)
{
    $i = 0;

    $result = '';

    while ($i < strlen($str)) {
        $currentChar = $str[$i];
        $result = "{$currentChar}{$result}";
        $i = $i + 1;
    }

    return $result;
}

$name = 'Bran';
reverse($name);
reverse('');




---




function multiplyNumbersFromRange($start, $finish)
{
    $i = $start;
    $multiply = 1 ;
    while ($i <= $finish) {
        $multiply = $multiply * $i;
        $i = $i + 1;
    }
    return $multiply;
}

multiplyNumbersFromRange(3, 5);




---




function joinNumbersFromRange($begin, $end)
{
    $i = $begin;
    $result = '';

    while ($i <= $end) {
        $result = "{$result}{$i}";
        $i = $i + 1;
    }

    return $result;
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

borderline cases
----------------


function mysubstr($str, $length)
{
    $index = 0;
    $result = '';

    while ($index < $length) {
        $currentChar = $str[$index];
        $result = "{$result}{$currentChar}";
        $index = $index + 1;
    }

    return $result;
}

$str = 'If I look back I am lost';

mysubstr($str, 1);
mysubstr($str, 7);




---




$str = 'If I look back I am lost';

mysubstr($str, 0, 1);
mysubstr($str, 3, 6);




---





function isArgumentsForSubstrCorrect($str, $index, $length)
{
    $stringLength = strlen($str);

    if ($index < 0) {
        return false;
    } elseif ($length < 0) {
        return false;
    } elseif ($index >= $stringLength) {
        return false;
    } elseif ($index + $length > $stringLength) {
        return false;
    }

    return true;
}







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

for loop
--------


function reverseString($str)
{
    $result = '';

    for ($i = 0; $i < strlen($str); $i += 1) {
        $currentChar = $str[$i];
        $result = "{$currentChar}{$result}";
    }

    return $result;
}




---




function sum($numbers)
{
    $result = 0;
    for ($i = 0; $i < strlen(numbers); $i += 1) {
        $result += (int) ;
    }
    return $result;
}

sum("12345");




---




function sum($numbers)
{
    $result = 0;
    for ($i = 0; $i < strlen($numbers); $i += 1) {
        $result += (int) $numbers[$i];
    }
    return $result;
}

sum("12345");




---




function sumOfSeries($start, $finish)
{
    $sum = 0;
    for ($i = $start; $i <= $finish; $i++) {
        $sum += $i;
    }

    return $sum;
}







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

strings locales
---------------


$str = 'Привет';
$symbol = mb_substr($str, 2, 1);




---




printf("%g \n", 1.234);
setlocale(LC_NUMERIC, 'ru_RU');
printf("%g \n", 1.234);




---





function invertCase($text)
{
    $len = mb_strlen($text);
    $result = '';

    for ($i = 0; $i < $len; $i++) {
        $symbol = mb_substr($text, $i, 1);
        $lowerSymbol = mb_strtolower($symbol);

        if ($symbol === $lowerSymbol) {
            $result .= mb_strtoupper($symbol);
        } else {
            $result .= $lowerSymbol;
        }
    }

    return $result;
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

date and time
-------------


time();




---




date('Y');




---




date('M', 123123123);




---




date('l jS \of F Y h:i:s A');




---




mktime(
    int $hour,
    ?int $minute = null,
    ?int $second = null,
    ?int $month = null,
    ?int $day = null,
    ?int $year = null
): int|false




---




mktime(0, 0, 0, 7, 1, 2000);




---





function getCustomDate($timestamp)
{
    return date('d/m/Y', $timestamp);
}









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

debugging
---------


function sumOfSeries($start, $finish)
{
    $sum = 0;
    for ($i = $start; $i < $finish; $i++) {
        $sum += $i;
    }

    return $sum;
}




---




function sumOfSeries($start, $finish)
{
    $sum = 0;
    for ($i = $start; $i < $finish; $i++) {
        print_r('new iteration !!!!');
        print_r($i);
        $sum += $i;
        print_r($sum);
    }

    return $sum;
}

sumOfSeries(3, 5);




---




$var = 'hello, world!';
dump($var);




---




function isPalindrome(string $word)
{
    $lastIndex = mb_strlen($word) - 1;
    $middleIndex = $lastIndex / 2;

    for ($i = 0; $i < $middleIndex; $i++) {
        $symbol = mb_substr($word, $i, 1);
        $mirroredSymbol = mb_substr($word, $lastIndex - $i, 1);
        
        if ($symbol !== $mirroredSymbol) {
            return false;
        }
    }
    return true;
}







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

errors
------


print_r('Hodor')

PHP Parse error:  syntax error, unexpected end of file in /private/var/tmp/index.php on line 4




---




$i += 3;
// PHP Notice:  Undefined variable: i in php shell code on line 1




---




function foo()
{
    $i += 1;
}

foo();

@foo();




---




namespace App\Solution;

function generateError()
{
    some();
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

files include
-------------



include
include_once
require
require_once




---




function sayHi()
{
    print_r('Hi!');
}


require_once 'print.php';

sayHi();




---




$x = 'Hi!';


// file: index.php

require_once 'print.php';

print_r($x);




---




print_r("Hi from print.php!\n");

// file: index.php

require_once 'print.php';

print_r("Hi from index.php!\n");




---




// index.php

print_r("Hi from print.php!\n");
print_r("Hi from index.php!\n");




---





require_once 'Strings.php';

function isPalindrome($word)
{
    return $word === reverse($word);
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

namespaces
----------


function foo()
{
    print_r('one');
}

function foo()
{
    print_r('two');
}




---





mylibnameSendEmail()
mylibnameAddNewUser()




---




namespace math;

function sum($a, $b)
{
    return $a + $b;
}




---




// index.php

require_once 'math.php';

// Обратиться напрямую к функции sum не получится:
// PHP Fatal error:  Uncaught Error: Call to undefined function sum()

sum(3, 2);

// Если указать пространство имен, то все работает
\math\sum(5, 8);




---




require_once 'text.php';
require_once 'number.php';

// Эта функция повторяет строчку, переданную первым параметром столько раз, сколько указано во втором параметре

\text\multiply('hi', 3); // hihihi
\number\multiply(3, 2);




---




require_once 'text.php';
require_once 'number.php';

namespace main;

function multiply($a, $b)
{
    print_r('it works!');
}

function all()
{
    \text\multiply('ho', 2); // hoho
    \number\multiply(3, 2); // 6

    // Такой вызов неявно подставляет текущее пространство \main\

    multiply(2, 3); // it works!
}




---






namespace Solution;

require_once "Strings.php";

function isPalindrome($word)
{
    return $word === \Strings\reverse($word);
}







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

nested namespaces
-----------------


namespace Formatters\Pretty;

function render($data)
{
    // some code
}




---




namespace Generator;

function generate($data)
{
    return \Formatters\Pretty\render($data);
}




---




namespace My\Site\Formatters\Pretty;




---




namespace My\Site\Generator;




---





Solution.php
------------

namespace App\Solution;

function hello()
{
    return 'solution';
}



NS.php
------

namespace App\Internal\NS;

function hello()
{
    return 'ns';
}







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

importing functions
-------------------


require_once(__DIR__ . '/src/Formatters/Pretty.php');

namespace Generator;

function generate($data)
{
    return \Formatters\Pretty\render($data);
}




---




require_once(__DIR__ . '/src/Formatters/Pretty.php');

namespace Generator;

use function Formatters\Pretty\render;

function generate($data)
{
    return render($data);
}




---




require_once(__DIR__ . '/src/Pairs.php');

namespace Php\Pairs\Data\Lists;

use function Php\Pairs\Pairs\cons;
use function Php\Pairs\Pairs\car;
use function Php\Pairs\Pairs\cdr;
use function Php\Pairs\Pairs\toString;




---




require_once(__DIR__ . '/src/Formatters/Pretty.php');
require_once(__DIR__ . '/src/Formatters/Simple.php');

namespace Generator;

use function Formatters\Pretty\render;
use function Formatters\Simple\render as simpleRender;

function generate($data)
{
    return simpleRender($data);
}




---





use function App\Symbols\isVowel;

function countVowels($text)
{
    $len = strlen($text);
    $result = 0;

    for ($i = 0; $i < $len; $i++) {
        if (isVowel($text[$i])) {
            $result += 1;
        }
    }

    return $result;
}







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

description of types
--------------------


function sayHelloTo($name)
{
    print_r("Hello, {$name}");
}




---




sayHelloTo([]);




---




function sayHelloTo(int $name)
{
    print_r("Hello, {$name}");
}


sayHelloTo(false); // Hello, 0
sayHelloTo('1');




---





function sayHelloTo(string $name)
{
    print_r("Hello, {$name}");
}

sayHelloTo([]);
// PHP Fatal error:  Uncaught TypeError: Argument 1 passed to sayHelloTo() must be of the type string, array given




---




function get(string $text, int $index, $default = null)
{
    $length = strlen($text);
    return ($index >= 0) && ($index < $length)  ? $text[$index] : $default;
}

get('hi', 3, 8); // 8

get('ho', 'hey');
// PHP Fatal error:  Uncaught TypeError: Argument 2 passed to get() must be of the type integer, string given




---




function printStr(string $value)
{
    echo $value;
}
printStr(null);
// PHP Fatal error:  Uncaught TypeError: Argument 1 passed to printStr() must be of the type string, null given




---




function printStr(string $value = null)
{
   echo $value;
}
printStr(null);




---





function sum(int $a, int $b): int
{
    return $a + $b;
}




---




function sayItLoud(string $text): void
{
    $loudText = "{$text}!";
    print_r($loudText);
}




---




declare(strict_types = 1);

function AddIntAndFloat(int $a, float $b): int
{
    return $a + $b;
}

echo AddIntAndFloat(1.4, '2');
// Fatal error: Uncaught TypeError: Argument 1 passed to AddIntAndFloat() must be of the type int, float given
echo AddIntAndFloat(1, '2');
// Fatal error: Uncaught TypeError: Argument 2 passed to AddIntAndFloat() must be of the type float, string given




---




function isPersonMrSmith(?string $person): bool
{
    // Тут какая-то логика
}




---




isPersonMrSmith();
// Fatal error: Uncaught ArgumentCountError: Too few arguments to function





---




public function getName(string $person): ?string
{
    // Тут какая-то логика
}




---





function reverse(int $num): int
{
    $reverse = (int) strrev((string) abs($num));
    return $num >= 0 ? $reverse : -$reverse;
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

references
----------


$a = 5;
$b = $a;
$a = 3;
echo $b;




---




$a = 5;
$b =& $a;
$a = 3;
echo $b;




---




$a = 5;
$b = $a;




---




// Либо так: function strangeFunction(&$text)

function strangeFunction(string &$text)
{
    $text = 'hei';
}

$text = 'money';

strangeFunction($text);
echo $text;




---





function swap(&$a, &$b)
{
    $c = $a;
    $a = $b;
    $b = $c;
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
















---------
EXERCISES
---------






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

binarySum.php
-------------

namespace App\Solution;

function binarySum($first, $second) {
    $result = "";
    $sum = 0;
    
    $index1 = strlen($first) - 1;
    $index2 = strlen($second) - 1;

    while ($index1 >= 0 || $index2 >= 0 || $sum == 1) {
        $sum += (($index1 >= 0)? ord($first[$index1]) - ord('0'): 0);
        $sum += (($index2 >= 0)? ord($second[$index2]) - ord('0'): 0);
                        
        $result = chr($sum % 2 + ord('0')) . $result;
        $sum    = (int)($sum / 2);

        $index1--;
        $index2--;
    }
    return $result;
}








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

fib.php
-------


function fib($i) {
    if ($i == 0 ) return 0;

    if ($i == 1 || $i == 2) { 
        return 1; 
    } else { 
        return fib($i - 1) + fib($i - 2);
    }
}









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

fizzBuzz.php
------------

function fizzBuzz($begin, $end) {
    for ($i = $begin; $i <= $end; $i++) {
        if ($i % 3 == 0 && $i % 5 == 0) {
            echo "FizzBuzz" . " " ;
        } else if ($i % 3 == 0) {
            echo "Fizz" . " ";
        } else if ($i % 5 == 0) {
            echo "Buzz" . " ";
        } else {
            echo $i . " ";
        }
    }
}








---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

isPerfect.php
-------------

function isPerfect($num) {
    $sum = 0;
    $i = 1;
       
    while ($i <= $num / 2) {  
        if($num % $i == 0) {  
            $sum = $sum + $i;  
        }
        $i++;  
    }

    return $sum == $num;
}










---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

isPowerOfThree.php
------------------

function isPowerOfThree($n) {
    if ($n <= 0)
        return false;
    if ($n % 3 == 0)
        return isPowerOfThree($n / 3);
    if ($n == 1)
        return true;
    return false;
}









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

isBalanced.php
--------------

function isBalanced($string) {
    $string = str_split($string);
    $stack = array();

    foreach ($string as $key => $value) {
        switch ($value) {
            case '(': array_push($stack, 0); break;
            case ')': 
                if (array_pop($stack) !== 0) return false;
                break;
        }
    }
    return (empty($stack));
}










---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




















































